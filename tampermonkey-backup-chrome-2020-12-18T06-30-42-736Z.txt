{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"AC-baidu:重定向优化百度搜狗谷歌必应搜索_favicon_双列","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["www.baidu.com"],"orig_excludes":["*://*.google*/sorry*"],"orig_includes":["*://ipv6.baidu.com/*","*://www.baidu.com/*","*://www1.baidu.com/*","*://m.baidu.com/*","*://xueshu.baidu.com/s*","*://www.so.com/s?*","*://*.bing.com/*","*://encrypted.google.*/search*","*://*.google*/search*","*://*.google*/webhp*","*://*.zhihu.com/*","*://*duckduckgo.com/*","*://*.dogedoge.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"Config":"s{\"isRedirectEnable\":true,\"isAdsEnable\":false,\"isAutopage\":true,\"isBlockEnable\":false,\"isBlockDisplay\":false,\"isBlockBtnNotDisplay\":false,\"AdsStyleEnable\":true,\"baidu\":{\"name\":\"baidu\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"google\":{\"name\":\"google\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"bing\":{\"name\":\"bing\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"duck\":{\"name\":\"duck\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"doge\":{\"name\":\"doge\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"sogou\":{\"name\":\"sogou\",\"AdsStyleMode\":\"1\",\"HuYanMode\":false},\"Style_BaiduLite\":false,\"defaultHuYanColor\":\"#DEF1EF\",\"isUserColorEnable\":true,\"isFaviconEnable\":true,\"defaultFaviconUrl\":\"https://ae01.alicdn.com/kf/HTB1dRY0X8OD3KVjSZFFq6An9pXay.jpg\",\"doDisableSug\":true,\"isRightDisplayEnable\":false,\"isCounterEnable\":true,\"isALineEnable\":false,\"isUserStyleEnable\":false,\"normalizeDuck\":true,\"isEnLang\":false,\"isGooleInBaiduModeEnable\":false,\"UserBlockList\":[],\"UserStyleText\":\"/**计数器的颜色样式*/\\ndiv .AC-CounterT{\\n  background: #FD9999;\\n}\\n/**右侧栏的样式-其实不开启更好看一些*/\\n#content_right{\\n  padding: 20px 15px 15px;\\n  border-radius: 5px;\\n  background-color: #fff;\\n  box-sizing: border-box;\\n  box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -webkit-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -moz-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n}\\n/****可以加一些自己的背景图片,替换引号内的内容为可外链的图片即可****/\\nbody[baidu]{\\n  background-repeat: repeat-y;\\n  background-size: 100%;\\n  background-attachment:fixed;\\n  background-image: url('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1564756277250&di=868b9eac9be14df1dedd8c7d6a710844&imgtype=0&src=http%3A%2F%2Fphotocdn.sohu.com%2F20130530%2FImg377502333.jpg');\\n}\\n/*****窗口背景的透明虚化效果*****/\\nbody>#wrapper,body>.wrap,body>#main,body #appbar,body #hdtbSum{\\n  background: rgba(225,225,225,0.8);\\n}\\n/**隐藏首页的大图标-修复可能导致外援样式异常**/\\nbody[baidu] #s_lg_img_new{\\n  display:none !important;\\n}\\n#wrapper #content_left .result, #wrapper #content_left .c-container{\\n  border-radius: 5px;\\n}\",\"oldVersion\":\"24.12\",\"lastSaveTime\":1608270296137}"},"ts":1608270296137},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97/code/AC-baidu:%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2_favicon_%E5%8F%8C%E5%88%97.user.js","uuid":"958f5fa4-1970-45a3-bbd1-d8d950a35c81","source":"","resources":[{"meta":{"name":"baiduCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduCommonStyle.css?t=24.12","ts":1607929008943,"mimetype":"text/css"},"source":""},{"meta":{"name":"baiduOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduOnePageStyle.css?t=24.12","ts":1607929008944,"mimetype":"text/css"},"source":"I3dyYXBwZXJfd3JhcHBlciAjY29udGFpbmVye3dpZHRoOjEwMCU7bWFyZ2luLWxlZnQ6dW5zZXR9Zm9ybS5mbXtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOnVuc2V0fWJvZHlbYmFpZHVdIC5wYWdlZm9vdC5nanttYXJnaW4tdG9wOjEwMHB4fSNyZXN1bHRfbG9nb3twb3NpdGlvbjpyZWxhdGl2ZX0jc190YWIgYiwjc190YWIgYXtwb3NpdGlvbjpyZWxhdGl2ZX0jd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXJ7cG9zaXRpb246YWJzb2x1dGU7bGVmdDoyMCU7d2lkdGg6NjAlfSN3cmFwcGVyICNjb250ZW50X2xlZnQsI3dyYXBwZXIgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjcnMsI3dyYXBwZXIgI3BhZ2V7dG9wOjM1cHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjA7d2lkdGg6NDAlIWltcG9ydGFudDttaW4td2lkdGg6NjcwcHg7ZmxvYXQ6dW5zZXQ7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luOjAgYXV0b30jd3JhcHBlciAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7cGFkZGluZy1sZWZ0OjIwcHh9I3dyYXBwZXIgI3BhZ2V7YmFja2dyb3VuZDp1bnNldH0jd3JhcHBlciAjcnMgdGh7dGV4dC1hbGlnbjpjZW50ZXJ9I3dyYXBwZXIgI3Jze3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjozMHB4IGF1dG8gLTIwcHh9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAuYy1jb250YWluZXJ7d2lkdGg6MTAwJSFpbXBvcnRhbnQ7bWluLXdpZHRoOjY1MHB4fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MTAwMHB4KXsjd3JhcHBlciAjY29udGVudF9sZWZ0LCN3cmFwcGVyICNyc3ttaW4td2lkdGg6ODAwcHh9fSN3cmFwcGVyICNjb250ZW50X3JpZ2h0e21hcmdpbi1yaWdodDpjYWxjKDE1dncgLSAyMTBweCk7ZGlzcGxheTpub25lfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MTYwMHB4KXsjd3JhcHBlciAjY29udGVudF9yaWdodHtkaXNwbGF5OmJsb2NrO2Zsb2F0OnVuc2V0O3Bvc2l0aW9uOmFic29sdXRlfX0jd3JhcHBlciAjcGFnZSBhLCN3cmFwcGVyICNwYWdlIHN0cm9uZ3ttYXJnaW4tcmlnaHQ6MjJweCFpbXBvcnRhbnR9I3dyYXBwZXIgI3BhZ2UgLnBhZ2UtaW5uZXJ7cGFkZGluZy1sZWZ0OjIycHg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnNfdGFiX2lubmVye2Rpc3BsYXk6YmxvY2shaW1wb3J0YW50fSNjb250YWluZXIgLmhpbnRfY29tbW9uX3Jlc3RvcHtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OmNhbGMoNDV2dyAtIDUwMHB4KTttYXJnaW4tdG9wOjI1cHh9LkFDLnNwLXNlcGFyYXRvcnt3aWR0aDphdXRvfSNzZWotY29udGFpbmVye3BhZGRpbmctbGVmdDpjYWxjKDQ0JSAtIDQ3OHB4KSFpbXBvcnRhbnR9LnNfZm9ybV93cmFwcGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSN3cmFwcGVyICNzX3RhYntwYWRkaW5nLWxlZnQ6MDttYXJnaW4tbGVmdDowO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSN3cmFwcGVyICNjb250YWluZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsI3dyYXBwZXIgI2NvbnRhaW5lciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXN7d2lkdGg6NjklO21hcmdpbi1sZWZ0OjE2JX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjE0NTBweCl7Zm9ybS5mbSAuc19pcHRfd3IuYmd7bWluLXdpZHRoOjMzMHB4fX0="},{"meta":{"name":"baiduTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduTwoPageStyle.css?t=24.12","ts":1607929008944,"mimetype":"text/css"},"source":"I3dyYXBwZXJfd3JhcHBlciAjY29udGFpbmVye3dpZHRoOmF1dG99Zm9ybS5mbXtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOnVuc2V0fSNzX3RhYiBiLCNzX3RhYiBhe3Bvc2l0aW9uOnJlbGF0aXZlfSN3cmFwcGVyICNzX3RhYntwYWRkaW5nLWxlZnQ6MDttYXJnaW4tbGVmdDowO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAuc2VhcmNoX3Rvb2xfY29udGVyLCN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAubnVtc3t3aWR0aDo4MCU7bWFyZ2luLWxlZnQ6MTAlfSN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciwuaGludF9jb21tb25fcmVzdG9wLCNoZWFkZXJfdG9wX2Jhcntwb3NpdGlvbjpyZWxhdGl2ZTtsZWZ0OjEwJTt3aWR0aDo4MCV9I3dyYXBwZXIgI2hlYWRlcl90b3BfYmFye21hcmdpbi1ib3R0b206MH1ib2R5ICNjb250YWluZXIuc2FtX25ld2dyaWQgI2NvbnRlbnRfbGVmdHt3aWR0aDo4MCV9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdHtkaXNwbGF5OmlubGluZS1ncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczo1MCUgNTAlO2dyaWQtdGVtcGxhdGUtYXJlYXM6InhtYWluIHhtYWluIjttYXJnaW46MCBhdXRvO3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmctbGVmdDo1JTtmbG9hdDp1bnNldDt3aWR0aDo4MCU7bWFyZ2luLWxlZnQ6NyU7bWFyZ2luLWJvdHRvbTozMHB4fWJvZHlbbmV3c10gI3dyYXBwZXIgI2NvbnRlbnRfbGVmdD5kaXY6bm90KFtjbGFzc10pOm5vdChbaWRdKXtkaXNwbGF5OmlubGluZS1ncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczo1MCUgNTAlO2dyaWQtdGVtcGxhdGUtYXJlYXM6InhtYWluIHhtYWluIn0jd3JhcHBlciAjY29udGVudF9yaWdodHtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fSN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lciAjcnN7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luOjAgYXV0b30jd3JhcHBlciAjcGFnZXttaW4td2lkdGg6NzEwcHg7aGVpZ2h0OjQwcHg7bGluZS1oZWlnaHQ6NDBweDtwYWRkaW5nOjVweCAxMHB4O21hcmdpbjowIGF1dG87dGV4dC1hbGlnbjpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmV9I3dyYXBwZXIgI3BhZ2UgLnBhZ2UtaW5uZXJ7cGFkZGluZy1sZWZ0OjB9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LCN3cmFwcGVyICNjb250ZW50X2xlZnQgLmMtY29udGFpbmVye3dpZHRoOnVuc2V0IWltcG9ydGFudDttYXgtd2lkdGg6MTAwJTttYXJnaW4tbGVmdDo1cHg7bWFyZ2luLXJpZ2h0OjE1cHh9I3dyYXBwZXIgI2NvbnRlbnRfbGVmdD4qOm5vdChbY2xhc3MqPXJlc3VsdF0pOm5vdChbY2xhc3MqPWMtZ3JvdXAtd3JhcHBlcl0pe2dyaWQtY29sdW1uLXN0YXJ0OjE7Z3JpZC1jb2x1bW4tZW5kOnhtYWluLWVuZH0uYy1jb250YWluZXIgaDMgYXt6LWluZGV4OjF9LkFDLnNwLXNlcGFyYXRvcnt3aWR0aDphdXRvfSNzZWotY29udGFpbmVye3BhZGRpbmctbGVmdDpjYWxjKDEyJSAtIDExM3B4KSFpbXBvcnRhbnR9LnNfZm9ybV93cmFwcGVye2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpmbGV4fSN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAuc2VhcmNoX3Rvb2xfY29udGVyLCN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAubnVtc3t3aWR0aDo4MCV9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMzg4cHgpe2Zvcm0uZm0gLnNfaXB0X3dyLmJne21pbi13aWR0aDo0MDBweH0ud3JhcHBlcl9uZXcgI3Jlc3VsdF9sb2dve21hcmdpbi1sZWZ0Oi0xMDBweH19"},{"meta":{"name":"baiduLiteStyle.css","url":"http://ibaidu.ntaow.com/newcss/baiduLiteStyle.css?t=24.12","ts":1607932532013,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/googleCommonStyle.css?t=24.12","ts":1607932532014,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/googleOnePageStyle.css?t=24.12","ts":1607932532011,"mimetype":"text/css"},"source":"I3Jzb3twb3NpdGlvbjpyZWxhdGl2ZTtmbG9hdDp1bnNldH0jcnNvIC5qVW1rRmI6aG92ZXJ7bWFyZ2luLWJvdHRvbTozMHB4O21hcmdpbi1sZWZ0OjIwcHh9I3JzbyAuZ3t3aWR0aDp1bnNldDttYXJnaW4tbGVmdDoyMHB4O292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjAgMjBweCAxNXB4O21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjMwcHg7Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JveC1zaXppbmc6Ym9yZGVyLWJveDt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHN9LnNlYXJjaD4jaXJlcyAjcnNvPi5ne21heC13aWR0aDp1bnNldH0jbWFpbiAubXcgI3Joc3tkaXNwbGF5Om5vbmV9I21haW4gLm13e21heC13aWR0aDp1bnNldH0jbWFpbiAjY250LCNjbnQgI2NlbnRlcl9jb2wsI2NudCAjZm9vdHt3aWR0aDo1MHZ3O21hcmdpbjowIGF1dG99Ym9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCxib2R5ICN0b3BfbmF2LGJvZHkgI2ZiYXJ7bWluLXdpZHRoOnVuc2V0fSNyc28gZy1zY3JvbGxpbmctY2Fyb3VzZWx7bWFyZ2luOnVuc2V0O21hcmdpbi1sZWZ0OjIwcHh9LmNvbHt3aWR0aDoxMDAlIWltcG9ydGFudH0uY29sICNjZW50ZXJfY29se3dpZHRoOjEwMCUhaW1wb3J0YW50O21hcmdpbi1sZWZ0OnVuc2V0IWltcG9ydGFudH0uc3JwIC5iaWcgI3RzZnt3aWR0aDo4MzNweH0uc3JwIGZvcm17bWFyZ2luOjAgYXV0b30jdG9wX25hdnttaW4td2lkdGg6dW5zZXR9LnNycCBmb3JtIGRpdltqc2NvbnRyb2xsZXJde21hcmdpbi1sZWZ0OnVuc2V0O21hcmdpbjowIGF1dG99Zy1zZWN0aW9uLXdpdGgtaGVhZGVye3RleHQtYWxpZ246Y2VudGVyfQ=="},{"meta":{"name":"googleTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/googleTwoPageStyle.css?t=24.12","ts":1607929008951,"mimetype":"text/css"},"source":"I3Jzb3twb3NpdGlvbjpyZWxhdGl2ZTtmbG9hdDp1bnNldH0jcnNvIC5qVW1rRmI6aG92ZXJ7bWFyZ2luLWJvdHRvbTozMHB4O21hcmdpbi1sZWZ0OjIwcHh9I3JzbyAuZywudmtfY3t3aWR0aDp1bnNldDttYXJnaW4tbGVmdDoyMHB4O292ZXJmbG93OmhpZGRlbjtwYWRkaW5nOjEwcHggMjBweCAxNXB4O21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjI1cHg7Ym9yZGVyLXJhZGl1czo1cHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JveC1zaXppbmc6Ym9yZGVyLWJveDt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHN9LnNlYXJjaD4jaXJlcyAjcnNvPi5ne21heC13aWR0aDp1bnNldH0jbWFpbiAubXcgI3Joc3tkaXNwbGF5Om5vbmV9I21haW4gLm13e21heC13aWR0aDp1bnNldH0jbWFpbiAjY250LCNjbnQgI2NlbnRlcl9jb2wsI2NudCAjZm9vdHt3aWR0aDo4MHZ3O21hcmdpbjowIGF1dG99Ym9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCxib2R5ICN0b3BfbmF2LGJvZHkgI2ZiYXJ7bWluLXdpZHRoOnVuc2V0fSNyc28gLkNPRW9pZHttYXJnaW46dW5zZXR9LmNvbHt3aWR0aDoxMDAlIWltcG9ydGFudH0uY29sICNjZW50ZXJfY29se3dpZHRoOjEwMCUhaW1wb3J0YW50O21hcmdpbi1sZWZ0OnVuc2V0IWltcG9ydGFudH0uc3JnLCNyc297ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoYXV0by1maXQsbWlubWF4KDUwJSwxZnIpKTtncmlkLXRlbXBsYXRlLWFyZWFzOiJ4bWFpbiB4bWFpbiJ9I3Jzbz5kaXY6bm90KC5nKSwjcnNvIC5zcmd7Z3JpZC1jb2x1bW4tc3RhcnQ6MTtncmlkLWNvbHVtbi1lbmQ6eG1haW4tZW5kfS5zcnAgZm9ybXttYXJnaW46MCBhdXRvfS5zcnAgZm9ybSBkaXZbanNjb250cm9sbGVyXXttYXJnaW4tbGVmdDp1bnNldDttYXJnaW46MCBhdXRvfWctc2VjdGlvbi13aXRoLWhlYWRlcnt0ZXh0LWFsaWduOmNlbnRlcn0="},{"meta":{"name":"bingCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/bingCommonStyle.css?t=24.12","ts":1607932532022,"mimetype":"text/css"},"source":"Ym9keXtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjV9I2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3Qpe3dpZHRoOjY3MHB4O3BhZGRpbmc6MTJweCAyMHB4IWltcG9ydGFudDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToyNXB4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7b3ZlcmZsb3c6aGlkZGVufSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhLCNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhe3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiMzNDc2ZDJ9I2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGEsI2JfcmVzdWx0cyBoMiBzdHJvbmd7Zm9udC13ZWlnaHQ6NzAwO2ZvbnQtc2l6ZTptZWRpdW19I2JfY29udGVudCAjYl9yZXN1bHRzPmxpOmhvdmVye2JvcmRlcjoxcHggc29saWQgcmdiYSgwLDAsMCwuMyk7YmFja2dyb3VuZDojZmNmY2ZjIWltcG9ydGFudDtib3gtc2hhZG93OjAgMCAxcHggZ3JleTstd2Via2l0LWJveC1zaGFkb3c6MCAwIDFweCBncmV5Oy1tb3otYm94LXNoYWRvdzowIDAgMXB4IGdyYXl9I2JfY29udGVudD4jYl9yZXN1bHRzIGxpOm5vdCgjbWZhX3Jvb3QpIGgye2JhY2tncm91bmQtY29sb3I6I2Y4ZjhmODttYXJnaW46LTEycHggLTIwcHggMTBweDtwYWRkaW5nOjhweCAyMHB4IDVweDtib3JkZXItcmFkaXVzOjVweCA1cHggMCAwfWEsYSBzdHJvbmd7dGV4dC1kZWNvcmF0aW9uOm5vbmV9I2JfY29udGVudCAjYl9yZXN1bHRzIGEgc3Ryb25nLCNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhIHN0cm9uZ3t0ZXh0LWRlY29yYXRpb246bm9uZX0uYl9hbGdvOmZpcnN0LWNoaWxkOmhvdmVyIGgyIGF7dGV4dC1kZWNvcmF0aW9uOm5vbmUhaW1wb3J0YW50fSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhOmhvdmVyOmFmdGVyLCNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOmhvdmVyOmFmdGVye2xlZnQ6MDt3aWR0aDoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtc30jYl9jb250ZW50ICNiX3Jlc3VsdHMgYTpob3ZlciwjYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYTpob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZX0jYl9jb250ZW50ICNiX3Jlc3VsdHMgYTphZnRlciwjYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYTphZnRlcntjb250ZW50OiIiO3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMzNDc2ZDI7Ym90dG9tOi0ycHg7bGVmdDoxMDAlO3dpZHRoOjA7LXdlYmtpdC10cmFuc2l0aW9uOndpZHRoIDM1MG1zLGxlZnQgMzUwbXM7LW1vei10cmFuc2l0aW9uOndpZHRoIDM1MG1zLGxlZnQgMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtcyxsZWZ0IDM1MG1zfSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQsI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6dmlzaXRlZCBzdHJvbmcsI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGgyIGE6dmlzaXRlZCwjYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgaDIgYTp2aXNpdGVkIHN0cm9uZ3tjb2xvcjojNjA5fSNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXIsI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlcntsZWZ0OjA7d2lkdGg6MTAwJTstd2Via2l0LXRyYW5zaXRpb246d2lkdGggMzUwbXM7LW1vei10cmFuc2l0aW9uOndpZHRoIDM1MG1zO3RyYW5zaXRpb246d2lkdGggMzUwbXN9I2JfY29udGVudD5vbCNiX2NvbnRleHR7ZGlzcGxheTpub25lfWJvZHkgI2JfaGVhZGVye2JhY2tncm91bmQtY29sb3I6I2Y1ZjVmNX0jYl9jb250ZW50IC5iX3VuZGVyU2VhcmNoYm94e21hcmdpbi10b3A6MTBweH0jYl9oZWFkZXIgLmJfc2NvcGViYXJ7bWFyZ2luOnVuc2V0fS50c2YtcD4ubG9nb2NvbnQsI3Nlai1jb250YWluZXJ7bWFyZ2luLXJpZ2h0OjM1MHB4O3RleHQtYWxpZ246Y2VudGVyfS50c2YtcD4uc2ZpYmJiY3ttYXJnaW4tcmlnaHQ6MzUwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmJfc2VhcmNoYm94Rm9ybSAuc2FfdG17dGV4dC1hbGlnbjpsZWZ0fWJvZHkgI2JfaGVhZGVyICNlc3Rfc3dpdGNoe21hcmdpbjowIGF1dG87cGFkZGluZy1yaWdodDoxMCV9Ym9keSAjZXN0X2NuOjphZnRlcixib2R5ICNlc3RfZW46OmFmdGVye3RyYW5zZm9ybTpzY2FsZSgxLjEsMS4zKSBwZXJzcGVjdGl2ZSguNWVtKSByb3RhdGVYKDBkZWcpOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMSwxLjMpIHBlcnNwZWN0aXZlKC41ZW0pIHJvdGF0ZVgoMGRlZyl9QG1lZGlhKG1heC13aWR0aDoxMTAwcHgpe2JvZHkgI2JfaGVhZGVyICNlc3Rfc3dpdGNoe3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEuMnJlbSl9fSNiX2NvbnRlbnR7YW5pbWF0aW9uLW5hbWU6YW5pX2JvdHRvbVRvdG9wO2FuaW1hdGlvbi1kdXJhdGlvbjouNnM7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlfWJvZHkgI2JfaGVhZGVye2FuaW1hdGlvbi1uYW1lOmFuaV90b3BUb2J1dHRvbTthbmltYXRpb24tZHVyYXRpb246LjZzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9Ym9keXthbmltYXRpb24tbmFtZTphbmlfaGlkZVRvU2hvdzthbmltYXRpb24tZHVyYXRpb246LjZzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9LkFDLnNwLXNlcGFyYXRvcnttYXJnaW4tdG9wOi0xNXB4fUBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMnB4KTtvcGFjaXR5OjB9MjAle29wYWNpdHk6MH0zMCV7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3B7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBhbmlfdG9wVG9idXR0b217MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBhbmlfaGlkZVRvU2hvd3swJXtkaXNwbGF5Om5vbmU7b3BhY2l0eTowfTIwJXtkaXNwbGF5Om5vbmU7b3BhY2l0eTowfTMwJXtkaXNwbGF5Om5vbmU7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19"},{"meta":{"name":"bingOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/bingOnePageStyle.css?t=24.12","ts":1607932532022,"mimetype":"text/css"},"source":"I2JfY29udGVudCBhc2lkZXtkaXNwbGF5Om5vbmV9I2JfY29udGVudCAjYl9yZXN1bHRze3dpZHRoOjczdnc7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7bWF4LXdpZHRoOjEwMDBweH1ib2R5ICNiX2hlYWRlcnt3aWR0aDo3MnZ3O3RleHQtYWxpZ246Y2VudGVyO21hcmdpbjowIGF1dG99Ym9keSAjYl9jb250ZW50e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbi1sZWZ0OnVuc2V0O3BhZGRpbmctbGVmdDp1bnNldH0jYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCl7d2lkdGg6OTglfQ=="},{"meta":{"name":"bingTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/bingTwoPageStyle.css?t=24.12","ts":1607932532023,"mimetype":"text/css"},"source":"I2NvbnRhaW5lciAjY29udGVudF9sZWZ0IC5oaXRfdG9wX25ldywjYl9jb250ZW50IGFzaWRlLCNiX3Jlc3VsdHMgI21mYV9yb290e2Rpc3BsYXk6bm9uZX0jYl9jb250ZW50ICNiX3Jlc3VsdHN7d2lkdGg6NzN2dztncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KGF1dG8tZml0LG1pbm1heCg1MCUsMWZyKSk7Z3JpZC10ZW1wbGF0ZS1hcmVhczoieG1haW4geG1haW4iO2Rpc3BsYXk6aW5saW5lLWdyaWR9I2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3Qpe3dpZHRoOjk4JTttYXJnaW4tbGVmdDoxJX0jYl9yZXN1bHRzIC5iX2FsZ28gLmJfZGVlcCB1bHt3aWR0aDo1MCV9I2JfbXNnLCNiX3BhZ3tncmlkLWNvbHVtbi1lbmQ6eG1haW4tZW5kO2dyaWQtY29sdW1uLXN0YXJ0OjE7YmFja2dyb3VuZC1jb2xvcjojZmZmfWJvZHkgI2JfY29udGVudHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW4tbGVmdDp1bnNldDtwYWRkaW5nLWxlZnQ6dW5zZXR9Ym9keSAjYl9oZWFkZXJ7d2lkdGg6NzJ2dzt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW46MCBhdXRvfQ=="},{"meta":{"name":"duckCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/duckCommonStyle.css?t=24.12","ts":1607932532036,"mimetype":"text/css"},"source":"Ym9keXtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjV9LnJlc3VsdF9faWNvbiAucmVzdWx0X19pY29uX19pbWcsLnJlc3VsdF9faWNvbiAucmVzdWx0X19pY29uIGltZ3tkaXNwbGF5Om5vbmV9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7Zm9udC13ZWlnaHQ6NjAwfSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWlue21heC13aWR0aDo2NzBweH0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcHt3aWR0aDo2NzBweDtvdmVyZmxvdzpoaWRkZW47bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MjVweDtib3JkZXItcmFkaXVzOjVweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlcjoxcHggc29saWQgcmdiYSgwLDAsMCwuMSk7dHJhbnNpdGlvbjphbGwgLjI1cyBjdWJpYy1iZXppZXIoLjIzLDEsLjMyLDEpIDBzfSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX3RpdGxlIGF7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7bWF4LXdpZHRoOjY0MHB4O2NvbG9yOiMzNDc2ZDI7Zm9udC1zaXplOnNtYWxsZXJ9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fYm9keXtwYWRkaW5nOjEycHggMjBweCFpbXBvcnRhbnR9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXA6aG92ZXJ7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4zKTtib3gtc2hhZG93OjAgMCAxcHggZ3JleTstd2Via2l0LWJveC1zaGFkb3c6MCAwIDFweCBncmV5Oy1tb3otYm94LXNoYWRvdzowIDAgMXB4IGdyYXl9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7YmFja2dyb3VuZC1jb2xvcjojZjhmOGY4O21hcmdpbjotMTJweCAtMjBweCAwO3BhZGRpbmc6OHB4IDIwcHggNXB4O2JvcmRlci1yYWRpdXM6NXB4IDVweCAwIDB9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTpob3ZlcjphZnRlcntsZWZ0OjA7d2lkdGg6MTAwJTstd2Via2l0LXRyYW5zaXRpb246d2lkdGggMzUwbXM7LW1vei10cmFuc2l0aW9uOndpZHRoIDM1MG1zO3RyYW5zaXRpb246d2lkdGggMzUwbXN9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTphZnRlcntjb250ZW50OiIiO3Bvc2l0aW9uOmFic29sdXRlO2JvcmRlci1ib3R0b206MnB4IHNvbGlkICMzNDc2ZDI7Ym90dG9tOjFweDtsZWZ0OjEwMCU7d2lkdGg6MDstd2Via2l0LXRyYW5zaXRpb246d2lkdGggMzUwbXMsbGVmdCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXMsbGVmdCAzNTBtczt0cmFuc2l0aW9uOndpZHRoIDM1MG1zLGxlZnQgMzUwbXN9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkLCNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCBzdHJvbmd7Y29sb3I6IzYwOX0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXIsI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVye2xlZnQ6MDt3aWR0aDoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtc30jbGlua3Nfd3JhcHBlciAjbGlua3N7YW5pbWF0aW9uLW5hbWU6YW5pX2JvdHRvbVRvdG9wO2FuaW1hdGlvbi1kdXJhdGlvbjouM3M7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlfSNoZWFkZXJfd3JhcHBlciAuaGVhZGVyX19zZWFyY2gtd3JhcHthbmltYXRpb24tbmFtZTphbmlfbGVmdFRvcmlnaHQ7YW5pbWF0aW9uLWR1cmF0aW9uOi4zczthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fUBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMnB4KTtvcGFjaXR5OjB9MjAle29wYWNpdHk6MH0zMCV7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3B7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fQ=="},{"meta":{"name":"duckOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/duckOnePageStyle.css?t=24.12","ts":1607932532035,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXQ7bWFyZ2luLWxlZnQ6LTE1MHB4fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXR9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7bWluLXdpZHRoOnVuc2V0O21hcmdpbjp1bnNldH0uYm9keS0tc2VycCAuZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctbGVmdDp1bnNldH0="},{"meta":{"name":"duckTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/duckTwoPageStyle.css?t=24.12","ts":1607932532038,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFyLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXQ7bWFyZ2luLWxlZnQ6LTE1MHB4fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXQ7bWF4LXdpZHRoOnVuc2V0fSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFye21pbi13aWR0aDp1bnNldDttYXJnaW46dW5zZXR9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtze3dpZHRoOjgwdnc7ZGlzcGxheTppbmxpbmUtZ3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6NTAlIDUwJTtncmlkLXRlbXBsYXRlLWFyZWFzOiJ4bWFpbiB4bWFpbiJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXB7d2lkdGg6dW5zZXQ7bWFyZ2luLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLW1vcmUsI2xpbmtzIC5yZXN1bHQtLXNlcHtncmlkLWNvbHVtbi1zdGFydDoxO2dyaWQtY29sdW1uLWVuZDp4bWFpbi1lbmQ7d2lkdGg6dW5zZXQhaW1wb3J0YW50O3BhZGRpbmc6MDtwYWRkaW5nLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLXNlcHttYXJnaW4tYm90dG9tOjJlbX0uYm9keS0tc2VycCAuZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctbGVmdDp1bnNldH0="},{"meta":{"name":"dogeCommonStyle.css","url":"http://ibaidu.ntaow.com/newcss/dogeCommonStyle.css?t=24.12","ts":1607932532052,"mimetype":"text/css"},"source":"Ym9keXtiYWNrZ3JvdW5kLWNvbG9yOiNmNWY1ZjV9LnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X19pY29ue2Rpc3BsYXk6bm9uZX0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMntmb250LXdlaWdodDo2MDB9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57bWF4LXdpZHRoOjY3MHB4fSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwe3dpZHRoOjY3MHB4O292ZXJmbG93OmhpZGRlbjttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToyNXB4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHN9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdGl0bGUgYXtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczttYXgtd2lkdGg6NjQwcHg7Y29sb3I6IzM0NzZkMjtmb250LXNpemU6c21hbGxlcn0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X19ib2R5e3BhZGRpbmc6MTJweCAyMHB4IWltcG9ydGFudH0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3Zlcntib3JkZXI6MXB4IHNvbGlkIHJnYmEoMCwwLDAsLjMpO2JveC1zaGFkb3c6MCAwIDFweCBncmV5Oy13ZWJraXQtYm94LXNoYWRvdzowIDAgMXB4IGdyZXk7LW1vei1ib3gtc2hhZG93OjAgMCAxcHggZ3JheX0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMntiYWNrZ3JvdW5kLWNvbG9yOiNmOGY4Zjg7bWFyZ2luOi0xMnB4IC0yMHB4IDA7cGFkZGluZzo4cHggMjBweCA1cHg7Ym9yZGVyLXJhZGl1czo1cHggNXB4IDAgMH0jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmhvdmVyOmFmdGVye2xlZnQ6MDt3aWR0aDoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtczstbW96LXRyYW5zaXRpb246d2lkdGggMzUwbXM7dHJhbnNpdGlvbjp3aWR0aCAzNTBtc30jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmFmdGVye2NvbnRlbnQ6IiI7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLWJvdHRvbToycHggc29saWQgIzM0NzZkMjtib3R0b206MXB4O2xlZnQ6MTAwJTt3aWR0aDowOy13ZWJraXQtdHJhbnNpdGlvbjp3aWR0aCAzNTBtcyxsZWZ0IDM1MG1zOy1tb3otdHJhbnNpdGlvbjp3aWR0aCAzNTBtcyxsZWZ0IDM1MG1zO3RyYW5zaXRpb246d2lkdGggMzUwbXMsbGVmdCAzNTBtc30jbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQsI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkIHN0cm9uZ3tjb2xvcjojNjA5fSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciwjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXJ7bGVmdDowO3dpZHRoOjEwMCU7LXdlYmtpdC10cmFuc2l0aW9uOndpZHRoIDM1MG1zOy1tb3otdHJhbnNpdGlvbjp3aWR0aCAzNTBtczt0cmFuc2l0aW9uOndpZHRoIDM1MG1zfSNsaW5rc193cmFwcGVyICNsaW5rc3thbmltYXRpb24tbmFtZTphbmlfYm90dG9tVG90b3A7YW5pbWF0aW9uLWR1cmF0aW9uOi4zczthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9I2hlYWRlcl93cmFwcGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwe2FuaW1hdGlvbi1uYW1lOmFuaV9sZWZ0VG9yaWdodDthbmltYXRpb24tZHVyYXRpb246LjNzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9LkFDLnNwLXNlcGFyYXRvcnttYXJnaW4tdG9wOi0xNXB4fUBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0ezAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMnB4KTtvcGFjaXR5OjB9MjAle29wYWNpdHk6MH0zMCV7b3BhY2l0eTouOH0xMDAle29wYWNpdHk6MX19QGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3B7MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzJweCk7b3BhY2l0eTowfTIwJXtvcGFjaXR5OjB9MzAle29wYWNpdHk6Ljh9MTAwJXtvcGFjaXR5OjF9fQ=="},{"meta":{"name":"dogeOnePageStyle.css","url":"http://ibaidu.ntaow.com/newcss/dogeOnePageStyle.css?t=24.12","ts":1607932532050,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXR9QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDoxMDAwcHgpeyNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwe3dpZHRoOjEwMCV9fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZy1sZWZ0OjB9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXQ7bWF4LXdpZHRoOjg2MHB4fSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFye21pbi13aWR0aDp1bnNldDttYXJnaW46dW5zZXR9LmJvZHktLXNlcnAgLmZvb3RlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtwYWRkaW5nLWxlZnQ6dW5zZXR9"},{"meta":{"name":"dogeTwoPageStyle.css","url":"http://ibaidu.ntaow.com/newcss/dogeTwoPageStyle.css?t=24.12","ts":1607932532056,"mimetype":"text/css"},"source":"LmpzLXNpZGViYXItYWRzLCNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFyLCNvcmdhbmljLW1vZHVsZSwucGlubmVkLXRvLWJvdHRvbXtkaXNwbGF5Om5vbmV9LmpzLXJlc3VsdC1oaWRkZW4tZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0uc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jd3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2Rpc3BsYXk6ZmxleDttYXgtd2lkdGg6dW5zZXQ7bWFyZ2luLWxlZnQ6LTE1MHB4fSNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLCN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdle2p1c3RpZnktY29udGVudDpjZW50ZXI7ZGlzcGxheTpncmlkfSNoZWFkZXJfd3JhcHBlciAjaGVhZGVye21heC13aWR0aDp1bnNldH0jaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcHt3aWR0aDo1MDBweH0jbGlua3Nfd3JhcHBlcntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57ZmxvYXQ6dW5zZXQ7bWF4LXdpZHRoOnVuc2V0fSNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1zaWRlYmFye21pbi13aWR0aDp1bnNldDttYXJnaW46dW5zZXR9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtze3dpZHRoOjgwdnc7ZGlzcGxheTppbmxpbmUtZ3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6NTAlIDUwJTtncmlkLXRlbXBsYXRlLWFyZWFzOiJ4bWFpbiB4bWFpbiJ9I2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXB7d2lkdGg6dW5zZXQ7bWFyZ2luLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLW1vcmUsI2xpbmtzIC5yZXN1bHQtLXNlcHtncmlkLWNvbHVtbi1zdGFydDoxO2dyaWQtY29sdW1uLWVuZDp4bWFpbi1lbmQ7d2lkdGg6dW5zZXQhaW1wb3J0YW50O3BhZGRpbmc6MDtwYWRkaW5nLXJpZ2h0OjE1cHh9I2xpbmtzIC5yZXN1bHQtLXNlcHttYXJnaW4tYm90dG9tOjJlbX0uYm9keS0tc2VycCAuZm9vdGVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmctbGVmdDp1bnNldH0="},{"meta":{"name":"HuYanStyle.css","url":"http://ibaidu.ntaow.com/newcss/HuYanStyle.css?t=24.12","ts":1607932532057,"mimetype":"text/css"},"source":"Ym9keVtiYWlkdV0sI3dyYXBwZXIgI2hlYWQsI3dyYXBwZXIgI3NfdGFiLGZvcm0uZm0gLnNfaXB0X3dyLmJne2JhY2tncm91bmQtY29sb3I6I2ZmZn0jd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AsI3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LCN3cmFwcGVyICNjb250ZW50X2xlZnQgYXJ0aWNsZSwjd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciwjd3JhcHBlciAjcnMsI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7YmFja2dyb3VuZC1jb2xvcjojYWFhO2JvcmRlcjoxcHggZG91YmxlICNhMmQ3ZDQ7Ym9yZGVyLXJhZGl1czowfSN3cmFwcGVyICNjb250ZW50X2xlZnQgLnJlc3VsdC1vcDpob3Zlciwjd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQ6aG92ZXIsI3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LW9wOmhvdmVyIGFydGljbGV7YmFja2dyb3VuZC1jb2xvcjojY2NjIWltcG9ydGFudH0jd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQgaDMsI3dyYXBwZXIgI2NvbnRlbnRfbGVmdCAucmVzdWx0LW9wIGgzLCN3cmFwcGVyICNjb250ZW50X2xlZnQgLmMtY29udGFpbmVyIGgzLCN3cmFwcGVyICNycyAudHR7YmFja2dyb3VuZC1jb2xvcjojYmJifS5uYV9jbnQgLm53c19pdG0sLm53c19pdG1iLCNiX2NvbnRlbnQgI2JfcmVzdWx0cz5saTpub3QoI21mYV9yb290KSxib2R5ICNiX2hlYWRlcntiYWNrZ3JvdW5kLWNvbG9yOiNhYWE7Ym9yZGVyOjFweCBkb3VibGUgI2EyZDdkNDtib3JkZXItcmFkaXVzOjB9I2JfY29udGVudCAjYl9yZXN1bHRzIGxpOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2NjYyFpbXBvcnRhbnR9I2JfY29udGVudCAjYl9yZXN1bHRzIGxpIGgye2JhY2tncm91bmQtY29sb3I6I2JiYn1ib2R5W2dvb2dsZV17YmFja2dyb3VuZC1jb2xvcjojZmRmZGZkfSNyc28gLmcsLmJrV01nZD4uZywuYmtXTWdkIGctaW5uZXItY2FyZCwjcmhzY29sICNyaHMsI3Joc2NvbCAjcmhzIC5nPmRpdiwuYzJ4elRiIC5nLC5ydVRjSWQgLmcsLmZtMDZJZiAuZywuY1VuUUtlIC5nLC5IYW5RbWYgLmcsI3JzbyAuZywjcnNvPmRpdjpub3QoLmcpPip7YmFja2dyb3VuZC1jb2xvcjojYWFhO2JvcmRlcjoxcHggc29saWQgIzljZDJjZmFhO2JvcmRlci1yYWRpdXM6MH0jcnNvIC5nOmhvdmVyLC5ia1dNZ2Q+Lmc6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojY2NjIWltcG9ydGFudDtib3JkZXI6MXB4IGRvdWJsZSAjOWNkMmNmfS5ia1dNZ2QgLmcgZGl2LnIsI3JzbyAuZyBoM3tiYWNrZ3JvdW5kLWNvbG9yOiNiYmJ9Ym9keVtzb2dvdV0sI3BhZ2ViYXJfY29udGFpbmVyIGF7YmFja2dyb3VuZC1jb2xvcjojZmRmZGZkfSNtYWluIC5yZXN1bHRzPmRpdntiYWNrZ3JvdW5kLWNvbG9yOiNhYWE7Ym9yZGVyOjFweCBzb2xpZCAjOWNkMmNmYWE7Ym9yZGVyLXJhZGl1czowfSNtYWluIC5yZXN1bHRzPmRpdjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNjY2MhaW1wb3J0YW50O2JvcmRlcjoxcHggZG91YmxlICM5Y2QyY2Z9I21haW4gLnJlc3VsdHM+ZGl2IGgze2JhY2tncm91bmQtY29sb3I6I2JiYn1ib2R5W2R1Y2tdLGJvZHlbZG9nZV17YmFja2dyb3VuZC1jb2xvcjojZmRmZGZkfSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwe2JhY2tncm91bmQtY29sb3I6I2FhYTtib3JkZXI6MXB4IHNvbGlkICM5Y2QyY2ZhYTtib3JkZXItcmFkaXVzOjB9I2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXA6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojY2NjIWltcG9ydGFudDtib3JkZXI6MXB4IGRvdWJsZSAjOWNkMmNmfSNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgye2JhY2tncm91bmQtY29sb3I6I2JiYn0="},{"meta":{"name":"SiteConfigRules.conf","url":"http://ibaidu.ntaow.com/newcss/SiteConfigRules.conf?t=24.12","ts":1607932532061,"mimetype":"text/plain"},"source":"b25saW5lREIgPSB7DQogICBiYWlkdTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDEsDQogICAgICAgTWFpblR5cGU6ICIjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciIsDQogICAgICAgU3R5cGVfTm9ybWFsOiAiaDMudD5hLCAuYy1jb250YWluZXIgYXJ0aWNsZSBhIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5jLXNob3d1cmwiLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNjb250ZW50X2xlZnQ+I2RvdWJsZT5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dLCNjb250ZW50X2xlZnQ+ZGl2W3NyY2lkXSAqW2NsYXNzfj10XSxbY2xhc3N+PW9wX2Jlc3RfYW5zd2VyX3F1ZXN0aW9uXSIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogJy8vZGl2W0BpZD0icGFnZSJdLy9hW2NvbnRhaW5zKHRleHQoKSwiw6TCuMKLw6TCuMKAw6nCocK1IildW0BocmVmXScsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiY3NzO2RpdiNjb250ZW50X2xlZnQgPiAqIiwNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7ZGl2I2NvbnRlbnRfbGVmdCIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJjc3M7I3BhZ2UiLA0KICAgICAgICAgICBzdHlsaXNoOiAiLmF1dG9wYWdlcml6ZV9wYWdlX2luZm8sIGRpdi5zcC1zZXBhcmF0b3Ige21hcmdpbi1ib3R0b206IDEwcHggIWltcG9ydGFudDt9IiwNCiAgICAgICB9DQogICB9LA0KICAgc29nb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAyLA0KICAgICAgIE1haW5UeXBlOiAiI21haW4gLnJlc3VsdHM+ZGl2IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy5wdD5hLCBoMy52clRpdGxlPmEiLA0KICAgICAgIEZhdmljb25UeXBlOiAiY2l0ZVtpZCo9J2NhY2hlcmVzdWx0X2luZm9fJ10iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIi5yZXN1bHRzPmRpdiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vZGl2W0BpZD1cInBhZ2ViYXJfY29udGFpbmVyXCJdLy9hW0BpZD1cInNvZ291X25leHRcIl0iLA0KICAgICAgICAgICBwYWdlRWxlbWVudDogIi8vZGl2W0BjbGFzcz0ncmVzdWx0cyddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAY2xhc3M9J3Jlc3VsdHMnXSIsIDJdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKCdwYWdlYmFyX2NvbnRhaW5lcicpIg0KICAgICAgIH0NCiAgIH0sDQogICBoYW9zb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAzLA0KICAgICAgIE1haW5UeXBlOiAiLnJlcy1saXN0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICIucmVzLWxpc3QgaDM+YSIsDQogICAgICAgRmF2aWNvblR5cGU6ICJjaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIucmVzdWx0cz5kaXYiLA0KICAgICAgIEJsb2NrVHlwZTogImgzIGEiLA0KICAgICAgIHBhZ2VyOnsNCiAgICAgICAgICAgbmV4dExpbms6ICIvL2RpdltAaWQ9J3BhZ2UnXS8vYVt0ZXh0KCk9J8OkwrjCi8OkwrjCgMOpwqHCtT4nXSB8IGlkKCdzbmV4dCcpIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICIvL2RpdltAaWQ9J2NvbnRhaW5lciddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAaWQ9J2NvbnRhaW5lciddIiwgMl0sDQogICAgICAgICAgIHJlcGxhY2VFOiAiaWQoJ3BhZ2UnKSINCiAgICAgICB9DQogICB9LA0KICAgZ29vZ2xlOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNCwNCiAgICAgICBNYWluVHlwZTogIiNyc28gLmciLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmlVaDMwIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIjcnNvIC5nIGgzLC5feUU+ZGl2W2NsYXNzfj1fa2tdIGgzIiwNCiAgICAgICBCbG9ja1R5cGU6ICIucmM+ZGl2PmEiLA0KICAgICAgIHBhZ2VyOnsNCiAgICAgICAgICAgbmV4dExpbms6ICdpZCgicG5uZXh0IikgfCBpZCgibmF2YmFyIG5hdmNudCBuYXYiKS8vdGRbc3Bhbl0vZm9sbG93aW5nLXNpYmxpbmc6OnRkWzFdL2EgfCBpZCgibm4iKS9wYXJlbnQ6OmEnLA0KICAgICAgICAgICBwYWdlRWxlbWVudDogJy8vZGl2W0BpZD0icmVzIl0nLA0KICAgICAgICAgICBIVF9pbnNlcnQ6IFsgImNzczsjcmVzIiwgMiBdLA0KICAgICAgICAgICByZXBsYWNlRTogJy8vZGl2W0BpZD0ibmF2Y250Il0gfCAvL2RpdltAaWQ9ImZvb3QiXVtAcm9sZT0ibmF2aWdhdGlvbiJdJw0KICAgICAgIH0NCiAgIH0sDQogICBiaW5nOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNSwNCiAgICAgICBNYWluVHlwZTogIiNiX3Jlc3VsdHM+bGkiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmJfYXR0cmlidXRpb24+Y2l0ZSIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDIiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbnNdPmgyLCNiX3Jlc3VsdHM+bGlbY2xhc3N+PWJfYWxnb10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDIgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vYVtjb250YWlucyhAY2xhc3MsXCJzYl9wYWdOXCIpXSIsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiaWQoXCJiX3Jlc3VsdHNcIikvbGlbbm90KGNvbnRhaW5zKEBjbGFzcyxcImJfcGFnXCIpIG9yIGNvbnRhaW5zKEBjbGFzcyxcImJfYW5zIGJfdG9wXCIpKV0iLA0KICAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoXCJiX3Jlc3VsdHNcIikvbGlbQGNsYXNzPVwiYl9wYWdcIl0iLCAxXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJpZChcImJfcmVzdWx0c1wiKS8vbmF2W0Byb2xlPVwibmF2aWdhdGlvblwiXSIsDQogICAgICAgfQ0KICAgfSwNCiAgIGR1Y2s6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAxMCwNCiAgICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdXJsX19kb21haW4iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgyIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcyxcInNiX3BhZ05cIildIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZChcImJfcmVzdWx0c1wiKS9saVtub3QoY29udGFpbnMoQGNsYXNzLFwiYl9wYWdcIikgb3IgY29udGFpbnMoQGNsYXNzLFwiYl9hbnMgYl90b3BcIikpXSIsDQogICAgICAgICAgIEhUX2luc2VydDogWyJpZChcImJfcmVzdWx0c1wiKS9saVtAY2xhc3M9XCJiX3BhZ1wiXSIsIDFdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKFwiYl9yZXN1bHRzXCIpLy9uYXZbQHJvbGU9XCJuYXZpZ2F0aW9uXCJdIiwNCiAgICAgICB9DQogICB9LA0KICAgZG9nZTogew0KICAgICAgU2l0ZVR5cGVJRDogMTEsDQogICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X191cmxfX2RvbWFpbiIsDQogICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgIEJsb2NrVHlwZTogImgyIGEiLA0KICAgICAgcGFnZXI6ew0KICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcywgJ3Jlc3VsdC0tbW9yZScpXSIsDQogICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0c19saW5rc19kZWVwJyldIiwNCiAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoJ2xpbmtzX3dyYXBwZXInKS8vZGl2W0BpZD0nbGlua3MnXS9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldIiwgMV0sDQogICAgICAgICAgcmVwbGFjZUU6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldL2FbY29udGFpbnModGV4dCgpLCAnw6TCuMKLw6TCuMKAw6nCocK1JyldW0BocmVmXSIsDQogICAgICB9DQogICB9LA0KICAgbUJhaWR1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA2LA0KICAgICAgIE1haW5UeXBlOiAiI2JfcmVzdWx0cz5saSIsDQogICAgICAgRmF2aWNvblR5cGU6ICIuYl9hdHRyaWJ1dGlvbj5jaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICAgQ291bnRlclR5cGU6ICIjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2Fuc10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiwjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2FsZ29dPmgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgIH0sDQogICB6aGlodTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDcsDQogICB9LA0KICAgYmFpZHVfeHVlc2h1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA4LA0KICAgICAgIE1haW5UeXBlOiAiI2NvbnRlbnRfbGVmdCAucmVzdWx0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy50PmEsICNyZXN1bHRzIC5jLWNvbnRhaW5lcj4uYy1ibG9ja2EiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdC1vcCwgLmMtc2hvd3VybCIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDMiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2NvbnRlbnRfbGVmdD4jZG91YmxlPmRpdltzcmNpZF0gKltjbGFzc349dF0sW2NsYXNzfj1vcF9iZXN0X2Fuc3dlcl9xdWVzdGlvbl0sI2NvbnRlbnRfbGVmdD5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMyBhIiwNCiAgIH0sDQogICBvdGhlcjogew0KICAgICAgIFNpdGVUeXBlSUQ6IDksDQogICB9DQp9DQo="}],"requires":[{"meta":{"name":"vue.js","url":"https://cdn.staticfile.org/vue/2.6.11/vue.js","ts":1607929008900,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"vue.js","url":"https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js","ts":1607929008928,"mimetype":"text/javascript"},"source":""}]},{"name":"购物党比价工具【精简优化版】","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["chenzelin.herokuapp.com","gm.ntaow.com","gwdang.com","alicdn.com"],"orig_excludes":[],"orig_includes":["http*://item.taobao.com/*","http*://s.taobao.com/*","http*://detail.tmall.com/item.htm*","http*://detail.liangxinyao.com/item.htm*","http*://chaoshi.detail.tmall.com/item.htm*","http*://item.jd.com/*","https://item.jd.hk/*","https://detail.tmall.hk/*","https://*.suning.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1603963275161,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/397204-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E7%B2%BE%E7%AE%80%E4%BC%98%E5%8C%96%E7%89%88/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7%E3%80%90%E7%B2%BE%E7%AE%80%E4%BC%98%E5%8C%96%E7%89%88%E3%80%91.user.js","uuid":"5b4b7f8b-2197-435b-b7b3-4195995bf0aa","source":"","requires":[{"meta":{"name":"AC-%E7%8B%AC%E5%AE%B6-%E6%B7%98%E5%AE%9D%E5%A4%A9%E7%8C%AB%E4%BC%98%E6%83%A0%E5%88%B8%E6%9F%A5%E8%AF%A2%E9%A2%86%E5%8F%96,%E5%A4%A7%E9%A2%9D%E4%BC%98%E6%83%A0%E5%88%B8,%E3%80%90100%E5%85%83%E8%B4%AD%E7%89%A9%E7%A5%9E%E5%88%B8%E3%80%91,%E7%9C%81%E9%92%B1%E8%B4%AD%E7%89%A9,%E9%A2%86%E5%88%B8%E8%B4%AD%E4%B9%B0%E6%9B%B4%E4%BC%98%E6%83%A0,%E5%B9%B3%E5%9D%87%E4%BC%98%E6%83%A020%25.user.js","url":"https://greasyfork.org/scripts/34606-ac-%E7%8B%AC%E5%AE%B6-%E6%B7%98%E5%AE%9D%E5%A4%A9%E7%8C%AB%E4%BC%98%E6%83%A0%E5%88%B8%E6%9F%A5%E8%AF%A2%E9%A2%86%E5%8F%96-%E5%A4%A7%E9%A2%9D%E4%BC%98%E6%83%A0%E5%88%B8-100%E5%85%83%E8%B4%AD%E7%89%A9%E7%A5%9E%E5%88%B8-%E7%9C%81%E9%92%B1%E8%B4%AD%E7%89%A9-%E9%A2%86%E5%88%B8%E8%B4%AD%E4%B9%B0%E6%9B%B4%E4%BC%98%E6%83%A0-%E5%B9%B3%E5%9D%87%E4%BC%98%E6%83%A020/code/AC-%E7%8B%AC%E5%AE%B6-%E6%B7%98%E5%AE%9D%E5%A4%A9%E7%8C%AB%E4%BC%98%E6%83%A0%E5%88%B8%E6%9F%A5%E8%AF%A2%E9%A2%86%E5%8F%96,%E5%A4%A7%E9%A2%9D%E4%BC%98%E6%83%A0%E5%88%B8,%E3%80%90100%E5%85%83%E8%B4%AD%E7%89%A9%E7%A5%9E%E5%88%B8%E3%80%91,%E7%9C%81%E9%92%B1%E8%B4%AD%E7%89%A9,%E9%A2%86%E5%88%B8%E8%B4%AD%E4%B9%B0%E6%9B%B4%E4%BC%98%E6%83%A0,%E5%B9%B3%E5%9D%87%E4%BC%98%E6%83%A020%25.user.js","ts":1607323072791,"mimetype":"text/javascript"},"source":""}]},{"name":"贴吧全能助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://tieba.baidu.com/f/fdir*","*://tieba.baidu.com/f/search*"],"orig_includes":["*://tieba.baidu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"confVer":"s[1]","definedEvent":"sclick,click,1,0,1","modules":"s{\"rmBottom\":2,\"ads_hide\":1,\"ads_thread_list\":2,\"audio_download\":2,\"block_post\":1,\"hide_loops\":1,\"icon_hide\":2,\"no_text_link\":1,\"orange\":1,\"quote\":1,\"quote_lzl\":1,\"real_url\":1,\"rmImgFav\":1,\"rmSaveFace\":1,\"rm_img_view\":2,\"save_face\":1}","repairDefinedEvent":"bfalse"},"ts":1606985373147},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/26992-%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B/code/%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"02933cba-6635-430a-acbd-6cddf0a09216","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"http://cdn.staticfile.org/jquery/2.1.1/jquery.min.js","ts":1606985022483,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.scrollTo.min.js","url":"http://cdn.staticfile.org/jquery-scrollTo/1.4.11/jquery.scrollTo.min.js","ts":1606985022358,"mimetype":"text/javascript"},"source":"LyoqCiAqIENvcHlyaWdodCAoYykgMjAwNy0yMDE0IEFyaWVsIEZsZXNsZXIgLSBhZmxlc2xlcjxhPmdtYWlsPGQ+Y29tIHwgaHR0cDovL2ZsZXNsZXIuYmxvZ3Nwb3QuY29tCiAqIExpY2Vuc2VkIHVuZGVyIE1JVAogKiBAYXV0aG9yIEFyaWVsIEZsZXNsZXIKICogQHZlcnNpb24gMS40LjExCiAqLwo7KGZ1bmN0aW9uKGEpe2lmKHR5cGVvZiBkZWZpbmU9PT0nZnVuY3Rpb24nJiZkZWZpbmUuYW1kKXtkZWZpbmUoWydqcXVlcnknXSxhKX1lbHNle2EoalF1ZXJ5KX19KGZ1bmN0aW9uKCQpe3ZhciBqPSQuc2Nyb2xsVG89ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAkKHdpbmRvdykuc2Nyb2xsVG8oYSxiLGMpfTtqLmRlZmF1bHRzPXtheGlzOid4eScsZHVyYXRpb246cGFyc2VGbG9hdCgkLmZuLmpxdWVyeSk+PTEuMz8wOjEsbGltaXQ6dHJ1ZX07ai53aW5kb3c9ZnVuY3Rpb24oYSl7cmV0dXJuICQod2luZG93KS5fc2Nyb2xsYWJsZSgpfTskLmZuLl9zY3JvbGxhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxpc1dpbj0hYS5ub2RlTmFtZXx8JC5pbkFycmF5KGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxbJ2lmcmFtZScsJyNkb2N1bWVudCcsJ2h0bWwnLCdib2R5J10pIT0tMTtpZighaXNXaW4pcmV0dXJuIGE7dmFyIGI9KGEuY29udGVudFdpbmRvd3x8YSkuZG9jdW1lbnR8fGEub3duZXJEb2N1bWVudHx8YTtyZXR1cm4vd2Via2l0L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KXx8Yi5jb21wYXRNb2RlPT0nQmFja0NvbXBhdCc/Yi5ib2R5OmIuZG9jdW1lbnRFbGVtZW50fSl9OyQuZm4uc2Nyb2xsVG89ZnVuY3Rpb24oZixnLGgpe2lmKHR5cGVvZiBnPT0nb2JqZWN0Jyl7aD1nO2c9MH1pZih0eXBlb2YgaD09J2Z1bmN0aW9uJyloPXtvbkFmdGVyOmh9O2lmKGY9PSdtYXgnKWY9OWU5O2g9JC5leHRlbmQoe30sai5kZWZhdWx0cyxoKTtnPWd8fGguZHVyYXRpb247aC5xdWV1ZT1oLnF1ZXVlJiZoLmF4aXMubGVuZ3RoPjE7aWYoaC5xdWV1ZSlnLz0yO2gub2Zmc2V0PWJvdGgoaC5vZmZzZXQpO2gub3Zlcj1ib3RoKGgub3Zlcik7cmV0dXJuIHRoaXMuX3Njcm9sbGFibGUoKS5lYWNoKGZ1bmN0aW9uKCl7aWYoZj09bnVsbClyZXR1cm47dmFyIGQ9dGhpcywkZWxlbT0kKGQpLHRhcmc9Zix0b2ZmLGF0dHI9e30sd2luPSRlbGVtLmlzKCdodG1sLGJvZHknKTtzd2l0Y2godHlwZW9mIHRhcmcpe2Nhc2UnbnVtYmVyJzpjYXNlJ3N0cmluZyc6aWYoL14oWystXT0/KT9cZCsoXC5cZCspPyhweHwlKT8kLy50ZXN0KHRhcmcpKXt0YXJnPWJvdGgodGFyZyk7YnJlYWt9dGFyZz0kKHRhcmcsdGhpcyk7aWYoIXRhcmcubGVuZ3RoKXJldHVybjtjYXNlJ29iamVjdCc6aWYodGFyZy5pc3x8dGFyZy5zdHlsZSl0b2ZmPSh0YXJnPSQodGFyZykpLm9mZnNldCgpfXZhciBlPSQuaXNGdW5jdGlvbihoLm9mZnNldCkmJmgub2Zmc2V0KGQsdGFyZyl8fGgub2Zmc2V0OyQuZWFjaChoLmF4aXMuc3BsaXQoJycpLGZ1bmN0aW9uKGksYSl7dmFyIGI9YT09J3gnPydMZWZ0JzonVG9wJyxwb3M9Yi50b0xvd2VyQ2FzZSgpLGtleT0nc2Nyb2xsJytiLG9sZD1kW2tleV0sbWF4PWoubWF4KGQsYSk7aWYodG9mZil7YXR0cltrZXldPXRvZmZbcG9zXSsod2luPzA6b2xkLSRlbGVtLm9mZnNldCgpW3Bvc10pO2lmKGgubWFyZ2luKXthdHRyW2tleV0tPXBhcnNlSW50KHRhcmcuY3NzKCdtYXJnaW4nK2IpKXx8MDthdHRyW2tleV0tPXBhcnNlSW50KHRhcmcuY3NzKCdib3JkZXInK2IrJ1dpZHRoJykpfHwwfWF0dHJba2V5XSs9ZVtwb3NdfHwwO2lmKGgub3Zlcltwb3NdKWF0dHJba2V5XSs9dGFyZ1thPT0neCc/J3dpZHRoJzonaGVpZ2h0J10oKSpoLm92ZXJbcG9zXX1lbHNle3ZhciBjPXRhcmdbcG9zXTthdHRyW2tleV09Yy5zbGljZSYmYy5zbGljZSgtMSk9PSclJz9wYXJzZUZsb2F0KGMpLzEwMCptYXg6Y31pZihoLmxpbWl0JiYvXlxkKyQvLnRlc3QoYXR0cltrZXldKSlhdHRyW2tleV09YXR0cltrZXldPD0wPzA6TWF0aC5taW4oYXR0cltrZXldLG1heCk7aWYoIWkmJmgucXVldWUpe2lmKG9sZCE9YXR0cltrZXldKWFuaW1hdGUoaC5vbkFmdGVyRmlyc3QpO2RlbGV0ZSBhdHRyW2tleV19fSk7YW5pbWF0ZShoLm9uQWZ0ZXIpO2Z1bmN0aW9uIGFuaW1hdGUoYSl7JGVsZW0uYW5pbWF0ZShhdHRyLGcsaC5lYXNpbmcsYSYmZnVuY3Rpb24oKXthLmNhbGwodGhpcyx0YXJnLGgpfSl9fSkuZW5kKCl9O2oubWF4PWZ1bmN0aW9uKGEsYil7dmFyIGM9Yj09J3gnPydXaWR0aCc6J0hlaWdodCcsc2Nyb2xsPSdzY3JvbGwnK2M7aWYoISQoYSkuaXMoJ2h0bWwsYm9keScpKXJldHVybiBhW3Njcm9sbF0tJChhKVtjLnRvTG93ZXJDYXNlKCldKCk7dmFyIGQ9J2NsaWVudCcrYyxodG1sPWEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYm9keT1hLm93bmVyRG9jdW1lbnQuYm9keTtyZXR1cm4gTWF0aC5tYXgoaHRtbFtzY3JvbGxdLGJvZHlbc2Nyb2xsXSktTWF0aC5taW4oaHRtbFtkXSxib2R5W2RdKX07ZnVuY3Rpb24gYm90aChhKXtyZXR1cm4gJC5pc0Z1bmN0aW9uKGEpfHx0eXBlb2YgYT09J29iamVjdCc/YTp7dG9wOmEsbGVmdDphfX07cmV0dXJuIGp9KSk7Cg=="},{"meta":{"name":"mustache.min.js","url":"http://cdn.staticfile.org/mustache.js/0.8.1/mustache.min.js","ts":1606985022369,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"tieba_ui.js","url":"https://greasyfork.org/scripts/2657/code/tieba_ui.js","ts":1606985023621,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"Interval_Looper.js","url":"https://greasyfork.org/scripts/3588/code/Interval_Looper.js","ts":1606985023622,"mimetype":"text/javascript"},"source":"Ly8gSW50ZXJ2YWwgTG9vcGVyIGJ5IEppeHVuOgovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9KaXh1bk1vZS9jNzdiYjM5MzZhNjg5OTdmY2UyMgoKdmFyIEludGVydmFsTG9vcCA9IGZ1bmN0aW9uIChhcnJEYXRhLCBsb29wZXIsIGRlbGF5KSB7CglpZiAoISh0aGlzIGluc3RhbmNlb2YgSW50ZXJ2YWxMb29wKSkKCQlyZXR1cm4gbmV3IEludGVydmFsTG9vcCAoYXJyRGF0YSwgbG9vcGVyLCBkZWxheSk7CiAKCS8qKgoJICogU3RhdHVzCgkgKiBAdHlwZSBOdW1iZXIKCSAqIDA6IOW+queOr+acquW8gOWniwoJICogMTog5q2j5Zyo5b6q546vCgkgKiAyOiDlvqrnjq/nu5PmnZ8KCSAqLwoJdGhpcy5zdGF0dXMgPSAwOwoJdGhpcy5uZXh0ID0gdGhpcy5fbmV4dC5iaW5kICh0aGlzKTsKCXRoaXMuaW5kZXggPSAwOwogCgl0aGlzLnNldERlbGF5IChkZWxheSB8fCA1MCk7Cgl0aGlzLmRhdGEgPSAoYXJyRGF0YSBpbnN0YW5jZW9mIEFycmF5KSA/IGFyckRhdGEgOiBbXTsKCXRoaXMuc2V0TG9vcGVyIChsb29wZXIpOwp9OwogCkludGVydmFsTG9vcC5wcm90b3R5cGUgPSB7CglfZ2V0RGVsYXk6IGZ1bmN0aW9uICgpIHsKCQlpZiAoIXRoaXMuZGVsYXkpCgkJCXJldHVybiA1MDsKIAoJCWlmICh0aGlzLmRlbGF5LmFwcGx5KQoJCQlyZXR1cm4gdGhpcy5kZWxheSgpOwogCgkJcmV0dXJuIHRoaXMuZGVsYXk7Cgl9LAoJX25leHQ6IGZ1bmN0aW9uICgpIHsKCQkvLyDnirbmgIHmlLnkuLog6L+b6KGM5LitCgkJdGhpcy5zdGF0dXMgPSAxOwoJCWlmICh0aGlzLmluZGV4IDwgdGhpcy5kYXRhLmxlbmd0aCkgewoJCQlzZXRUaW1lb3V0ICh0aGlzLmxvb3Blci5iaW5kKHRoaXMsIHRoaXMuZGF0YVt0aGlzLmluZGV4XSksIHRoaXMuZGVsYXkpOwoJCQl0aGlzLmluZGV4ICsrOwoJCQlpZiAodGhpcy5vblByb2dyZXNzICYmIHRoaXMub25Qcm9ncmVzcy5hcHBseSkgewoJCQkJdHJ5IHsKCQkJCQl0aGlzLm9uUHJvZ3Jlc3MgKHRoaXMuaW5kZXgsIHRoaXMuZGF0YS5sZW5ndGgpOwoJCQkJfSBjYXRjaCAoZSkgewoJCQkJCWNvbnNvbGUuZXJyb3IgKCdFcnJvciB3aGlsZSBjYWxsYmFjayB0byBgb25Qcm9ncmVzc2AnKTsKCQkJCQljb25zb2xlLmVycm9yIChlKTsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7CgkJCXRoaXMuc3RhdHVzID0gMjsKCQkJaWYgKHRoaXMub25Db21wbGV0ZSAmJiB0aGlzLm9uQ29tcGxldGUuYXBwbHkpIHsKCQkJCXRyeSB7CgkJCQkJdGhpcy5vbkNvbXBsZXRlICh0aGlzLmRhdGEubGVuZ3RoKTsKCQkJCX0gY2F0Y2ggKGUpIHsKCQkJCQljb25zb2xlLmVycm9yICgnRXJyb3Igd2hpbGUgY2FsbGJhY2sgdG8gYG9uQ29tcGxldGVgJyk7CgkJCQkJY29uc29sZS5lcnJvciAoZSk7CgkJCQl9CgkJCX0KCQl9Cgl9LAoJY2xlYW51cDogZnVuY3Rpb24gKCkgewoJCWlmICh0aGlzLnN0YXR1cyA9PSAyKSB7CgkJCS8vIOW3sue7j+eUqOi/h+eahOaVsOaNruWwsea4heaOieOAggoJCQl0aGlzLmRhdGEuc3BsaWNlKDAsIHRoaXMuaW5kZXgpOwoJCQl0aGlzLmluZGV4ID0gMDsKCQkJdGhpcy5zdGF0dXMgPSAwOwoJCX0KIAoJCXJldHVybiB0aGlzOwoJfSwKCWFkZDogZnVuY3Rpb24gKCkgewoJCWlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkgewoJCQkvLyDlsIbmiYDmnInlj4LmlbDkvZzkuLrmlbDmja7mjqjlhaUgdGhpcy5kYXRhCgkJCWZvciAodmFyIGkgPSAwOyBpPGFyZ3VtZW50cy5sZW5ndGg7IGkrKykKCQkJCXRoaXMuZGF0YS5wdXNoIChhcmd1bWVudHNbaV0pOwogCgkJCS8vIOaVtOS4que7hOW3sue7j+WujOe7k++8jOa4heeQhuWQjuiHquWKqOe7p+e7rQoJCQlpZiAodGhpcy5zdGF0dXMgPT0gMikKCQkJCXRoaXMuY2xlYW51cCgpLm5leHQoKTsKCQl9CiAKCQkvLyDov57plIEKCQlyZXR1cm4gdGhpczsKCX0sCglzZXREZWxheTogZnVuY3Rpb24gKG5ld0RlbGF5KSB7CgkJaWYgKG5ld0RlbGF5KSB0aGlzLmRlbGF5ID0gcGFyc2VJbnQgKG5ld0RlbGF5KTsKCQlyZXR1cm4gdGhpczsKCX0sCglzZXRMb29wZXI6IGZ1bmN0aW9uIChmb29DYWxsYmFjaykgewoJCWlmIChmb29DYWxsYmFjayAmJiBmb29DYWxsYmFjay5hcHBseSkKCQkJdGhpcy5sb29wZXIgPSBmb29DYWxsYmFjay5iaW5kKHRoaXMsIHRoaXMubmV4dCk7CiAKCQlyZXR1cm4gdGhpczsKCX0sCglsb29wOiBmdW5jdGlvbiAoKSB7CgkJaWYgKHRoaXMuc3RhdHVzID09IDApCgkJCS8vIOWwmuacquWQr+WKqCwg5LuO5aS05byA5aeLCgkJCXRoaXMubmV4dCAoKTsKIAoJCXJldHVybiB0aGlzOwoJfQp9Ow=="},{"meta":{"name":"gm2_port_v103.js","url":"https://greasyfork.org/scripts/2599/code/gm2_port_v103.js","ts":1606985023617,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEdNIDIgcG9ydCAtIEZ1bmN0aW9uIE92ZXJyaWRlIEhlbHBlcgovLyBARGVzY3JpcHRpb24gTm90IHlldC4KLy8gQG5hbWVzcGFjZSAgIG9yZy5qaXh1bi5nbTIucG9ydAovLyBAdmVyc2lvbiAgICAgMS4wLjQKCi8vIHVuc2FmZVdpbmRvdyByZXF1aXJlZCB0byB1c2UgYGV4cG9ydEZ1bmN0aW9uYC4KLy8gQGdyYW50ICAgICAgIHVuc2FmZVdpbmRvdwoKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vID09L1VzZXJTY3JpcHQ9PQoKLy8gQ2hlY2sgaWYgaXMgR00gMi54CmlmICh0eXBlb2YgZXhwb3J0RnVuY3Rpb24gPT0gJ3VuZGVmaW5lZCcpIHsKCS8vIEZvciBHTSAxLnggYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgc2hvdWxkIHdvcmsuCgl2YXIgZXhwb3J0RnVuY3Rpb24gPSAoZnVuY3Rpb24gKGZvbywgc2NvcGUsIGRlZkFzKSB7CgkJaWYgKGRlZkFzICYmIGRlZkFzLmRlZmluZUFzKSB7CgkJCXNjb3BlW2RlZkFzLmRlZmluZUFzXSA9IGZvbzsKCQl9CgkJcmV0dXJuIGZvbzsKCX0pLmJpbmQodW5zYWZlV2luZG93KTsKCgkvLyBXZWxsLi4gSXQncyBub3QgZ29pbmcgdG8gZG8gYW55dGhpbmcuCgl2YXIgY2xvbmVJbnRvID0gKGZ1bmN0aW9uIChvYmosIHNjb3BlLCBvcHQpIHsKCQlyZXR1cm4gb2JqOwoJfSkuYmluZCh1bnNhZmVXaW5kb3cpOwp9CgovKioKICogdW5zYWZlT2JqZWN0OgogKiBCYXNpY2FsbHkgY2xvbmVJbnRvIGJ1dCBjb3VsZCB3aXRob3V0IHNjb3BlIChEZWZhdWx0OiB1bnNhZmVXaW5kb3cpCiAqIAogKiBAcGFyYW0gIHtPYmplY3R9IG9iaiAgIE9iamVjdCB0byBwYXNzIHRocm91Z2gKICogQHBhcmFtICB7T2JqZWN0fSBzY29wZSBTY29wZSB3aGVyZSBvYmplY3QgaXMgZ29pbmcgdG8gYmUgYXBwbGllZC4KICogQHBhcmFtICB7T2JqZWN0fSBvcHQgICBPcHRpb25zCiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgQSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBvYmplY3QuCiAqLwp2YXIgdW5zYWZlT2JqZWN0ID0gZnVuY3Rpb24gKG9iaiwgc2NvcGUsIG9wdCkgewoJcmV0dXJuIGNsb25lSW50byAob2JqLCBzY29wZSB8fCB1bnNhZmVXaW5kb3csIG9wdCB8fCB7fSk7Cn07CgovKioKICogdW5zYWZlRGVmaW5lRnVuY3Rpb24KICogQHBhcmFtICB7U3RyaW5nfSBmb29OYW1lIFRhcmdldCBuYW1lCiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmb28gICBUaGUgZnVuY3Rpb24gdG8gb3ZlcnJpZGUKICogQHBhcmFtICB7T2JqZWN0fSBzY29wZSAgIHVuc2FmZVdpbmRvdwogKiBAcmV0dXJuIHtGdW5jdGlvbn0gICAgICAgVGhlIHBsYWNlaG9sZGVyIGZ1bmN0aW9uIHdoaWNoIGhhcyBiZWVuIGNyZWF0ZWQgaW4gdGhlIHRhcmdldCBjb250ZXh0LgogKi8KdmFyIHVuc2FmZURlZmluZUZ1bmN0aW9uID0gZnVuY3Rpb24gKGZvb05hbWUsIGZvbywgc2NvcGUpIHsKCS8vIEB0aHJvdyBUeXBlRXJyb3I6IGNhbid0IHJlZGVmaW5lIG5vbi1jb25maWd1cmFibGUgcHJvcGVydHkKCS8vIEB0aHJvdyBFcnJvcjogRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uCglyZXR1cm4gZXhwb3J0RnVuY3Rpb24gKGZvbywgc2NvcGUgfHwgdW5zYWZlV2luZG93LCB7ZGVmaW5lQXM6IGZvb05hbWV9KTsKfTsKCi8qKgogKiB1bnNhZmVPdmVyd3JpdGVGdW5jdGlvbgogKiBAcGFyYW0gIHtPYmplY3R9IGZvb01hcHBpbmcge25hbWU6IGZvb30KICogQHBhcmFtICB7T2JqZWN0fSBzY29wZSAgICAgIHVuc2FmZVdpbmRvdwogKiBAcGFyYW0gIHtTdHJpbmd9IHNjb3BlTmFtZSAgT3B0aW9uYWwsIHJlcXVpcmVkIGlmIHRhcmdldCBpcyBub3QgYHdpbmRvd2AuCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmcuIFRoZSB0YXJnZXQgaXMgd2luZG93LmFwaS54eHgsICcuYXBpJyB3b3VsZAogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgdGhlIHNjb3BlTmFtZS4KICogQHJldHVybiB7SFRNTCBFbGVtZW50fSAgICAgIFNjcmlwdCBUYWcKICovCnZhciB1bnNhZmVPdmVyd3JpdGVGdW5jdGlvbiA9IGZ1bmN0aW9uIChmb29NYXBwaW5nLCBzY29wZSwgc2NvcGVOYW1lKSB7Cgl2YXIgYXJnTWFwcGluZyA9IHt9LCB0bXBOYW1lOwoKCS8vIE1hcHBpbmcgbmV3IHJhbmRvbSBuYW1lcy4KCWZvciAodmFyIHggaW4gZm9vTWFwcGluZykgewoJCWlmIChmb29NYXBwaW5nLmhhc093blByb3BlcnR5KHgpKSB7CgkJCXRyeSB7CgkJCQl0bXBOYW1lID0gJ3Vfd19mXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc2xpY2UoMikgKyArbmV3IERhdGUoKTsKCQkJCQoJCQkJLy8gRXhwb3J0IGZ1bmN0aW9uCgkJCQkvLyB1bnNhZmVEZWZpbmVGdW5jdGlvbiB3aWxsIHRha2UgY2FyZSBvZiBudWxsIHZhbHVlcy4KCQkJCXVuc2FmZURlZmluZUZ1bmN0aW9uICh0bXBOYW1lLCBmb29NYXBwaW5nW3hdLCBzY29wZSk7CgkJCQlhcmdNYXBwaW5nW3hdID0gdG1wTmFtZTsKCQkJfSBjYXRjaCAoZSkgewoJCQkJY29uc29sZS5lcnJvciAoJ0Vycm9yIGF0IGB1bnNhZmVPdmVyd3JpdGVgOicsIGUpOwoJCQl9CgkJfQoJfQoKCXZhciB0bXBTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICgnc2NyaXB0Jyk7Cgl0bXBTY3JpcHQudGV4dENvbnRlbnQgPSAnOygnKyAoZnVuY3Rpb24gKGosIHgpIHsKCQlmb3IgKHggaW4gaikKCQkJaWYgKGouaGFzT3duUHJvcGVydHkoeCkpCgkJCQkvLyBNYXAgZXZlcnl0aGluZy4KCQkJCS8vIElmIE9iamVjdCB3aXRoIGN1c3RvbSBmdW5jdGlvbiAvIEZ1bmN0aW9uIAoJCQkJLy8gcGFzc2VkIGluIGl0IHdpbGwgdGhyb3cgQ2xvbmVOb25SZWZsZWN0b3JzV3JpdGUuCgkJCQkvLyBVc2UgdW5zYWZlT3ZlcndyaXRlRnVuY3Rpb25TYWZlUHJveHkgaWYgeW91IG5lZWQgdG8gYnlwYXNzIHRoYXQuCgkJCQkvLyBIb3dldmVyLCBpdCdzIGdvaW5nIHRvIGJlIHNsb3dlci4KCQkJCXdpbmRvdy8qKi9beF0gPSB3aW5kb3cvKiovW2pbeF1dOwoJCQoJCS8vIFRPRE86IE1heWJlIHJlbW92ZSB0aGlzIHNjcmlwdCB0YWcgYWZ0ZXIgZmluaXNoPwoJfSkudG9TdHJpbmcoKS5yZXBsYWNlKC9cL1wqXCpcLy9nLCBzY29wZU5hbWUgPyBzY29wZU5hbWUgOiAnJykgKycpKCcgKyBKU09OLnN0cmluZ2lmeShhcmdNYXBwaW5nKSArICcpOyc7Cglkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkICh0bXBTY3JpcHQpOwoKCXJldHVybiB0bXBTY3JpcHQ7Cn07CgovKioKICogRXJyb3JVbnNhZmU6CiAqIEFuIGVycm9yIGNsYXNzIGZvciB1bnNhZmVPdmVyd3JpdGVGdW5jdGlvblNhZmVQcm94eS4KICogCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lICAgIEVycm9yIE5hbWUKICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgTWVzc2FnZQogKi8KdmFyIEVycm9yVW5zYWZlID0gZnVuY3Rpb24gKG5hbWUsIG1lc3NhZ2UpIHsKCXJldHVybiBjbG9uZUludG8gKHsKCQluYW1lOiBuYW1lIHx8ICdFcnJvclVuc2FmZScsCgkJbWVzc2FnZTogbWVzc2FnZSB8fCAnVW5rbm93biBlcnJvci4nCgl9LCBzY29wZSB8fCB1bnNhZmVXaW5kb3cpOwp9OwoKLyoqCiAqIEVycm9yVW5zYWZlU3VjY2VzczoKICogQW4gRXJyb3IgQ2xhc3MgZm9yIHVuc2FmZU92ZXJ3cml0ZUZ1bmN0aW9uU2FmZVByb3h5LgogKiBJbmZvcm0gcHJveHkgdG8gZXhlY3V0ZSBvcmlnaW9uYWwgZnVuY3Rpb24gd2l0aCBpdHMgZnVsbCBhcmd1bWVudHMuCiAqIAogKiBAcGFyYW0ge1t0eXBlXX0gbWVzc2FnZSBbZGVzY3JpcHRpb25dCiAqIEBwYXJhbSB7W3R5cGVdfSBzY29wZSAgIFtkZXNjcmlwdGlvbl0KICovCnZhciBFcnJvclVuc2FmZVN1Y2Nlc3MgPSBmdW5jdGlvbiAobWVzc2FnZSwgc2NvcGUpIHsKCXJldHVybiBjbG9uZUludG8gKHsKCQluYW1lOiAnRXJyb3JVbnNhZmVTdWNjZXNzOiBQcm94eUZpbmlzaCcsCgkJc3VjY2VzczogdHJ1ZSwKCQltZXNzYWdlOiBtZXNzYWdlIHx8ICcnCgl9LCBzY29wZSB8fCB1bnNhZmVXaW5kb3cpOwp9OwoKLyoqCiAqIHVuc2FmZU92ZXJ3cml0ZUZ1bmN0aW9uU2FmZVByb3h5CiAqIFNpbWlsYXIgdG8gdW5zYWZlT3ZlcndyaXRlRnVuY3Rpb24sIGJ1dCBpdHMgYSBwcm94eSBpbnN0ZWFkLgogKiBJdCB3aWxsIHN0cmlwIGFsbCBmdW5jdGlvbnMgYmVmb3JlIHBhc3MgaW4gdG8gc2FuZGJveGVkIGZ1bmN0aW9uLgogKiBTbywgaXQgY2FuIHByZXZlbnQgQ2xvbmVOb25SZWZsZWN0b3JzV3JpdGUgZXJyb3IuCiAqIAogKiBAcGFyYW0gIHtbdHlwZV19IGZvb01hcHBpbmcgW2Rlc2NyaXB0aW9uXQogKiBAcGFyYW0gIHtbdHlwZV19IHNjb3BlICAgICAgW2Rlc2NyaXB0aW9uXQogKiBAcGFyYW0gIHtbdHlwZV19IHNjb3BlTmFtZSAgW2Rlc2NyaXB0aW9uXQogKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgICAgW2Rlc2NyaXB0aW9uXQogKi8KdmFyIHVuc2FmZU92ZXJ3cml0ZUZ1bmN0aW9uU2FmZVByb3h5ID0gZnVuY3Rpb24gKGZvb01hcHBpbmcsIHNjb3BlLCBzY29wZU5hbWUpIHsKCXZhciBhcmdNYXBwaW5nID0ge30sIHRtcE5hbWU7CgoJLy8gTWFwcGluZyBuZXcgcmFuZG9tIG5hbWVzLgoJZm9yICh2YXIgeCBpbiBmb29NYXBwaW5nKSB7CgkJaWYgKGZvb01hcHBpbmcuaGFzT3duUHJvcGVydHkoeCkpIHsKCQkJdHJ5IHsKCQkJCXRtcE5hbWUgPSAndV93X2ZfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zbGljZSgyKSArICtuZXcgRGF0ZSgpOwoJCQkJCgkJCQkvLyBFeHBvcnQgZnVuY3Rpb24KCQkJCS8vIHVuc2FmZURlZmluZUZ1bmN0aW9uIHdpbGwgdGFrZSBjYXJlIG9mIG51bGwgdmFsdWVzLgoJCQkJdW5zYWZlRGVmaW5lRnVuY3Rpb24gKHRtcE5hbWUsIGZvb01hcHBpbmdbeF0sIHNjb3BlKTsKCQkJCWFyZ01hcHBpbmdbeF0gPSB0bXBOYW1lOwoJCQl9IGNhdGNoIChlKSB7CgkJCQljb25zb2xlLmVycm9yICgnRXJyb3IgYXQgYHVuc2FmZU92ZXJ3cml0ZWA6JywgZSk7CgkJCQlhbGVydCAoZSk7CgkJCX0KCQl9Cgl9CgoJdmFyIHRtcFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgKCdzY3JpcHQnKTsKCXRtcFNjcmlwdC50ZXh0Q29udGVudCA9ICc7KCcrIChmdW5jdGlvbiAoaiwgeCkgewoJCWZvciAoeCBpbiBqKQoJCQlpZiAoai5oYXNPd25Qcm9wZXJ0eSh4KSkgewoJCQkJKGZ1bmN0aW9uICh4LCBiYWssIGZvbykgewoJCQkJCS8vIEFzc2lnbiB2YXJpYWJsZSB0byBvdXIgcHJveHkgZnVuY3Rpb24uCgkJCQkJd2luZG93LyoqL1t4XSA9IGZ1bmN0aW9uICgpIHsKCQkJCQkJLy8gY29uc29sZS5pbmZvIChhcmd1bWVudHMpOwoJCQkJCQlmb3IgKHZhciBpID0gMCwgeSwgYXJncyA9IFtdOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CgkJCQkJCQkvLyBBcnJheSAtIFN1cmUgd2UgY2FuIGhhbmRsZSB0aGlzIHJpZ2h0PwoJCQkJCQkJaWYgKGFyZ3VtZW50c1tpXSBpbnN0YW5jZW9mIEFycmF5KSB7CgkJCQkJCQkJYXJncy5wdXNoIChhcmd1bWVudHNbaV0uc2xpY2UoKSk7CgkJCQkJCQl9IGVsc2UgaWYgKGFyZ3VtZW50c1tpXSBpbnN0YW5jZW9mIE9iamVjdCkgewoJCQkJCQkJCS8vIFN0cmlwIG9mZiBhbGwgcHJvdG90eXBlIGZ1bmN0aW9ucywgaWYgcG9zc2libGUuCgkJCQkJCQkJCgkJCQkJCQkJLy8gVE9ETzogbWF5YmUgdHJ5LWNhdGNoIHRoZSBmb2xsb3dpbmcgbGluZT8KCQkJCQkJCQlhcmdzLnB1c2ggKEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkgKGFyZ3VtZW50c1tpXSkpKTsKCQkJCQkJCX0gZWxzZSBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgYXJndW1lbnRzW2ldKSB7CgkJCQkJCQkJLy8gRnVuY3Rpb24gY2FuJ3QgYmUgc2FuZGJveGllZCA6PAoJCQkJCQkJCWFyZ3MucHVzaCAobnVsbCk7CgkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCS8vIGlkay4uLiBzaG91bGQgYmUgc2FmZSB0byBwYXNzIHRocm91Z2g/CgkJCQkJCQkJYXJncy5wdXNoIChhcmd1bWVudHNbaV0pOwoJCQkJCQkJfQoJCQkJCQl9CgoJCQkJCQl0cnkgewoJCQkJCQkJLy8gVHJ5IHRvIGNhbGwgb3VyIGZ1bmN0aW9uIQoJCQkJCQkJcmV0dXJuIGZvby5hcHBseSh0aGlzLCBhcmdzKTsKCQkJCQkJfSBjYXRjaCAoZXJyKSB7CgkJCQkJCQkvLyBXZSB0aHJvdyB0aGlzIGVycm9yIG9uIHB1cnBvc2UsCgkJCQkJCQkvLyBpZiB3ZSBuZWVkIHRvIGRvIHRoZSBjb21wbGV0ZSBjYWxsYmFjay4KCQkJCQkJCQoJCQkJCQkJLy8gSWYgdGhlIGVycm9yIGRvbidlIGhhdmUgc3VjY2VzcyBmbGFnLCB3ZSdsbCAKCQkJCQkJCS8vIHRocm93IHRoZSBlcnJvciB0byBjb25zb2xlLgoKCQkJCQkJCWlmICghZXJyLnN1Y2Nlc3MpIGNvbnNvbGUuZXJyb3IgKGVycik7CgkJCQkJCQlyZXR1cm4gYmFrLmFwcGx5ICh0aGlzLCBhcmd1bWVudHMpOwoJCQkJCQl9CgkJCQkJfTsKCQkJCX0pICh4LCB3aW5kb3cvKiovW3hdLCB3aW5kb3cvKiovW2pbeF1dKTsKCQkJfQoKCQkvLyBUT0RPOiBNYXliZSByZW1vdmUgdGhpcyBzY3JpcHQgdGFnIGFmdGVyIGZpbmlzaD8KCX0pLnRvU3RyaW5nKCkucmVwbGFjZSgvXC9cKlwqXC8vZywgc2NvcGVOYW1lID8gc2NvcGVOYW1lIDogJycpICsnKSgnICsgSlNPTi5zdHJpbmdpZnkoYXJnTWFwcGluZykgKyAnKTsnOwoJZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCAodG1wU2NyaXB0KTsKCglyZXR1cm4gdG1wU2NyaXB0Owp9OwoKLyoqCiAqIEV4ZWN1dGUgZnVuY3Rpb24gYW5vbnltb3VzbHkKICogQHBhcmFtICB7RnVuY3Rpb259IGZvbwogKiBAcGFyYW0gIHtBbnl9IEFueSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIGluLgogKiBAcmV0dXJuIHtTY3JpcHROb2RlfQogKi8KdmFyIHVuc2FmZUV4ZWMgPSBmdW5jdGlvbiAoZm9vKSB7Cgl2YXIgdG1wU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAoJ3NjcmlwdCcpOwoKCS8vIE5vdyBzdXBwb3J0cyBhcmd1bWVudHMhCgl0bXBTY3JpcHQudGV4dENvbnRlbnQgPQoJCSc7KCcgKyBmb28gKyAnKS5hcHBseSAobnVsbCwgJyArCgkJCUpTT04uc3RyaW5naWZ5KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkgKyAnKTsnOwoKCWRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQgKHRtcFNjcmlwdCk7CglyZXR1cm4gdG1wU2NyaXB0Owp9Ow=="}]},{"name":"searchEngineJump-NextStage","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1604018245715,"data":{}},"enabled":false,"position":4,"file_url":"https://greasyfork.org/scripts/16193-searchenginejump-nextstage/code/searchEngineJump-NextStage.user.js","uuid":"7a6776be-46bd-4b74-8eb8-1a2defb44857","source":"","requires":[{"meta":{"name":"jquery-3.3.1.min.js","url":"https://code.jquery.com/jquery-3.3.1.min.js","ts":1604018246409,"mimetype":"text/javascript"},"source":""}]},{"name":"淘宝、天猫、聚划算、京东、苏宁、唯品会、耐克、魅族、联想、华硕抢购助手v2","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["gwdang.com","ubja.vip","alicdn.com","api.m.taobao.com","jd.com","quan.suning.com"],"orig_excludes":[],"orig_includes":["/http(?:s|)://(?:detail|item)\\.(?:taobao|tmall)\\.(?:[^./]+)/item.htm/","https://chaoshi.tmall.com/*","https://chaoshi.detail.tmall.com/*","https://detail.tmall.hk/*","https://buy.tmall.com/order/*","https://buy.taobao.com/*","https://cart.tmall.com/*","https://cart.taobao.com/*","https://s.click.taobao.com*","https://buy.tmall.com/order/confirmOrderWap.htm*","https://buy.taobao.com/auction/order/confirm_order.htm*","https://buy.tmall.com/auction/order/confirm_order.htm*","https://buy.liangxinyao.com/order/confirm_order.htm*","https://detail.liangxinyao.com/*","https://cart.jd.com/*","*/item.jd.com/*","*//item.jd.hk/*","https://trade.jd.com/shopping/order/*","https://trade.jd.hk/shopping/order/*","https://plogin.m.jd.com*","https://m.jd.com/*","https://wqdeal.jd.com*","https://wqs.jd.com*","https://wq.jd.com/*","https://marathon.jd.com*","https://union-click.jd.com*","*/product.suning.com/*","https://shopping.suning.com/cart.do*","https://shopping.suning.com/order.do*","https://shopping.hksuning.com*","https://product.hksuning.com*","https://detail.meizu.com/item*","https://ordercenter.meizu.com/order/*","https://*.lenovo.com.cn/product/*","https://buy.lenovo.com.cn/checkout/*","https://www.asus.com.cn/store/product*","https://www.asus.com.cn/store/checkout/*","https://detail.vip.com/*","https://cart.vip.com/*","https://checkout.vip.com/*","https://www.nike.com/cn/t/*","https://www.nike.com/cn/zh-Hans/cart*","https://www.nike.com/cn/checkout*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"Acyce":"s9000","AutoSubOdr":"n1","goBtn":"n1","goodsId":"s0","goodsNum":"s1","jlmd":"n1","mqmd":"n0","qzxd":"n0","ref":"n0"},"ts":1604191475369},"enabled":false,"position":5,"file_url":"https://greasyfork.org/scripts/393577-%E6%B7%98%E5%AE%9D-%E5%A4%A9%E7%8C%AB-%E8%81%9A%E5%88%92%E7%AE%97-%E4%BA%AC%E4%B8%9C-%E8%8B%8F%E5%AE%81-%E5%94%AF%E5%93%81%E4%BC%9A-%E8%80%90%E5%85%8B-%E9%AD%85%E6%97%8F-%E8%81%94%E6%83%B3-%E5%8D%8E%E7%A1%95%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8Bv2/code/%E6%B7%98%E5%AE%9D%E3%80%81%E5%A4%A9%E7%8C%AB%E3%80%81%E8%81%9A%E5%88%92%E7%AE%97%E3%80%81%E4%BA%AC%E4%B8%9C%E3%80%81%E8%8B%8F%E5%AE%81%E3%80%81%E5%94%AF%E5%93%81%E4%BC%9A%E3%80%81%E8%80%90%E5%85%8B%E3%80%81%E9%AD%85%E6%97%8F%E3%80%81%E8%81%94%E6%83%B3%E3%80%81%E5%8D%8E%E7%A1%95%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8Bv2.user.js","uuid":"78ec173f-8be1-42de-b33f-afdd22c37572","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"http://libs.baidu.com/jquery/2.0.0/jquery.min.js","ts":1604045684122,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.min.js","url":"https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js","ts":1604045683870,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.min.js","url":"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js","ts":1604045683984,"mimetype":"text/javascript"},"source":""}]},{"name":"🔥🔥🔥文本选中复制🔥🔥🔥","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["static.doc88.com"],"orig_excludes":[],"orig_includes":["*://wenku.baidu.com/view/*","*://www.51test.net/show/*","*://www.xuexi.la/*","*://www.xuexila.com/*","*://www.cspengbo.com/*","*://www.doc88.com/*","*://segmentfault.com/*","*://wk.baidu.com/view/*","*://leetcode-cn.com/problems/*","*://www.zhihu.com/*","*://z.30edu.com.cn/*","*://docs.qq.com/doc/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1605003072467,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/405130-%E6%96%87%E6%9C%AC%E9%80%89%E4%B8%AD%E5%A4%8D%E5%88%B6/code/%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%E6%96%87%E6%9C%AC%E9%80%89%E4%B8%AD%E5%A4%8D%E5%88%B6%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5.user.js","uuid":"41236fb5-9c7f-4cec-9d43-f332fcb64bd6","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.bootcss.com/jquery/2.1.2/jquery.min.js","ts":1607838060259,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"clipboard.min.js","url":"https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js","ts":1607838060099,"mimetype":"text/javascript"},"source":""}]},{"name":"极简知乎","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.zhihu.com/question/*","*://www.zhihu.com/search*","*://www.zhihu.com/hot","*://www.zhihu.com/follow","*://www.zhihu.com/","*://zhuanlan.zhihu.com/*","*://www.zhihu.com/signin*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1605003081970,"data":{}},"enabled":false,"position":7,"file_url":"https://greasyfork.org/scripts/37823-%E6%9E%81%E7%AE%80%E7%9F%A5%E4%B9%8E/code/%E6%9E%81%E7%AE%80%E7%9F%A5%E4%B9%8E.user.js","uuid":"17272cf7-8e86-49c5-bc2d-af55cd069346","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICDmnoHnroDnn6XkuY4KLy8gQHZlcnNpb24gICAgICAgICAwLjEuMjQKLy8gQGF1dGhvciAgICAgICAgICBoY2Vhc3kKLy8gQG5hbWVzcGFjZSAgICAgICBodHRwczovL2hjZWFzeS5jb20KLy8gQHN1cHBvcnRVUkwgICAgICBodHRwczovL2dpdGh1Yi5jb20vaGNlYXN5L3NpbXBsZVpoaUh1L2lzc3VlcwovLyBAZGVzY3JpcHRpb24gICAgIOS8mOWMlumYheivu+eVjOmdoizlhY3nmbvlvZUs5bm/5ZGK5Y676ZmkLOm7keWQjeWNleWKn+iDvS4KLy8gQG1hdGNoICAgICAgICAgICAqOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovL3d3dy56aGlodS5jb20vc2VhcmNoKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly93d3cuemhpaHUuY29tL2hvdAovLyBAbWF0Y2ggICAgICAgICAgICo6Ly93d3cuemhpaHUuY29tL2ZvbGxvdwovLyBAbWF0Y2ggICAgICAgICAgICo6Ly93d3cuemhpaHUuY29tLwovLyBAbWF0Y2ggICAgICAgICAgICo6Ly96aHVhbmxhbi56aGlodS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly93d3cuemhpaHUuY29tL3NpZ25pbioKLy8gQHJ1bi1hdCAgICAgICAgICBkb2N1bWVudC1lbmQKLy8gPT0vVXNlclNjcmlwdD09CjsgKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JwogICAgLy8g6K6+572u6I+c5Y2VCiAgICBjb25zdCBtZW51SFRNTCA9ICc8ZGl2IGNsYXNzPSJleHRNZW51Ij48aW1nIHNyYz0iaHR0cHM6Ly96aHN0YXRpYy56aGlodS5jb20vYXNzZXRzL2Vycm9yL2xpdWthbnNoYW5fd2lyZS5zdmciIGFsdD0i5YiY55yL5bGxIiB3aWR0aD0iMTVweCIgaGVpZ2h0PSIxOXB4Ij48cD7mmL7npLrmj5Dpl67moIfpopjmoI8gPGlucHV0IGlkPSJzaG93UXVlc3Rpb24iIHR5cGU9ImNoZWNrYm94Ij48L3A+PHA+5rWP6KeI5Zmo5qCH6aKY5pu/5o2iIDxpbnB1dCBpZD0ic2hvd0Zha2VUaXRsZSIgdHlwZT0iY2hlY2tib3giPjwvcD48cD7pu5HlkI3ljZXliJfooag6PC9wPjxwPjx0ZXh0YXJlYSBwbGFjZWhvbGRlcj0i5YiY55yL5bGxLOWMv+WQjeeUqOaItyIgaWQ9ImJsYWNrTGlzdCIgY29scz0iMjAiIHJvd3M9IjIiPjwvdGV4dGFyZWE+PC9wPjxwPjxidXR0b24gaWQ9InNhdmVDb25maWciPuS/neWtmDwvYnV0dG9uPjwvcD48L2Rpdj4nCiAgICBjb25zdCBtZW51Q3NzID0gJy5leHRNZW51IHtwb3NpdGlvbjogZml4ZWQ7dG9wOiAxMHB4O3JpZ2h0OiAxMHB4O3dpZHRoOiAxNXB4O2hlaWdodDogMTlweDtmb250LXNpemU6IDEycHg7b3ZlcmZsb3c6IGhpZGRlbjt9LmV4dE1lbnU6aG92ZXIge3dpZHRoOiBhdXRvO2hlaWdodDogYXV0bztib3JkZXI6IDFweCBzb2xpZCAjMDAwO3BhZGRpbmc6MTBweDt9LmV4dE1lbnU6aG92ZXIgaW1nIHtkaXNwbGF5OiBub25lO30nCiAgICBjb25zdCBibGlua0xpdSA9ICcuZXh0TWVudXthbmltYXRpb246anVtcExpdSA1cyBpbmZpbml0ZX1Aa2V5ZnJhbWVzIGp1bXBMaXV7MCV7cmlnaHQ6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOiMyNjQ2NTN9MjAle3JpZ2h0OjIwcHg7YmFja2dyb3VuZC1jb2xvcjojMmE5ZDhmfTQwJXtyaWdodDozMHB4O2JhY2tncm91bmQtY29sb3I6I2U5YzQ2YX02MCV7cmlnaHQ6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOiNmNGEyNjF9ODAle3JpZ2h0OjIwcHg7YmFja2dyb3VuZC1jb2xvcjojZTc2ZjUxfTEwMCV7cmlnaHQ6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOiMyNjQ2NTN9fScKCiAgICAvLyDljLrliIbmkJzntKLpl67nrZTpobXpnaIKICAgIGNvbnN0IHBhdGhOYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lCiAgICBjb25zdCBob3N0TmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZQogICAgbGV0IHBhZ2VUeXBlCiAgICBpZiAocGF0aE5hbWUuaW5kZXhPZigncXVlc3Rpb24nKSA+PSAwKSB7CiAgICAgICAgcGFnZVR5cGUgPSAncXVlc3Rpb24nCiAgICB9IGVsc2UgaWYgKHBhdGhOYW1lLmluZGV4T2YoJ3NlYXJjaCcpID49IDApIHsKICAgICAgICBwYWdlVHlwZSA9ICdzZWFyY2gnCiAgICB9IGVsc2UgaWYgKHBhdGhOYW1lLmluZGV4T2YoJ2hvdCcpID49IDAgfHwgcGF0aE5hbWUuaW5kZXhPZignZm9sbG93JykgPj0gMCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZiA9PT0gImh0dHBzOi8vd3d3LnpoaWh1LmNvbS8iKSB7CiAgICAgICAgcGFnZVR5cGUgPSAnaG90JwogICAgfSBlbHNlIGlmIChwYXRoTmFtZS5pbmRleE9mKCdzaWduaW4nKSA+PSAwKSB7CiAgICAgICAgcGFnZVR5cGUgPSAnc2lnbmluJwogICAgfSBlbHNlIGlmIChob3N0TmFtZSA9PT0gInpodWFubGFuLnpoaWh1LmNvbSIpIHsKICAgICAgICBwYWdlVHlwZSA9ICd6aHVhbmxhbicKICAgIH0KCiAgICAvLyDnlKhHaXRIdWLnmoTlm77moIfmm7/mjaIKICAgIGNvbnN0IGZha2VfdGl0bGUgPSAnR2l0SHViJwogICAgLy8gaWNvbuS5n+aUueS6hgogICAgY29uc3QgZmFrZV9pY29uID0gJ2h0dHBzOi8vZ2l0aHViLmdpdGh1YmFzc2V0cy5jb20vZmF2aWNvbi5pY28nCiAgICBsZXQgbGluayA9CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigibGlua1tyZWwqPSdpY29uJ10iKSB8fAogICAgICAgIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKQogICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zdCBzQ29uZmlnID0gd2luZG93LmxvY2FsU3RvcmFnZQogICAgICAgIGlmIChzQ29uZmlnLmZha2VUaXRsZSA9PT0gdW5kZWZpbmVkIHx8IHNDb25maWcuc2hvd1F1ZXN0aW9uID09PSB1bmRlZmluZWQgfHwgc0NvbmZpZy5ibGFja0xpc3QgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBzQ29uZmlnLmZha2VUaXRsZSA9ICd0cnVlJwogICAgICAgICAgICBzQ29uZmlnLnNob3dRdWVzdGlvbiA9ICd0cnVlJwogICAgICAgICAgICBzQ29uZmlnLmJsYWNrTGlzdCA9ICcnCiAgICAgICAgfQogICAgICAgIC8vIOa3u+WKoOiPnOWNlQogICAgICAgIGxldCBjc3NGaXggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSBtZW51Q3NzCiAgICAgICAgaWYgKHR5cGVvZiAoc0NvbmZpZy5ibGlua0xpdSkgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gYmxpbmtMaXUKICAgICAgICB9CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChjc3NGaXgpCiAgICAgICAgbGV0IGh0bWxGaXggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKQogICAgICAgIGh0bWxGaXguaW5uZXJIVE1MICs9IG1lbnVIVE1MCiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sRml4KQoKICAgICAgICAvLyDnu5Hlrprmk43kvZwKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hvd0Zha2VUaXRsZScpLmNoZWNrZWQgPSBKU09OLnBhcnNlKHNDb25maWcuZmFrZVRpdGxlKQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaG93UXVlc3Rpb24nKS5jaGVja2VkID0gSlNPTi5wYXJzZShzQ29uZmlnLnNob3dRdWVzdGlvbikKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmxhY2tMaXN0JykudmFsdWUgPSBzQ29uZmlnLmJsYWNrTGlzdAogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlQ29uZmlnJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHNDb25maWcuZmFrZVRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3dGYWtlVGl0bGUnKS5jaGVja2VkCiAgICAgICAgICAgIHNDb25maWcuc2hvd1F1ZXN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Nob3dRdWVzdGlvbicpLmNoZWNrZWQKICAgICAgICAgICAgc0NvbmZpZy5ibGFja0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmxhY2tMaXN0JykudmFsdWUuc3BsaXQoJywnKQogICAgICAgICAgICBzQ29uZmlnLmJsaW5rTGl1ID0gZmFsc2UKICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpCiAgICAgICAgfSkKCiAgICAgICAgLy8g5pS55LiL5qCH6aKYCiAgICAgICAgaWYgKHNDb25maWcuZmFrZVRpdGxlID09PSAndHJ1ZScpIHsKICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LnRpdGxlID0gZmFrZV90aXRsZQogICAgICAgICAgICBsaW5rLnR5cGUgPSAnaW1hZ2UveC1pY29uJwogICAgICAgICAgICBsaW5rLnJlbCA9ICdzaG9ydGN1dCBpY29uJwogICAgICAgICAgICBsaW5rLmhyZWYgPSBmYWtlX2ljb24KICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChsaW5rKQogICAgICAgIH0KICAgICAgICBzd2l0Y2ggKHBhZ2VUeXBlKSB7CiAgICAgICAgICAgIGNhc2UgJ3F1ZXN0aW9uJzoKICAgICAgICAgICAgICAgIGZpeFF1ZXN0aW9uUGFnZSgpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICdzZWFyY2gnOgogICAgICAgICAgICAgICAgZml4U2VhcmNoUGFnZSgpCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBjYXNlICdob3QnOgogICAgICAgICAgICAgICAgZml4SG9tZVBhZ2UoKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnc2lnbmluJzoKICAgICAgICAgICAgICAgIGFkZEhvdExpc3QoKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgY2FzZSAnemh1YW5sYW4nOgogICAgICAgICAgICAgICAgZml4Wmh1YW5MYW4oKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICB9CiAgICB9CiAgICB3aW5kb3cub25zY3JvbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaGlkZUF1dGhvcigpCiAgICB9CiAgICBmdW5jdGlvbiBhZGRIb3RMaXN0ICgpIHsKICAgICAgICBsZXQgc2lnbkJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5TaWduRmxvdy1zdWJtaXRCdXR0b24nKQogICAgICAgIGlmIChzaWduQnV0dG9uKSB7CiAgICAgICAgICAgIGxldCBob3RCdXR0b24gPSBzaWduQnV0dG9uLmNsb25lTm9kZShmYWxzZSkKICAgICAgICAgICAgbGV0IHBhcmVudCA9IHNpZ25CdXR0b24ucGFyZW50Tm9kZTsKICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGhvdEJ1dHRvbikKICAgICAgICAgICAgaG90QnV0dG9uLmlubmVySFRNTCA9ICfkuI3mg7PnmbvlvZUs5Y6754Ot5qac6L2s6L2sJwogICAgICAgICAgICBob3RCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSAnaHR0cHM6Ly93d3cuemhpaHUuY29tL2JpbGxib2FyZCcKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIGZpeFF1ZXN0aW9uUGFnZSAoKSB7CiAgICAgICAgY29uc3Qgc0NvbmZpZyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UKICAgICAgICBsZXQgY3NzRml4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKQogICAgICAgIC8vIOWQuOW6leeahOivhOiuuuagjwogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJy5SaWNoQ29udGVudC1hY3Rpb25ze2JvdHRvbTphdXRvICFpbXBvcnRhbnQ7fScKICAgICAgICAvLyDnm7TmjqXlsY/olL3pobbpg6jpl67popjnm7jlhbMKICAgICAgICBpZiAoc0NvbmZpZy5zaG93UXVlc3Rpb24gPT09ICdmYWxzZScpIHsKICAgICAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlF1ZXN0aW9uSGVhZGVyLWZvb3RlcntkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuUXVlc3Rpb25IZWFkZXJ7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fScKICAgICAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlF1ZXN0aW9uLW1haW57bWFyZ2luOjAgIWltcG9ydGFudDt9JwogICAgICAgIH0KICAgICAgICAvLyDpl67popjpobXpnaLnmbvlvZXlvLnnqpcKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuTW9kYWwtYmFja2Ryb3B7YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7fScKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuc2lnbkZsb3dNb2RhbHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgIC8vIOmhtumDqOWFs+mUruivjQogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJy5RdWVzdGlvbkhlYWRlci10YWdze2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O30nCiAgICAgICAgLy8g6Zeu6aKY55u45YWz5pKR5ruhCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlF1ZXN0aW9uSGVhZGVyLWNvbnRlbnR7d2lkdGg6Njk0cHggIWltcG9ydGFudDtwYWRkaW5nOjA7fScKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuUXVlc3Rpb25IZWFkZXItZm9vdGVye2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O30nCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlF1ZXN0aW9uSGVhZGVyLW1haW4ge21hcmdpbjoxMHB4O30nCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlF1ZXN0aW9uSGVhZGVye3dpZHRoOjY5NHB4O21hcmdpbjowIGF1dG87cGFkZGluZzowO21pbi13aWR0aDphdXRvO30nCiAgICAgICAgLy8g5pyq5bGV5byA5pe25YaF5a655bGF5LitCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLkxpc3RTaG9ydGN1dHttYXJnaW46MCBhdXRvO30nCiAgICAgICAgLy8g5bGV5byA5pe25bGF5LitCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlF1ZXN0aW9uLXNpZGVDb2x1bW57ZGlzcGxheTpub25lO30nCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlF1ZXN0aW9uLW1haW5Db2x1bW57bWFyZ2luOjAgYXV0bzt9JwogICAgICAgIC8vIOWGheWuueWbvueJhy/op4bpopHmnIDlpKczMDBweAogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJy5vcmlnaW5faW1hZ2V7bWF4LXdpZHRoOjMwMHB4ICFpbXBvcnRhbnQ7fScKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuUmljaFRleHQtdmlkZW97bWF4LXdpZHRoOjMwMHB4ICFpbXBvcnRhbnQ7fScKICAgICAgICAvLyDlhoXlrrnpk77mjqXljrvnibnlvoEKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9CiAgICAgICAgICAgICcuTGlua0NhcmR7bWFyZ2luOmF1dG8gIWltcG9ydGFudDtkaXNwbGF5OmlubGluZSAhaW1wb3J0YW50O30uTGlua0NhcmQtY29udGVudHtiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDt9LkxpbmtDYXJkLXRpdGxle2NvbG9yOiM5OTkgIWltcG9ydGFudH0nCiAgICAgICAgLy8g54K56LWeCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPQogICAgICAgICAgICAnLlZvdGVCdXR0b257Y29sb3I6Izk5OSAhaW1wb3J0YW50O2JhY2tncm91bmQ6IG5vbmU7ICFpbXBvcnRhbnR9JwogICAgICAgIC8vIOivhOiuuuWxleW8gOWuveW6pgogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJy5Nb2RhbC0tZnVsbFBhZ2V7d2lkdGg6NjUwcHh9JwogICAgICAgIC8vIOivhOiuuuWxleW8gOWFs+mXreaMiemSruWkjeS9jQogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJy5Nb2RhbC1jbG9zZUJ1dHRvbntyaWdodDowO30nCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLk1vZGFsLWNsb3NlSWNvbntmaWxsOiM5MTkxOTE7fScKICAgICAgICAvLyDlub/lkYrllYblk4Hpk77mjqUKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9CiAgICAgICAgICAgICcuUmljaFRleHQtTUNOTGlua0NhcmRDb250YWluZXJ7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fScKICAgICAgICAvLyDlpLnnvJ3lub/lkYoKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9CiAgICAgICAgICAgICcuUGMtd29yZHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoY3NzRml4KQogICAgICAgIC8vIOWPs+S+p+mXrumimOebuOWFswogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ1F1ZXN0aW9uSGVhZGVyLXNpZGUnKVsxXS5zdHlsZS5kaXNwbGF5ID0KICAgICAgICAgICAgJ25vbmUnCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnUXVlc3Rpb24tc2lkZUNvbHVtbicpWzBdLnN0eWxlLmRpc3BsYXkgPQogICAgICAgICAgICAnbm9uZScKICAgICAgICAvLyDpobbpg6jpl67popjmoIfpopgKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZGVyJylbMF0uc3R5bGUuZGlzcGxheSA9ICdub25lJwogICAgICAgIC8vIOWGheWuueaSkea7oQogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ1F1ZXN0aW9uLW1haW4nKVswXS5zdHlsZS53aWR0aCA9ICdhdXRvJwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ1F1ZXN0aW9uLW1haW4nKVswXS5zdHlsZS5wYWRkaW5nID0gJzAnCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnUXVlc3Rpb24tbWFpbkNvbHVtbicpWzBdLnN0eWxlLm1hcmdpbiA9CiAgICAgICAgICAgICcwIGF1dG8nCiAgICB9CiAgICBmdW5jdGlvbiBmaXhTZWFyY2hQYWdlICgpIHsKICAgICAgICBsZXQgY3NzRml4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKQogICAgICAgIC8vIGhlYWRlcgogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJ2hlYWRlcntkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgIC8vIFNlYXJjaFRhYnMKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuU2VhcmNoVGFic3tkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgIC8vIFNlYXJjaFNpZGVCYXIKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuU2VhcmNoU2lkZUJhcntkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgIC8vIENvcm5lckJ1dHRvbnMKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuQ29ybmVyQnV0dG9uc3tkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgIC8vIC5TZWFyY2hNYWluCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPQogICAgICAgICAgICAnLlNlYXJjaE1haW57d2lkdGg6MTAwJSAhaW1wb3J0YW50O21hcmdpbjogMCAhaW1wb3J0YW50O30nCiAgICAgICAgLy8gU2VhcmNoLWNvbnRhaW5lcgogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0KICAgICAgICAgICAgJy5TZWFyY2gtY29udGFpbmVye3dpZHRoOiBhdXRvICFpbXBvcnRhbnQ7bWluLWhlaWdodDogYXV0byAhaW1wb3J0YW50O21hcmdpbjpub25lICFpbXBvcnRhbnQ7fScKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuU2VhcmNoU2VjdGlvbnN7d2lkdGg6YXV0byAhaW1wb3J0YW50fScKICAgICAgICAvLyDngrnotZ4KICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9CiAgICAgICAgICAgICcuVm90ZUJ1dHRvbntjb2xvcjojOTk5ICFpbXBvcnRhbnQ7YmFja2dyb3VuZDogbm9uZTsgIWltcG9ydGFudH0nCiAgICAgICAgLy8g5YaF5a655Zu+54mHL+inhumikeacgOWkpzMwMHB4CiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLm9yaWdpbl9pbWFnZXttYXgtd2lkdGg6MzAwcHggIWltcG9ydGFudDt9JwogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJy5SaWNoVGV4dC12aWRlb3ttYXgtd2lkdGg6MzAwcHggIWltcG9ydGFudDt9JwogICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoY3NzRml4KQogICAgfQogICAgZnVuY3Rpb24gZml4Wmh1YW5MYW4gKCkgewogICAgICAgIGxldCBjc3NGaXggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpCiAgICAgICAgY3NzRml4LmlubmVySFRNTCArPSAnLlJlY29tbWVuZGF0aW9ucy1NYWlue2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O30nCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChjc3NGaXgpCiAgICB9CiAgICBmdW5jdGlvbiBmaXhIb21lUGFnZSAoKSB7CiAgICAgICAgbGV0IGNzc0ZpeCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJykKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuR2xvYmFsU2lkZUJhcntkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9JwogICAgICAgIGNzc0ZpeC5pbm5lckhUTUwgKz0gJy5Ub3BzdG9yeS1jb250YWluZXJ7d2lkdGg6MTAwJSAhaW1wb3J0YW50O3BhZGRpbmc6MCAhaW1wb3J0YW50fScKICAgICAgICBjc3NGaXguaW5uZXJIVE1MICs9ICcuVG9wc3RvcnktbWFpbkNvbHVtbnt3aWR0aDoxMDAlICFpbXBvcnRhbnQ7fScKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdLmFwcGVuZENoaWxkKGNzc0ZpeCkKICAgIH0KICAgIGZ1bmN0aW9uIGhpZGVBdXRob3IgKCkgewogICAgICAgIGNvbnN0IGFuc3dlckxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdMaXN0LWl0ZW0nKQogICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhbnN3ZXJMaXN0Lmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgICBjb25zdCBvYmogPSBhbnN3ZXJMaXN0W2luZGV4XQogICAgICAgICAgICBjb25zdCBrZXkgPSBKU09OLnBhcnNlKG9iai5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZGl2IilbMF0uZ2V0QXR0cmlidXRlKCJkYXRhLXpvcCIpKQogICAgICAgICAgICBpZiAoa2V5ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgfQogICAgICAgICAgICBjb25zdCBibGFja0xpc3QgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmJsYWNrTGlzdC5zcGxpdCgnLCcpCiAgICAgICAgICAgIGJsYWNrTGlzdC5mb3JFYWNoKG5hbWUgPT4gewogICAgICAgICAgICAgICAgaWYgKGtleS5hdXRob3JOYW1lID09PSBuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQp9KSgpCg=="}]}