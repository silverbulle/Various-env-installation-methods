Ubuntu18.04驱动安装参考网址：https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-18-04-bionic-beaver-linux#h7-automatic-install-using-ppa-repository-to-install-nvidia-beta-drivers


禁用显卡的方法这里在记一下:
在/etc/modprobe.d/blacklist.conf里添加，如下内容，并执行 sudo update-initramfs -u

blacklist nouveau
options nouveau modeset=0
重启后用lsmod | grep nouveau,如果没有任何输出说明禁用成功。


安装方法：
Ⅰ
1.首先检测nvidia图形卡的型号和推荐的驱动程序
ubuntu-drivers devices
2.若同意安装推荐的驱动版本则使用命令安装所有建议的驱动程序
sudo ubuntu-drivers autoinstall   
或者使用apt命令安装其它版本的驱动
sudo apt install xxx(nvidia-driver-340)
3.安装成功后使用 nvidia-smi 验证安装是否成功，如果显示显卡相关信息则验证表示安装成功(安装后可能需要重启)

Ⅱ
使用graphics-drivers 存储库可以安装最新的驱动版本，但有可能导致系统不稳定
1.首先，将ppa:graphics-drivers/ppa存储库添加到系统中
sudo add-apt-repository ppa:graphics-drivers/ppa
sudo apt update
2.同方法Ⅰ的1-3操作相同(安装后可能需要重启)

Ⅲ（暂不记录，具体使用到再查看参考网址）
使用Nvidia.com官方驱动程序进行手动安装
1.识别NVIDIA VGA卡
lshw -numeric -C display   
或者
lspci -vnn | grep VGA
2.下载官方的Nvidia驱动（http://www.nvidia.com/Download/index.aspx）（翻墙）
3.……


关于CUDA和Cudnn：
1.CUDA本质上只是一个工具包而已，NVIDIA的显卡驱动器与CUDA并不是一一对应的，一个最新的显卡驱动下可以安装不同版本的CUDA工具包；
2.cuDNN是一个SDK，是一个专门用于神经网络的加速包，注意，它跟CUDA没有一一对应的关系，即每一个版本的CUDA可能有好几个版本的cuDNN与之对应，但一般有一个最新版本的cuDNN版本与CUDA对应更好；

3.. CUDA Toolkit and Compatible Driver Versions（CUDA和驱动版本对应关系）
CUDA Toolkit	                	Linux x86_64 Driver Version	Windows x86_64 Driver Version
CUDA 11.1.1 Update 1		>=455.32			>=456.81
CUDA 11.1 GA	                	>=455.23			>=456.38
CUDA 11.0.3 Update 1		>= 450.51.06		>= 451.82
CUDA 11.0.2 GA			>= 450.51.05		>= 451.48
CUDA 11.0.1 RC			>= 450.36.06		>= 451.22
CUDA 10.2.89			>= 440.33			>= 441.22
CUDA 10.1 (10.1.105 general release, and updates)	>= 418.39		>= 418.96
CUDA 10.0.130			>= 410.48			>= 411.31
CUDA 9.2 (9.2.148 Update 1)		>= 396.37			>= 398.26
CUDA 9.2 (9.2.88)			>= 396.26			>= 397.44
CUDA 9.1 (9.1.85)			>= 390.46			>= 391.29
CUDA 9.0 (9.0.76)			>= 384.81			>= 385.54
CUDA 8.0 (8.0.61 GA2)		>= 375.26			>= 376.51
CUDA 8.0 (8.0.44)			>= 367.48			>= 369.30
CUDA 7.5 (7.5.16)			>= 352.31			>= 353.66
CUDA 7.0 (7.0.28)			>= 346.46			>= 347.62


nvcc -V 和 nvidia-smi输出的cuda版本不同：
nvcc其实就是CUDA的编译器,可以从CUDA Toolkit的/bin目录中获取,类似于gcc就是c语言的编译器。由于程序是要经过编译器编程成可执行的二进制文件，而cuda程序有两种代码，一种是运行在cpu上的host代码，一种是运行在gpu上的device代码，所以nvcc编译器要保证两部分代码能够编译成二进制文件在不同的机器上执行。
CUDA有两个主要的API：runtime(运行时) API和driver API。这两个API都有对应的CUDA版本（如9.2和10.0等）。

1.用于支持driver API的必要文件(如libcuda.so)是由GPU driver installer安装的。nvidia-smi就属于这一类API。
2.用于支持runtime API的必要文件(如libcudart.so以及nvcc)是由CUDA Toolkit installer安装的。（CUDA Toolkit Installer有时可能会集成了GPU driver Installer）。nvcc是与CUDA Toolkit一起安装的CUDA compiler-driver tool，它只知道它自身构建时的CUDA runtime版本。它不知道安装了什么版本的GPU driver，甚至不知道是否安装了GPU driver。

更新nvcc的cuda版本方法：
首先视需求卸载自动安装的版本
(1.sudo apt-get autoremove nvidia-cuda-toolkit
2.查看nvcc -V现在是no such file
3.查看/usr/local/cuda/bin中是否有可执行文件，如果有，执行下一步；如果没有，则添加软连接：
sudo ln -s /usr/local/cuda-9.1 /usr/local/cuda
4.添加环境变量export PATH=$PATH:/usr/local/cuda/bin,查看echo $PATH可以看到添加成功，再执行nvcc -V
)

1.从英伟达官方按步骤安装cudatoolkit(尽量使用run方法安装)
https://developer.nvidia.com/cuda-11.0-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=deblocal
2.在~/.bashrc 中增加如下内容：
export CUDA_HOME=/usr/local/cuda 
export PATH=$PATH:$CUDA_HOME/bin 
export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
3.保存退出，使其生效
source ~/.bashrc

！！！切换cuda版本使用命令：sudo ln -s /usr/local/cuda-11.2 /usr/local/cuda
