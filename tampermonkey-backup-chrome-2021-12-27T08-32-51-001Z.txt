{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"AC-baidu-重定向优化百度搜狗谷歌必应搜索_favicon_双列","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["baidu.com","google.com","google.com.hk","google.com.jp","bing.com","duckduckgo.com","dogedoge.com","so.com"],"orig_excludes":["*://*.google*/sorry*","https://zhidao.baidu.com/*","https://*.zhidao.baidu.com/*","https://www.baidu.com/img/*"],"orig_includes":["*://ipv6.baidu.com/*","*://www.baidu.com/*","*://www1.baidu.com/*","*://m.baidu.com/*","*://xueshu.baidu.com/s*","*://www.so.com/s?*","*://*.bing.com/*","*://encrypted.google.*/search*","*://*.google*/search*","*://*.google*/webhp*","*://*.zhihu.com/*","*://*duckduckgo.com/*","*://*.dogedoge.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"Config":"s{\"isRedirectEnable\":true,\"isAdsEnable\":false,\"isAutopage\":true,\"isBlockEnable\":false,\"isBlockDisplay\":false,\"isBlockBtnNotDisplay\":false,\"AdsStyleEnable\":true,\"baidu\":{\"name\":\"baidu\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"google\":{\"name\":\"google\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"bing\":{\"name\":\"bing\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"duck\":{\"name\":\"duck\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"doge\":{\"name\":\"doge\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"sogou\":{\"name\":\"sogou\",\"AdsStyleMode\":\"1\",\"HuYanMode\":false},\"Style_BaiduLite\":false,\"defaultHuYanColor\":\"#DEF1EF\",\"isUserColorEnable\":false,\"isFaviconEnable\":false,\"defaultFaviconUrl\":\"https://ae01.alicdn.com/kf/HTB1dRY0X8OD3KVjSZFFq6An9pXay.jpg\",\"doDisableSug\":true,\"isRightDisplayEnable\":false,\"isCounterEnable\":false,\"isALineEnable\":false,\"isUserStyleEnable\":false,\"normalizeDuck\":true,\"isEnLang\":false,\"isGooleInBaiduModeEnable\":false,\"UserBlockList\":[],\"UserStyleText\":\"/**计数器的颜色样式*/\\ndiv .AC-CounterT{\\n  background: #FD9999;\\n}\\n/**右侧栏的样式-其实不开启更好看一些*/\\n#content_right{\\n  padding: 20px 15px 15px;\\n  border-radius: 5px;\\n  background-color: #fff;\\n  box-sizing: border-box;\\n  box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -webkit-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -moz-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n}\\n/****可以加一些自己的背景图片,替换引号内的内容为可外链的图片即可****/\\nbody[baidu]{\\n  background-repeat: repeat-y;\\n  background-size: 100%;\\n  background-attachment:fixed;\\n  background-image: url('https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1564756277250&di=868b9eac9be14df1dedd8c7d6a710844&imgtype=0&src=http%3A%2F%2Fphotocdn.sohu.com%2F20130530%2FImg377502333.jpg');\\n}\\n/*****窗口背景的透明虚化效果*****/\\nbody>#wrapper,body>.wrap,body>#main,body #appbar,body #hdtbSum{\\n  background: rgba(225,225,225,0.8);\\n}\\n/**隐藏首页的大图标-修复可能导致外援样式异常**/\\nbody[baidu] #s_lg_img_new{\\n  display:none !important;\\n}\\n#wrapper #content_left .result, #wrapper #content_left .c-container{\\n  border-radius: 5px;\\n}\",\"oldVersion\":\"24.23\",\"lastSaveTime\":1623402970228,\"zhihu\":{\"name\":\"zhihu\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"other\":{\"name\":\"other\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"acceptLicense\":false}"},"ts":1623403059763},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97/code/AC-baidu:%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2_favicon_%E5%8F%8C%E5%88%97.user.js","uuid":"958f5fa4-1970-45a3-bbd1-d8d950a35c81","source":"","resources":[{"meta":{"name":"baiduCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduCommonStyle.css?t=25.01","ts":1640137274713,"mimetype":"text/css"},"source":""},{"meta":{"name":"baiduOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduOnePageStyle.css?t=25.012","ts":1640137274711,"mimetype":"text/css"},"source":"LyoqU3RvcmUgQmFpZHVPbmVQYWdlU3R5bGUqKi8NCiN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lcnsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBtYXJnaW4tbGVmdDogdW5zZXQ7DQp9DQpmb3JtLmZtew0KICAgIHBvc2l0aW9uOnJlbGF0aXZlOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHVuc2V0Ow0KfQ0KYm9keVtiYWlkdV0gLnBhZ2Vmb290Lmdqew0KICAgIG1hcmdpbi10b3A6IDEwMHB4Ow0KfQ0KLndyYXBwZXJfbmV3IC5oZWFkX3dyYXBwZXIgI3Jlc3VsdF9sb2dvew0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3NfdGFiIGIsI3NfdGFiIGF7DQogICAgcG9zaXRpb246cmVsYXRpdmU7DQp9DQojd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXJ7DQogICAgcG9zaXRpb246YWJzb2x1dGU7DQogICAgbGVmdDogMjAlOw0KICAgIHdpZHRoOiA2MCU7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0ew0KICAgIG1hcmdpbjogMCBhdXRvICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldCAhaW1wb3J0YW50Ow0KfQ0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQsI3dyYXBwZXIgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjcnMsICN3cmFwcGVyICNwYWdlew0KICAgIHBvc2l0aW9uOnJlbGF0aXZlOw0KICAgIHBhZGRpbmctbGVmdDogMHB4Ow0KICAgIHdpZHRoOiA0MCUgIWltcG9ydGFudDsNCiAgICBtaW4td2lkdGg6IDY3MHB4Ow0KICAgIGZsb2F0OnVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiB1bnNldDsNCiAgICBtYXJnaW46IDAgYXV0bzsNCn0NCg0KI3dyYXBwZXIgI3BhZ2V7DQogICAgYmFja2dyb3VuZDogdW5zZXQ7DQp9DQojd3JhcHBlciAjcnMgdGh7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KI3dyYXBwZXIgI3Jzew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBtYXJnaW46IDMwcHggYXV0byAtMjBweCBhdXRvOw0KfQ0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQgLmMtY29udGFpbmVyew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQogICAgbWluLXdpZHRoOjY1MHB4Ow0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7DQogICAgI3dyYXBwZXIgICNjb250ZW50X2xlZnQsICN3cmFwcGVyICAjcnN7DQogICAgICAgIG1pbi13aWR0aDo4MDBweDsNCiAgICB9DQp9DQojd3JhcHBlciAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7DQogICAgcGFkZGluZy1sZWZ0OiAyMHB4Ow0KICAgIGRpc3BsYXk6IGJsb2NrOw0KfQ0KI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCn0NCmJvZHkuc2hvd1JpZ2h0ICN3cmFwcGVyICNjb250YWluZXIuc2FtX25ld2dyaWQgI2NvbnRlbnRfbGVmdHsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoY2FsYyg2dncgLSAyNTFweCkpOw0KfQ0KYm9keS5zaG93UmlnaHQgI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7DQogICAgcmlnaHQ6IGNhbGMoMzcuNXZ3IC0gNDcwcHgpOw0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTI4MHB4KXsNCiAgICBib2R5LnNob3dSaWdodCAjd3JhcHBlciAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7DQogICAgICAgIHRyYW5zZm9ybTogdW5zZXQ7DQogICAgfQ0KICAgIGJvZHkuc2hvd1JpZ2h0ICN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgICAgICBkaXNwbGF5OiBub25lOw0KICAgIH0NCn0NCiN3cmFwcGVyICNwYWdlIGEsICN3cmFwcGVyICNwYWdlIHN0cm9uZ3sNCiAgICBtYXJnaW4tcmlnaHQ6IDIycHggIWltcG9ydGFudDsNCn0NCiN3cmFwcGVyICNwYWdlIC5wYWdlLWlubmVyew0KICAgIHBhZGRpbmctbGVmdDogMjJweDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KfQ0KLnNfdGFiX2lubmVyew0KICAgIGRpc3BsYXk6YmxvY2sgIWltcG9ydGFudDsNCn0NCiNjb250YWluZXIgLmhpbnRfY29tbW9uX3Jlc3RvcHsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgbGVmdDogY2FsYyg0NXZ3IC0gNTAwcHgpOw0KICAgIG1hcmdpbi10b3A6IDI1cHg7DQp9DQouQUMuc3Atc2VwYXJhdG9yew0KICAgIHdpZHRoOiBhdXRvOw0KfQ0KLypzZWFyY2ggZW5naW5lIGp1bXAqLw0KI3Nlai1jb250YWluZXJ7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KICAgIG1hcmdpbi1sZWZ0OiAwOw0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCi5zX2Zvcm1fd3JhcHBlciB7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiN3cmFwcGVyICNzX3RhYnsNCiAgICBwYWRkaW5nLWxlZnQ6IDA7DQogICAgbWFyZ2luLWxlZnQ6IDA7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiN3cmFwcGVyICNjb250YWluZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsDQojd3JhcHBlciAjY29udGFpbmVyIC5oZWFkX251bXNfY29udF9vdXRlciAubnVtcyB7DQogICAgd2lkdGg6IDY5JTsNCiAgICBtYXJnaW4tbGVmdDogMTYlOw0KfQ0KZm9ybS5mbSAuc19pcHRfd3IuYmd7DQogICAgbWluLXdpZHRoOiBjYWxjKDM3LjV2dyAtIDE1MHB4KTsNCn0NCg0KLnJlc3VsdC1tb2xlY3VsZS5uZXctcG1kIHsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICBtaW4td2lkdGg6IDgwMHB4Ow0KICAgIHdpZHRoOiA0MCUgIWltcG9ydGFudDsNCiAgICBtYXJnaW4tdG9wOiA2cHg7DQogICAgcGFkZGluZy1sZWZ0OiAyMHB4Ow0KfQ0KDQoubmV3LXBtZCAjcnNfbmV3IHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCiAgICB3aWR0aDogY2FsYygxMDAlIC0gMjBweCk7DQogICAgcGFkZGluZzogMTBweCAwIDEwcHggMjBweDsNCn0NCi5yZXN1bHQtbW9sZWN1bGUgI3BhZ2UgPmRpdnsNCiAgICB3aWR0aDogdW5zZXQ7DQp9DQoNCi5uZXctcG1kICNyc19uZXcgdGFibGV7DQogICAgd2lkdGg6IDEwMCU7DQogICAgbWFyZ2luLXRvcDogMTJweDsNCn0NCg0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTkyMXB4KSB7DQogICAgI2hlYWQgLmhlYWRfd3JhcHBlcnsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgxNDBweCwwLDFweCk7DQogICAgfQ0KICAgIC53cmFwcGVyX25ldyAjc190YWIuc190YWIgLnNfdGFiX2lubmVyIHsNCiAgICAgICAgd2lkdGg6IDkwMHB4Ow0KICAgICAgICBwYWRkaW5nLWxlZnQ6IDI5NnB4Ow0KICAgIH0NCiAgICBmb3JtLmZtIC5zX2lwdF93ci5iZ3sNCiAgICAgICAgbWluLXdpZHRoOiBjYWxjKDM3LjV2dyAtIDE1MHB4KTsNCiAgICB9DQogICAgLmhlYWRfd3JhcHBlciAjdSB7DQogICAgICAgIHJpZ2h0OiAyMDBweDsNCiAgICB9DQp9DQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMzY2cHgpIGFuZCAobWF4LXdpZHRoOiAxOTIwcHgpIHsNCiAgICAud3JhcHBlcl9uZXcgLmhlYWRfd3JhcHBlciAjcmVzdWx0X2xvZ297DQogICAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7DQogICAgfQ0KfQ0K"},{"meta":{"name":"baiduTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduTwoPageStyle.css?t=25.012","ts":1640137274713,"mimetype":"text/css"},"source":"LyoqU3RvcmUgQmFpZHVUb3dQYWdlU3R5bGUqKi8NCiN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lciB7DQogICAgd2lkdGg6IGF1dG87DQp9DQpmb3JtLmZtew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB1bnNldDsNCn0NCiNzX3RhYiBiLCAjc190YWIgYSB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3dyYXBwZXIgI3NfdGFiew0KICAgIHBhZGRpbmctbGVmdDogMDsNCiAgICBtYXJnaW4tbGVmdDogMDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KfQ0KI3dyYXBwZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsDQojd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXMgew0KICAgIHdpZHRoOiA4MCU7DQogICAgbWFyZ2luLWxlZnQ6IDEwJTsNCn0NCiN3cmFwcGVyICAuaGVhZF9udW1zX2NvbnRfb3V0ZXIsDQouaGludF9jb21tb25fcmVzdG9wLA0KI2hlYWRlcl90b3BfYmFyIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgbGVmdDogMTAlOw0KICAgIHdpZHRoOiA4MCU7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0LCAjY29udGFpbmVyIC5yZXN1bHQtbW9sZWN1bGUgew0KICAgIG1hcmdpbjogMCBhdXRvICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldCAhaW1wb3J0YW50Ow0KfQ0KI3dyYXBwZXIgI2hlYWRlcl90b3BfYmFyew0KICAgIG1hcmdpbi1ib3R0b206IDBweDsNCn0NCmJvZHkgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjY29udGVudF9sZWZ0ew0KICAgIHdpZHRoOiA4MCU7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0ew0KICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlOw0KICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICJ4bWFpbiB4bWFpbiI7DQogICAgbWFyZ2luOiAwIGF1dG87DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIHBhZGRpbmctbGVmdDogNSU7DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIHdpZHRoOiA4MCU7DQogICAgbWFyZ2luLWxlZnQ6NyU7DQogICAgbWFyZ2luLWJvdHRvbTogMzBweDsNCn0NCmJvZHlbbmV3c10gI3dyYXBwZXIgI2NvbnRlbnRfbGVmdD5kaXY6bm90KFtjbGFzc10pOm5vdChbaWRdKXsNCiAgICBkaXNwbGF5OiBncmlkOw0KICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNTAlIDUwJTsNCiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAieG1haW4geG1haW4iOw0KfQ0KI3dyYXBwZXIgI2NvbnRlbnRfcmlnaHR7DQogICAgZGlzcGxheTpub25lICFpbXBvcnRhbnQ7DQp9DQojd3JhcHBlcl93cmFwcGVyICNjb250YWluZXIgI3Jzew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBtYXJnaW46IDAgYXV0bzsNCn0NCiN3cmFwcGVyICNwYWdlIHsNCiAgICBtaW4td2lkdGg6IDcxMHB4Ow0KICAgIGhlaWdodDogNDBweDsNCiAgICBsaW5lLWhlaWdodDogNDBweDsNCiAgICBwYWRkaW5nOiA1cHggMTBweDsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3dyYXBwZXIgI3BhZ2UgLnBhZ2UtaW5uZXJ7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KfQ0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQgLnJlc3VsdCwNCiN3cmFwcGVyICAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciB7DQogICAgd2lkdGg6IHVuc2V0ICFpbXBvcnRhbnQ7DQogICAgbWF4LXdpZHRoOiAxMDAlOw0KICAgIG1hcmdpbi1sZWZ0OiA1cHg7DQogICAgbWFyZ2luLXJpZ2h0OiAxNXB4Ow0KfQ0KDQojd3JhcHBlciAgI2NvbnRlbnRfbGVmdD4qOm5vdChbY2xhc3MqPSdyZXN1bHQnXSk6bm90KFtjbGFzcyo9J2MtZ3JvdXAtd3JhcHBlciddKXsNCglncmlkLWNvbHVtbi1zdGFydDogMTsNCiAgICBncmlkLWNvbHVtbi1lbmQ6IHhtYWluLWVuZDsNCn0NCi5jLWNvbnRhaW5lciBoMyBhew0KICAgIHotaW5kZXg6MTsNCn0NCi5BQy5zcC1zZXBhcmF0b3J7DQogICAgd2lkdGg6IGF1dG87DQp9DQovKnNlYXJjaCBlbmdpbmUganVtcCovDQojc2VqLWNvbnRhaW5lcnsNCiAgICBwYWRkaW5nLWxlZnQ6IDA7DQogICAgbWFyZ2luLWxlZnQ6IDA7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLnNfZm9ybV93cmFwcGVyIHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KfQ0KDQoucmVzdWx0LW1vbGVjdWxlLm5ldy1wbWQgew0KICAgIG1hcmdpbjogMCBhdXRvOw0KICAgIG1pbi13aWR0aDogODAwcHg7DQogICAgd2lkdGg6IDQwJSAhaW1wb3J0YW50Ow0KICAgIHBhZGRpbmctbGVmdDogMjBweDsNCn0NCg0KLnJlc3VsdC1tb2xlY3VsZSAjcGFnZSA+ZGl2ew0KICAgIHdpZHRoOiB1bnNldDsNCn0NCg0KLm5ldy1wbWQgI3JzX25ldyB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQogICAgd2lkdGg6IGNhbGMoMTAwJSAtIDIwcHgpOw0KICAgIHBhZGRpbmc6IDEwcHggMCAxMHB4IDIwcHg7DQp9DQoNCi5uZXctcG1kICNyc19uZXcgdGFibGV7DQogICAgd2lkdGg6IDEwMCU7DQogICAgbWFyZ2luLXRvcDogMTJweDsNCn0NCg0KI3dyYXBwZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsDQojd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXMgew0KICAgIHdpZHRoOiA4MCU7DQp9DQpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxNTAwcHgpIHsNCiAgICBmb3JtLmZtIC5zX2lwdF93ci5iZ3sNCiAgICAgICAgbWluLXdpZHRoOiA0NTBweA0KICAgIH0NCiAgICAud3JhcHBlcl9uZXcgLmhlYWRfd3JhcHBlciAjcmVzdWx0X2xvZ297DQogICAgICAgIG1hcmdpbi1sZWZ0OiAtMTcwcHg7DQogICAgfQ0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTkyMXB4KSB7DQogICAgI3NfdGFiLnNfdGFiIC5zX3RhYl9pbm5lciB7DQogICAgICAgIHdpZHRoOiA5MDBweDsNCiAgICB9DQogICAgZm9ybS5mbSAuc19pcHRfd3IuYmd7DQogICAgICAgIG1pbi13aWR0aDogOTAwcHgNCiAgICB9DQp9DQo="},{"meta":{"name":"baiduLiteStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduLiteStyle.css?t=25.01","ts":1640137274724,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleCommonStyle.css?t=25.01","ts":1640137274717,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleOnePageStyle.css?t=25.01","ts":1640137274720,"mimetype":"text/css"},"source":"LyoqU3RvcmUgR29vZ2xlVHdvUGFnZVN0eWxlKiovDQojc2VhcmNoICNyc28gew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBmbG9hdDogdW5zZXQ7DQogICAgd2lkdGg6IDgwMHB4Ow0KICAgIG1hcmdpbjogMCBhdXRvOw0KICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoOw0KICAgIGp1c3RpZnktaXRlbXM6IHN0cmV0Y2g7DQogICAgZ3JpZC1nYXA6IDIwcHg7DQp9DQojcnNvIC5qVW1rRmI6aG92ZXIgew0KICAgIG1hcmdpbi1ib3R0b206IDMwcHg7DQogICAgbWFyZ2luLWxlZnQ6IDIwcHg7DQp9DQojcnNvIC5new0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGhlaWdodDogMTAwJTsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIHBhZGRpbmc6IDBweCAyMHB4IDE1cHg7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQp9DQojcnNvPmRpdiB7DQogICAgd2lkdGg6IDEwMCU7DQp9DQouc2VhcmNoPiNpcmVzICNyc28+Lmd7DQogICAgbWF4LXdpZHRoOiB1bnNldDsNCn0NCiNyc28+LmcgfiBkaXY6bm90KC5nKXsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIG1hcmdpbi1ib3R0b206IDEwcHg7DQp9DQojbWFpbiAjcmNudHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KYm9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCwgYm9keSAjdG9wX25hdiwgYm9keSAjZmJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KfQ0KI3JzbyBnLXNjcm9sbGluZy1jYXJvdXNlbHsNCiAgICBtYXJnaW46IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KfQ0KLmNvbHsNCiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KfQ0KLmNvbCAjY2VudGVyX2NvbHsNCiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KICAgIG1hcmdpbi1sZWZ0OiB1bnNldCAhaW1wb3J0YW50Ow0KfQ0KLnNycCAuYmlnICN0c2Z7DQogICAgd2lkdGg6IDgzM3B4Ow0KfQ0KLyoqc2VhcmNoIGJveCBhbGlnbiBjZW50ZXIqKi8NCi5zcnAgZm9ybXsNCiAgICBtYXJnaW46IDAgYXV0bzsNCn0NCiN0b3BfbmF2ew0KICAgIG1pbi13aWR0aDogdW5zZXQ7DQp9DQovKip2aWRlbyBib3ggYWxpZ24gY2VudGVyKiovDQpnLXNlY3Rpb24td2l0aC1oZWFkZXJ7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KI2hkdGIgI2hkdGItbXNiew0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KI2hkdGIgI2hkdGItbXNiLXZpc3sNCiAgICBtYXJnaW4tbGVmdDogLTE2OXB4Ow0KfQ0KLkFDLnNwLXNlcGFyYXRvciB7DQogICAgbWFyZ2luLXRvcDogLTIwcHg7DQogICAgd2lkdGg6IDgwMHB4Ow0KICAgIG1hcmdpbi1sZWZ0OiBhdXRvOw0KICAgIG1hcmdpbi1yaWdodDogYXV0bzsNCn0NCi5GeExEcHsNCiAgICBwYWRkaW5nOiB1bnNldDsNCn0NCiNtYWluICNjbnQsICNjbnQgI2NlbnRlcl9jb2wsICNjbnQgI2Zvb3R7DQogICAgd2lkdGg6IGNhbGMoMzYuM3Z3ICsgNTI1cHgpOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxNDQwcHgpew0KICAgIC5STk5YZ2J7DQogICAgICAgIHdpZHRoOiA4MCUgIWltcG9ydGFudDsNCiAgICB9DQp9DQo="},{"meta":{"name":"googleTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleTwoPageStyle.css?t=25.01","ts":1640137274729,"mimetype":"text/css"},"source":"LyoqU3RvcmUgR29vZ2xlVHdvUGFnZVN0eWxlKiovDQojcnNvIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZmxvYXQ6IHVuc2V0Ow0KfQ0KI3JzbyAualVta0ZiOmhvdmVyIHsNCiAgICBtYXJnaW4tYm90dG9tOiAzMHB4Ow0KfQ0KI3JzbyAuZywgLnZrX2N7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgcGFkZGluZzogMTBweCAyMHB4IDE1cHg7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICB0cmFuc2l0aW9uOiBhbGwgMC4yNXMgY3ViaWMtYmV6aWVyKC4yMywxLC4zMiwxKSAwczsNCn0NCi5zZWFyY2g+I2lyZXMgI3JzbyAuZ3sNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI21haW4gI3JjbnQgI3Joc3sNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQojbWFpbiAjcmNudHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI21haW4gI2NudCwgI2NudCAjY2VudGVyX2NvbCwgI2NudCAjZm9vdHsNCiAgICB3aWR0aDogY2FsYyg1NHZ3ICsgMzYwcHgpOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KYm9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCwgYm9keSAjdG9wX25hdiwgYm9keSAjZmJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KfQ0KI3JzbyAuQ09Fb2lkew0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouY29sew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQp9DQouY29sICNjZW50ZXJfY29sew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLWxlZnQ6IHVuc2V0ICFpbXBvcnRhbnQ7DQp9DQouc3JnLCAjcnNvLCAjcnNvPmRpdnsNCglkaXNwbGF5OiBncmlkOw0KCWdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LG1pbm1heCg1MCUsMWZyKSk7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCiAgICBncmlkLWdhcDogMjBweCAhaW1wb3J0YW50Ow0KICAgIGp1c3RpZnktaXRlbXM6IHN0cmV0Y2g7DQogICAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7DQogICAgd2lkdGg6IDEwMCU7DQp9DQojcnNvPi5nIH4gZGl2Om5vdCguZyl7DQogICAgbWFyZ2luLWJvdHRvbTogMTBweDsNCn0NCi5BQy5zcC1zZXBhcmF0b3Igew0KICAgIG1hcmdpbi10b3A6IDEwcHg7DQogICAgbWFyZ2luLWxlZnQ6IGF1dG87DQogICAgbWFyZ2luLXJpZ2h0OiBhdXRvOw0KfQ0KLyoqc2VhcmNoIGJveCBhbGlnbiBjZW50ZXIqKi8NCi5zcnAgZm9ybXsNCiAgICBtYXJnaW46MCBhdXRvOw0KfQ0KZy1zZWN0aW9uLXdpdGgtaGVhZGVyew0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCiNoZHRiICNoZHRiLW1zYnsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICB3aWR0aDogMTAwJTsNCn0NCiNoZHRiICNoZHRiLW1zYi12aXN7DQogICAgbWFyZ2luLWxlZnQ6IC0xNjlweDsNCn0NCg=="},{"meta":{"name":"bingCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingCommonStyle.css?t=25.01","ts":1640137274744,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nQ29tbW9uU3R5bGUqLw0KYm9keSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsNCn0NCi5zaF9mYXZpY29uew0KICAgIG1hcmdpbi1sZWZ0OiAxNnB4Ow0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3QpIHsNCiAgICB3aWR0aDogNjcwcHg7DQogICAgcGFkZGluZzogMTJweCAyMHB4ICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMSk7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGEgew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBjb2xvcjogIzM0NzZkMjsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhLCAjYl9yZXN1bHRzIGgyIHN0cm9uZ3sNCiAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICBmb250LXNpemU6IG1lZGl1bTsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cz5saTpob3ZlciB7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjMpOw0KICAgIGJhY2tncm91bmQ6ICNGQ0ZDRkMgIWltcG9ydGFudDsNCiAgICBib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLW1vei1ib3gtc2hhZG93OiAwIDAgMXB4IGdyYXk7DQp9DQojYl9jb250ZW50ID4jYl9yZXN1bHRzIGxpOm5vdCgjbWZhX3Jvb3QpIGgyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KICAgIG1hcmdpbjogLTEycHggLTIwcHggMTBweCAtMjBweDsNCiAgICBwYWRkaW5nOiA4cHggMjBweCA1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwcHggMHB4Ow0KfQ0KDQphLCBhIHN0cm9uZyB7DQogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KfQ0KDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgYSBzdHJvbmcsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYSBzdHJvbmcgew0KICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCn0NCi5iX2FsZ286Zmlyc3QtY2hpbGQ6aG92ZXIgaDIgYXsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhOmhvdmVyOmFmdGVyLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6aG92ZXI6YWZ0ZXIgew0KICAgIGxlZnQ6IDA7DQogICAgd2lkdGg6IDEwMCU7DQogICAgLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICAtbW96LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIHRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGE6aG92ZXIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYTpob3ZlcnsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHMgYTphZnRlciwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOmFmdGVyIHsNCiAgICBjb250ZW50OiAiIjsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzNDc2ZDI7DQogICAgYm90dG9tOiAtMnB4Ow0KICAgIGxlZnQ6IDEwMCU7DQogICAgd2lkdGg6IDA7DQogICAgLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCiAgICAtbW96LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KICAgIHRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6dmlzaXRlZCwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQgc3Ryb25nLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGgyIGE6dmlzaXRlZCwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBoMiBhOnZpc2l0ZWQgc3Ryb25nIHsNCiAgICBjb2xvcjogIzY2MDA5OTsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCiNiX2NvbnRlbnQ+b2wjYl9jb250ZXh0ew0KICAgIGRpc3BsYXk6bm9uZTsNCn0NCmJvZHkgI2JfaGVhZGVyew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQojYl9jb250ZW50IC5iX3VuZGVyU2VhcmNoYm94ew0KICAgIG1hcmdpbi10b3A6IDEwcHg7DQp9DQojYl9oZWFkZXIgLmJfc2NvcGViYXJ7DQogICAgbWFyZ2luOiB1bnNldDsNCn0NCi8qc2VhcmNoIGVuZ2luZSBqdW1wKi8NCi50c2YtcD4ubG9nb2NvbnQsICNzZWotY29udGFpbmVyew0KICAgIG1hcmdpbi1yaWdodDogMzUwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLnRzZi1wPi5zZmliYmJjew0KICAgIG1hcmdpbi1yaWdodDogMzUwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLmJfc2VhcmNoYm94Rm9ybSAuc2FfdG17DQogICAgdGV4dC1hbGlnbjogbGVmdDsgLyogU2VhcmNoQm94IHRleHQgQ2VudGVyICovDQp9DQpib2R5ICNiX2hlYWRlciAjZXN0X3N3aXRjaHsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICBwYWRkaW5nLXJpZ2h0OiAxMCU7IC8qKlRPRE8qKiovDQp9DQpib2R5ICNlc3RfY246OmFmdGVyLCBib2R5ICNlc3RfZW46OmFmdGVyew0KICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xLDEuMykgcGVyc3BlY3RpdmUoLjVlbSkgcm90YXRlWCgwZGVnKTsNCiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4xLDEuMykgcGVyc3BlY3RpdmUoLjVlbSkgcm90YXRlWCgwZGVnKTsNCn0NCkBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpew0KICAgIGJvZHkgI2JfaGVhZGVyICNlc3Rfc3dpdGNoew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMS4ycmVtKTsNCiAgICB9DQp9DQovKiBTZWFyY2hJdG1lcyBCb3R0b20gdG8gVG9wIGFuaSAqLw0KI2JfY29udGVudHsNCiAgICBhbmltYXRpb24tbmFtZTogYW5pX2JvdHRvbVRvdG9wOw0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlOw0KfQ0KDQovKiBTZWFyY2hCYXIgTGVmdCB0byBSaWdodCBhbmkgKi8NCmJvZHkgI2JfaGVhZGVyIHsNCiAgICBhbmltYXRpb24tbmFtZTogYW5pX3RvcFRvYnV0dG9tOw0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCmJvZHl7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9oaWRlVG9TaG93Ow0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCi5BQy5zcC1zZXBhcmF0b3J7DQogICAgbWFyZ2luLXRvcDogLTE1cHg7DQp9DQpAa2V5ZnJhbWVzIGFuaV9sZWZ0VG9yaWdodCB7DQogICAgMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCi8qIGFuaSAqLw0KQGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3Agew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCkAtd2Via2l0LWtleWZyYW1lcyBhbmlfdG9wVG9idXR0b20gew0KICAgIDAlIHsNCiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCkAtd2Via2l0LWtleWZyYW1lcyBhbmlfaGlkZVRvU2hvdyB7DQogICAgMCUgew0KICAgICAgICBkaXNwbGF5Om5vbmU7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIGRpc3BsYXk6bm9uZTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgZGlzcGxheTpub25lOw0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCg=="},{"meta":{"name":"bingOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingOnePageStyle.css?t=25.01","ts":1640137274745,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nT25lUGFnZVN0eWxlKi8NCiNiX2NvbnRlbnQgYXNpZGV7DQogICAgZGlzcGxheTpub25lOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzew0KICAgIHdpZHRoOiA3M3Z3Ow0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIG1heC13aWR0aDogMTAwMHB4Ow0KfQ0KYm9keSAjYl9oZWFkZXJ7DQogICAgd2lkdGg6IDcydnc7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KYm9keSAjYl9jb250ZW50ew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgbWFyZ2luLWxlZnQ6IHVuc2V0Ow0KICAgIHBhZGRpbmctbGVmdDogdW5zZXQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCkgew0KICAgIHdpZHRoOjk4JTsNCn0NCg=="},{"meta":{"name":"bingTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingTwoPageStyle.css?t=25.01","ts":1640137274745,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nVHdvUGFnZVN0eWxlKi8NCiNjb250YWluZXIgI2NvbnRlbnRfbGVmdCAuaGl0X3RvcF9uZXcsDQojYl9jb250ZW50IGFzaWRlLCAjYl9yZXN1bHRzICNtZmFfcm9vdHsNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHN7DQogICAgd2lkdGg6IDczdnc7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsbWlubWF4KDUwJSwxZnIpKTsNCiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAieG1haW4geG1haW4iOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCkgew0KICAgIHdpZHRoOjk4JTsNCiAgICBtYXJnaW4tbGVmdDogMSU7DQp9DQojYl9yZXN1bHRzIC5iX2FsZ28gLmJfZGVlcCB1bHsNCiAgICB3aWR0aDogNTAlOw0KfQ0KI2JfbXNnLCAjYl9wYWd7DQogICAgZ3JpZC1jb2x1bW4tZW5kOiB4bWFpbi1lbmQ7DQogICAgZ3JpZC1jb2x1bW4tc3RhcnQ6IDE7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsNCn0NCmJvZHkgI2JfY29udGVudHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIG1hcmdpbi1sZWZ0OiB1bnNldDsNCiAgICBwYWRkaW5nLWxlZnQ6IHVuc2V0Ow0KfQ0KYm9keSAjYl9oZWFkZXJ7DQogICAgd2lkdGg6IDcydnc7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0K"},{"meta":{"name":"duckCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckCommonStyle.css?t=25.01","ts":1640137274747,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb0NvbW1vblN0eWxlKi8NCmJvZHkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQoucmVzdWx0X19pY29uIC5yZXN1bHRfX2ljb25fX2ltZywgLnJlc3VsdF9faWNvbiAucmVzdWx0X19pY29uIGltZ3sNCiAgICBkaXNwbGF5OiBub25lOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7DQogICAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIG1heC13aWR0aDogNjcwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCB7DQogICAgd2lkdGg6IDY3MHB4Ow0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMSk7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQp9DQouZGFyay1iZyAjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOw0KfQ0KLmRhcmstYmcgI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDU7DQp9DQouZGFyay1iZyAjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X190aXRsZSBhIHsNCiAgICBjb2xvcjogI0NDQ0NDQzsNCn0NCi5kYXJrLWJnICNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX3RpdGxlIGE6dmlzaXRlZCB7DQogICAgY29sb3I6ICNiNzY2M2U7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X190aXRsZSBhIHsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOw0KICAgIG1heC13aWR0aDogNjQwcHg7DQogICAgY29sb3I6ICMzNDc2ZDI7DQogICAgZm9udC1zaXplOiBzbWFsbGVyOw0KfQ0KDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X19ib2R5ew0KICAgIHBhZGRpbmc6IDEycHggMjBweCAhaW1wb3J0YW50Ow0KfQ0KDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3ZlciB7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjMpOw0KICAgIGJveC1zaGFkb3c6IDAgMCAxcHggZ3JleTsNCiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCAxcHggZ3JleTsNCiAgICAtbW96LWJveC1zaGFkb3c6IDAgMCAxcHggZ3JheTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KICAgIG1hcmdpbjogLTEycHggLTIwcHggMHB4IC0yMHB4Ow0KICAgIHBhZGRpbmc6IDhweCAyMHB4IDVweDsNCiAgICBib3JkZXItcmFkaXVzOiA1cHggNXB4IDBweCAwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6YWZ0ZXIgew0KICAgIGNvbnRlbnQ6ICIiOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzM0NzZkMjsNCiAgICBib3R0b206IDFweDsNCiAgICBsZWZ0OiAxMDAlOw0KICAgIHdpZHRoOiAwOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCwNCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCBzdHJvbmcgew0KICAgIGNvbG9yOiAjNjYwMDk5Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyLA0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCg0KLyogU2VhcmNoSXRtZXMgQm90dG9tIHRvIFRvcCBhbmkgKi8NCiNsaW5rc193cmFwcGVyICNsaW5rcyB7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9ib3R0b21Ub3RvcDsNCiAgICBhbmltYXRpb24tZHVyYXRpb246IC4zczsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlOw0KfQ0KDQovKiBTZWFyY2hCYXIgTGVmdCB0byBSaWdodCBhbmkgKi8NCiNoZWFkZXJfd3JhcHBlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9sZWZ0VG9yaWdodDsNCiAgICBhbmltYXRpb24tZHVyYXRpb246IC4zczsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCkBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0IHsNCiAgICAwJSB7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMzJweCk7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDMwJSB7DQogICAgICAgIG9wYWNpdHk6IDAuODsNCiAgICB9DQogICAgMTAwJSB7DQogICAgICAgIG9wYWNpdHk6IDE7DQogICAgfQ0KfQ0KLyogYW5pICovDQpAa2V5ZnJhbWVzIGFuaV9ib3R0b21Ub3RvcCB7DQogICAgMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMzJweCk7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDMwJSB7DQogICAgICAgIG9wYWNpdHk6IDAuODsNCiAgICB9DQogICAgMTAwJSB7DQogICAgICAgIG9wYWNpdHk6IDE7DQogICAgfQ0KfQ0K"},{"meta":{"name":"duckOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckOnePageStyle.css?t=25.01","ts":1640137274745,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb09uZVBhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsICNvcmdhbmljLW1vZHVsZSwgLnBpbm5lZC10by1ib3R0b217DQogICAgZGlzcGxheTogbm9uZTsNCn0NCi5qcy1yZXN1bHQtaGlkZGVuLWVsew0KICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCn0NCi5zaXRlLXdyYXBwZXIgI3dlYl9jb250ZW50X3dyYXBwZXIgLmN3IHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIG1heC13aWR0aDogdW5zZXQ7DQogICAgbWFyZ2luLWxlZnQ6IC0xNTBweDsNCn0NCg0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAuc2VhcmNoLWZpbHRlcnMtd3JhcCwNCiN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdlew0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQp9DQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciB7DQogICAgbWF4LXdpZHRoOiB1bnNldDsNCn0NCg0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgd2lkdGg6IDUwMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXJ7DQogICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbnsNCiAgICBmbG9hdDogdW5zZXQ7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"duckTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckTwoPageStyle.css?t=25.01","ts":1640137274749,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb1R3b1BhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsDQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhciwNCiNvcmdhbmljLW1vZHVsZSwNCi5waW5uZWQtdG8tYm90dG9tew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQouanMtcmVzdWx0LWhpZGRlbi1lbHsNCiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQp9DQouc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jdyB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnNlYXJjaC1maWx0ZXJzLXdyYXAsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWVzc2FnZXsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBncmlkOw0KfQ0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIgew0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwIHsNCiAgICB3aWR0aDogNTAwcHg7DQp9DQojbGlua3Nfd3JhcHBlcnsNCiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIGZsb2F0OiB1bnNldDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7DQogICAgbWluLXdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW46IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzew0KICAgIHdpZHRoOiA4MHZ3Ow0KICAgIC8qIFRoaXMgbWF5IGNhdXNlIFBhZ2UgZmFpbGVkICovDQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwJSA1MCU7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwew0KICAgIHdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tbW9yZSwgI2xpbmtzIC5yZXN1bHQtLXNlcHsNCiAgICBncmlkLWNvbHVtbi1zdGFydDogMTsNCiAgICBncmlkLWNvbHVtbi1lbmQ6IHhtYWluLWVuZDsNCiAgICB3aWR0aDogdW5zZXQgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwOw0KICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tc2Vwew0KICAgIG1hcmdpbi1ib3R0b206IDJlbTsNCn0NCi5ib2R5LS1zZXJwIC5mb290ZXJ7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBwYWRkaW5nLWxlZnQ6IHVuc2V0Ow0KfQ0K"},{"meta":{"name":"dogeCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeCommonStyle.css?t=25.01","ts":1640137274772,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZUNvbW1vblN0eWxlKi8NCmJvZHkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQoucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX2ljb257DQogICAgZGlzcGxheTogbm9uZTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyew0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbnsNCiAgICBtYXgtd2lkdGg6IDY3MHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgew0KICAgIHdpZHRoOiA2NzBweDsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIG1hcmdpbi10b3A6IDBweDsNCiAgICBtYXJnaW4tYm90dG9tOiAyNXB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjEpOw0KICAgIHRyYW5zaXRpb246IGFsbCAwLjI1cyBjdWJpYy1iZXppZXIoLjIzLDEsLjMyLDEpIDBzOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdGl0bGUgYSB7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsNCiAgICBtYXgtd2lkdGg6IDY0MHB4Ow0KICAgIGNvbG9yOiAjMzQ3NmQyOw0KICAgIGZvbnQtc2l6ZTogc21hbGxlcjsNCn0NCg0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fYm9keXsNCiAgICBwYWRkaW5nOiAxMnB4IDIwcHggIWltcG9ydGFudDsNCn0NCg0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXA6aG92ZXIgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4zKTsNCiAgICBib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLW1vei1ib3gtc2hhZG93OiAwIDAgMXB4IGdyYXk7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODsNCiAgICBtYXJnaW46IC0xMnB4IC0yMHB4IDBweCAtMjBweDsNCiAgICBwYWRkaW5nOiA4cHggMjBweCA1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwcHggMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTpob3ZlcjphZnRlciB7DQogICAgbGVmdDogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmFmdGVyIHsNCiAgICBjb250ZW50OiAiIjsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzNDc2ZDI7DQogICAgYm90dG9tOiAxcHg7DQogICAgbGVmdDogMTAwJTsNCiAgICB3aWR0aDogMDsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQsDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQgc3Ryb25nIHsNCiAgICBjb2xvcjogIzY2MDA5OTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciwNCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciB7DQogICAgbGVmdDogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQp9DQoNCi8qIFNlYXJjaEl0bWVzIEJvdHRvbSB0byBUb3AgYW5pICovDQojbGlua3Nfd3JhcHBlciAjbGlua3Mgew0KICAgIGFuaW1hdGlvbi1uYW1lOiBhbmlfYm90dG9tVG90b3A7DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuM3M7DQogICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTsNCn0NCg0KLyogU2VhcmNoQmFyIExlZnQgdG8gUmlnaHQgYW5pICovDQojaGVhZGVyX3dyYXBwZXIgLmhlYWRlcl9fc2VhcmNoLXdyYXAgew0KICAgIGFuaW1hdGlvbi1uYW1lOiBhbmlfbGVmdFRvcmlnaHQ7DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuM3M7DQogICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7DQp9DQouQUMuc3Atc2VwYXJhdG9yew0KICAgIG1hcmdpbi10b3A6IC0xNXB4Ow0KfQ0KQGtleWZyYW1lcyBhbmlfbGVmdFRvcmlnaHQgew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0zMnB4KTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMjAlIHsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgb3BhY2l0eTogMC44Ow0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQovKiBhbmkgKi8NCkBrZXlmcmFtZXMgYW5pX2JvdHRvbVRvdG9wIHsNCiAgICAwJSB7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzMnB4KTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMjAlIHsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgb3BhY2l0eTogMC44Ow0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQo="},{"meta":{"name":"dogeOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeOnePageStyle.css?t=25.01","ts":1640137274768,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZU9uZVBhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsICNvcmdhbmljLW1vZHVsZSwgLnBpbm5lZC10by1ib3R0b217DQogICAgZGlzcGxheTogbm9uZTsNCn0NCi5qcy1yZXN1bHQtaGlkZGVuLWVsew0KICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCn0NCi5zaXRlLXdyYXBwZXIgI3dlYl9jb250ZW50X3dyYXBwZXIgLmN3IHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMDBweCkgew0KICAgICNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIHsNCiAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgfQ0KfQ0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciwNCiN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1lc3NhZ2V7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZ3JpZDsNCn0NCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgd2lkdGg6IDUwMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXJ7DQogICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIG1heC13aWR0aDogODYwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"dogeTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeTwoPageStyle.css?t=25.01","ts":1640137274765,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZVR3b1BhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsDQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhciwNCiNvcmdhbmljLW1vZHVsZSwNCi5waW5uZWQtdG8tYm90dG9tew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQouanMtcmVzdWx0LWhpZGRlbi1lbHsNCiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQp9DQouc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jdyB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnNlYXJjaC1maWx0ZXJzLXdyYXAsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWVzc2FnZXsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBncmlkOw0KfQ0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIgew0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwIHsNCiAgICB3aWR0aDogNTAwcHg7DQp9DQojbGlua3Nfd3JhcHBlcnsNCiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIGZsb2F0OiB1bnNldDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7DQogICAgbWluLXdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW46IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzew0KICAgIHdpZHRoOiA4MHZ3Ow0KICAgIC8qIFRoaXMgbWF5IGNhdXNlIFBhZ2UgZmFpbGVkICovDQogICAgZGlzcGxheTogZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwJSA1MCU7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwew0KICAgIHdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW4tcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tbW9yZSwgI2xpbmtzIC5yZXN1bHQtLXNlcHsNCiAgICBncmlkLWNvbHVtbi1zdGFydDogMTsNCiAgICBncmlkLWNvbHVtbi1lbmQ6IHhtYWluLWVuZDsNCiAgICB3aWR0aDogdW5zZXQgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nOiAwOw0KICAgIHBhZGRpbmctcmlnaHQ6IDE1cHg7DQp9DQojbGlua3MgLnJlc3VsdC0tc2Vwew0KICAgIG1hcmdpbi1ib3R0b206IDJlbTsNCn0NCi5ib2R5LS1zZXJwIC5mb290ZXJ7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBwYWRkaW5nLWxlZnQ6IHVuc2V0Ow0KfQ0K"},{"meta":{"name":"HuYanStyle.css","url":"http://ibaidu.tujidu.com/newcss/HuYanStyle.css?t=25.01","ts":1640137274763,"mimetype":"text/css"},"source":"LyoqU3RvcmUgSHVZYW5TdHlsZSoqLw0KLyoqKioqQmFpZHUtSHVZYW5TdHlsZSoqKioqLw0KYm9keVtiYWlkdV0sDQojd3JhcHBlciAjaGVhZCwNCiN3cmFwcGVyICNzX3RhYiwNCmZvcm0uZm0gLnNfaXB0X3dyLmJnew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IGFydGljbGUsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciwNCiN3cmFwcGVyICNycywNCiN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IGRvdWJsZSAjQTJEN0Q0IDsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3A6aG92ZXIsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQ6aG92ZXIsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3A6aG92ZXIgYXJ0aWNsZXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQgaDMsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AgaDMsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciBoMywNCiN3cmFwcGVyICNycyAudHR7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQovKioqQmluZy1IdVlhblN0eWxlKioqKi8NCi5uYV9jbnQgLm53c19pdG0sDQoubndzX2l0bWIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCksDQpib2R5ICNiX2hlYWRlcnsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQUFBQUFBIDsNCiAgICBib3JkZXI6IDFweCBkb3VibGUgI0EyRDdENCA7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGxpOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHMgbGkgaDJ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQovKioqR29vZ2xlLUh1WWFuU3R5bGUqKioqLw0KYm9keVtnb29nbGVdew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmRGZEZkQ7DQp9DQojcnNvIC5nLCAuYmtXTWdkPi5nLA0KLmJrV01nZCBnLWlubmVyLWNhcmQsDQojcmhzY29sICNyaHMsDQojcmhzY29sICNyaHMgLmc+ZGl2LA0KLmMyeHpUYiAuZywNCi5ydVRjSWQgLmcsDQouZm0wNklmIC5nLA0KLmNVblFLZSAuZywNCi5IYW5RbWYgLmcsDQojcnNvIC5nLA0KI3JzbyAua3AtYmxrLA0KI3JzbyAuTUdxakssDQojcnNvPmRpdjpub3QoLmcpPip7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0FBQUFBQSA7DQogICAgYm9yZGVyOiAxcHggc29saWQgIzljZDJjZkFBOw0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCn0NCiNyc28gLmc6aG92ZXIsDQouYmtXTWdkPi5nOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyOiAxcHggZG91YmxlICM5Y2QyY2Y7DQp9DQouYmtXTWdkIC5nIGRpdi5yLA0KI3JzbyAuZyBoM3sNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkJCQkJCIDsNCn0NCi8qKipTb2dvdS1IdVlhblN0eWxlKioqKi8NCmJvZHlbc29nb3VdLCAjcGFnZWJhcl9jb250YWluZXIgYXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZkRmRGZEOw0KfQ0KI21haW4gLnJlc3VsdHM+ZGl2ew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICM5Y2QyY2ZBQTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojbWFpbiAucmVzdWx0cz5kaXY6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNDQ0NDQ0MgIWltcG9ydGFudDsNCiAgICBib3JkZXI6IDFweCBkb3VibGUgIzljZDJjZjsNCn0NCiNtYWluIC5yZXN1bHRzPmRpdiBoM3sNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkJCQkJCIDsNCn0NCi8qKipEdWNrX0RvZ2UtSHVZYW5TdHlsZSoqKiovDQpib2R5W2R1Y2tdLGJvZHlbZG9nZV17DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZEZkRmRDsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICM5Y2QyY2ZBQTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQ0NDQyAhaW1wb3J0YW50Ow0KICAgIGJvcmRlcjogMXB4IGRvdWJsZSAjOWNkMmNmOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQo="},{"meta":{"name":"SiteConfigRules.conf","url":"http://ibaidu.tujidu.com/newcss/SiteConfigRules.conf?t=25.01","ts":1640137274769,"mimetype":"text/plain"},"source":"b25saW5lREIgPSB7DQogICBiYWlkdTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDEsDQogICAgICAgTWFpblR5cGU6ICIjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciIsDQogICAgICAgU3R5cGVfTm9ybWFsOiAiaDMudD5hLCAuYy1jb250YWluZXIgYXJ0aWNsZSBhIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5jLXNob3d1cmwiLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNjb250ZW50X2xlZnQ+I2RvdWJsZT5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dLCNjb250ZW50X2xlZnQ+ZGl2W3NyY2lkXSAqW2NsYXNzfj10XSxbY2xhc3N+PW9wX2Jlc3RfYW5zd2VyX3F1ZXN0aW9uXSIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogJy8vZGl2W0BpZD0icGFnZSJdLy9hW2NvbnRhaW5zKHRleHQoKSwiw6TCuMKLw6TCuMKAw6nCocK1IildW0BocmVmXScsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiY3NzO2RpdiNjb250ZW50X2xlZnQgPiAqIiwNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7ZGl2I2NvbnRlbnRfbGVmdCIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJjc3M7I3BhZ2UiLA0KICAgICAgICAgICBzdHlsaXNoOiAiLmF1dG9wYWdlcml6ZV9wYWdlX2luZm8sIGRpdi5zcC1zZXBhcmF0b3Ige21hcmdpbi1ib3R0b206IDEwcHggIWltcG9ydGFudDt9LmMtaW1nLWJvcmRlcntkaXNwbGF5Om5vbmV9IiwNCiAgICAgICB9DQogICB9LA0KICAgc29nb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAyLA0KICAgICAgIE1haW5UeXBlOiAiI21haW4gLnJlc3VsdHM+ZGl2IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy5wdD5hLCBoMy52clRpdGxlPmEiLA0KICAgICAgIEZhdmljb25UeXBlOiAiY2l0ZVtpZCo9J2NhY2hlcmVzdWx0X2luZm9fJ10iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIi5yZXN1bHRzPmRpdiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vZGl2W0BpZD1cInBhZ2ViYXJfY29udGFpbmVyXCJdLy9hW0BpZD1cInNvZ291X25leHRcIl0iLA0KICAgICAgICAgICBwYWdlRWxlbWVudDogIi8vZGl2W0BjbGFzcz0ncmVzdWx0cyddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAY2xhc3M9J3Jlc3VsdHMnXSIsIDJdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKCdwYWdlYmFyX2NvbnRhaW5lcicpIg0KICAgICAgIH0NCiAgIH0sDQogICBoYW9zb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAzLA0KICAgICAgIE1haW5UeXBlOiAiLnJlcy1saXN0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICIucmVzLWxpc3QgaDM+YSIsDQogICAgICAgRmF2aWNvblR5cGU6ICJjaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIucmVzdWx0cz5kaXYiLA0KICAgICAgIEJsb2NrVHlwZTogImgzIGEiLA0KICAgICAgIHBhZ2VyOnsNCiAgICAgICAgICAgbmV4dExpbms6ICIvL2RpdltAaWQ9J3BhZ2UnXS8vYVt0ZXh0KCk9J8OkwrjCi8OkwrjCgMOpwqHCtT4nXSB8IGlkKCdzbmV4dCcpIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICIvL2RpdltAaWQ9J2NvbnRhaW5lciddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAaWQ9J2NvbnRhaW5lciddIiwgMl0sDQogICAgICAgICAgIHJlcGxhY2VFOiAiaWQoJ3BhZ2UnKSINCiAgICAgICB9DQogICB9LA0KICAgZ29vZ2xlOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNCwNCiAgICAgICBNYWluVHlwZTogIiNyc28gLmciLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmlVaDMwIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIjcnNvIC5nIGgzLC5feUU+ZGl2W2NsYXNzfj1fa2tdIGgzIiwNCiAgICAgICBCbG9ja1R5cGU6ICIucmM+ZGl2PmEsICNycywgI3JzbyAuZyBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAnaWQoInBubmV4dCIpIHwgaWQoIm5hdmJhciBuYXZjbnQgbmF2IikvL3RkW3NwYW5dL2ZvbGxvd2luZy1zaWJsaW5nOjp0ZFsxXS9hIHwgaWQoIm5uIikvcGFyZW50OjphJywNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICcvL2RpdltAaWQ9InJlcyJdJywNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7I3JlcyIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICcvL2RpdltAaWQ9Im5hdmNudCJdIHwgLy9kaXZbQGlkPSJyY250Il0vL2RpdltAcm9sZT0ibmF2aWdhdGlvbiJdJw0KICAgICAgIH0NCiAgIH0sDQogICBiaW5nOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNSwNCiAgICAgICBNYWluVHlwZTogIiNiX3Jlc3VsdHM+bGkiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmJfYXR0cmlidXRpb24+Y2l0ZSIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDIiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbnNdPmgyLCNiX3Jlc3VsdHM+bGlbY2xhc3N+PWJfYWxnb10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDIgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vYVtjb250YWlucyhAY2xhc3MsXCJzYl9wYWdOXCIpXSIsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiaWQoXCJiX3Jlc3VsdHNcIikvbGlbbm90KGNvbnRhaW5zKEBjbGFzcyxcImJfcGFnXCIpIG9yIGNvbnRhaW5zKEBjbGFzcyxcImJfYW5zIGJfdG9wXCIpKV0iLA0KICAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoXCJiX3Jlc3VsdHNcIikvbGlbQGNsYXNzPVwiYl9wYWdcIl0iLCAxXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJpZChcImJfcmVzdWx0c1wiKS8vbmF2W0Byb2xlPVwibmF2aWdhdGlvblwiXSIsDQogICAgICAgfQ0KICAgfSwNCiAgIGR1Y2s6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAxMCwNCiAgICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdXJsX19kb21haW4iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgyIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcyxcInNiX3BhZ05cIildIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZChcImJfcmVzdWx0c1wiKS9saVtub3QoY29udGFpbnMoQGNsYXNzLFwiYl9wYWdcIikgb3IgY29udGFpbnMoQGNsYXNzLFwiYl9hbnMgYl90b3BcIikpXSIsDQogICAgICAgICAgIEhUX2luc2VydDogWyJpZChcImJfcmVzdWx0c1wiKS9saVtAY2xhc3M9XCJiX3BhZ1wiXSIsIDFdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKFwiYl9yZXN1bHRzXCIpLy9uYXZbQHJvbGU9XCJuYXZpZ2F0aW9uXCJdIiwNCiAgICAgICB9DQogICB9LA0KICAgZG9nZTogew0KICAgICAgU2l0ZVR5cGVJRDogMTEsDQogICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X191cmxfX2RvbWFpbiIsDQogICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgIEJsb2NrVHlwZTogImgyIGEiLA0KICAgICAgcGFnZXI6ew0KICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcywgJ3Jlc3VsdC0tbW9yZScpXSIsDQogICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0c19saW5rc19kZWVwJyldIiwNCiAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoJ2xpbmtzX3dyYXBwZXInKS8vZGl2W0BpZD0nbGlua3MnXS9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldIiwgMV0sDQogICAgICAgICAgcmVwbGFjZUU6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldL2FbY29udGFpbnModGV4dCgpLCAnw6TCuMKLw6TCuMKAw6nCocK1JyldW0BocmVmXSIsDQogICAgICB9DQogICB9LA0KICAgbUJhaWR1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA2LA0KICAgICAgIE1haW5UeXBlOiAiI2JfcmVzdWx0cz5saSIsDQogICAgICAgRmF2aWNvblR5cGU6ICIuYl9hdHRyaWJ1dGlvbj5jaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICAgQ291bnRlclR5cGU6ICIjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2Fuc10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiwjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2FsZ29dPmgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgIH0sDQogICB6aGlodTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDcsDQogICB9LA0KICAgYmFpZHVfeHVlc2h1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA4LA0KICAgICAgIE1haW5UeXBlOiAiI2NvbnRlbnRfbGVmdCAucmVzdWx0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy50PmEsICNyZXN1bHRzIC5jLWNvbnRhaW5lcj4uYy1ibG9ja2EiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdC1vcCwgLmMtc2hvd3VybCIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDMiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2NvbnRlbnRfbGVmdD4jZG91YmxlPmRpdltzcmNpZF0gKltjbGFzc349dF0sW2NsYXNzfj1vcF9iZXN0X2Fuc3dlcl9xdWVzdGlvbl0sI2NvbnRlbnRfbGVmdD5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMyBhIiwNCiAgIH0sDQogICBvdGhlcjogew0KICAgICAgIFNpdGVUeXBlSUQ6IDksDQogICB9DQp9DQo="}],"requires":[{"meta":{"name":"vue.min.js","url":"https://cdn.staticfile.org/vue/2.6.11/vue.min.js","ts":1640137275815,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"vue.min.js","url":"https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.min.js","ts":1640137275233,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"less.js","url":"https://cdn.jsdelivr.net/npm/less_browser_fix@4.1.2/dist/less.js","ts":1640137275370,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"md5-wasm.min.js","url":"https://cdn.staticfile.org/md5-wasm/1.0.2/md5-wasm.min.js","ts":1640137275769,"mimetype":"text/javascript"},"source":""}]},{"name":"购物党比价工具【精简优化版】","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["open.lesiclub.cn","gm.ntaow.com","gwdang.com","alicdn.com"],"orig_excludes":[],"orig_includes":["http*://item.taobao.com/*","http*://cart.taobao.com/*","http*://s.taobao.com/*","http*://detail.tmall.com/item.htm*","http*://detail.liangxinyao.com/item.htm*","http*://chaoshi.detail.tmall.com/item.htm*","http*://item.jd.com/*","https://item.jd.hk/*","https://detail.tmall.hk/*","https://*.suning.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1603963275161,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/397204-%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E7%B2%BE%E7%AE%80%E4%BC%98%E5%8C%96%E7%89%88/code/%E8%B4%AD%E7%89%A9%E5%85%9A%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7%E3%80%90%E7%B2%BE%E7%AE%80%E4%BC%98%E5%8C%96%E7%89%88%E3%80%91.user.js","uuid":"5b4b7f8b-2197-435b-b7b3-4195995bf0aa","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDotK3nianlhZrmr5Tku7flt6XlhbfjgJDnsr7nroDkvJjljJbniYjjgJEKLy8gQG5hbWVzcGFjZSAgICBub25lCi8vIEB2ZXJzaW9uICAgICAgMi4xCi8vIEBkZXNjcmlwdGlvbiAg44CQ57K+566A54mI44CR6LSt54mp5YWa77yM5LyY5YyW5LqG6aG16Z2i55qE6YOo5YiG5YWD57Sg77yM5YeP5bCR6aG16Z2i5by556qX5ZKM5pi+56S677yM5L+d55WZ6I+c5Y2V5qCP44CC6LSt54mp5YWa5o+Q5L6b5reY5a6dL+S6rOS4nC/kuprpqazpgIov5b2T5b2TL+iLj+WugS/nrYnnmb7lrrbllYbln47nmoTmr5Tku7fns7vnu5/vvIzog73orqnkvaDku6XovoPkvJjmg6DnmoTmlrnlvI/otK3kubDliLDkvaDnp7Dlv4PlpoLmhI/nmoTllYblk4HvvIzmj5DkvpvllYblk4HnmoTljoblj7Lku7fmoLzmg4XlhrXvvIzlpJrnp43nm7jkvLzllYblk4HmjqjojZDvvIzlkIzmrL7otK3kubDvvIzpmY3ku7fmj5DphpLjgIJQU++8muW4puacieaOqOW5v++8jOS7i+aEj+WLv+ijhQovLyBAYXV0aG9yICAgICAgIEFDCi8vIEBhbnRpZmVhdHVyZSByZWZlcnJhbC1saW5rIOWQq+aciei/lOWIqemTvuaOpQovLyBAaW5jbHVkZSAgICAgIGh0dHAqOi8vaXRlbS50YW9iYW8uY29tLyoKLy8gQGluY2x1ZGUgICAgICBodHRwKjovL2NhcnQudGFvYmFvLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cCo6Ly9zLnRhb2Jhby5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHAqOi8vZGV0YWlsLnRtYWxsLmNvbS9pdGVtLmh0bSoKLy8gQGluY2x1ZGUgICAgICBodHRwKjovL2RldGFpbC5saWFuZ3hpbnlhby5jb20vaXRlbS5odG0qCi8vIEBpbmNsdWRlICAgICAgaHR0cCo6Ly9jaGFvc2hpLmRldGFpbC50bWFsbC5jb20vaXRlbS5odG0qCi8vIEBpbmNsdWRlICAgICAgaHR0cCo6Ly9pdGVtLmpkLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly9pdGVtLmpkLmhrLyoKLy8gQGluY2x1ZGUgICAgICBodHRwczovL2RldGFpbC50bWFsbC5oay8qCi8vIEBpbmNsdWRlICAgICAgaHR0cHM6Ly8qLnN1bmluZy5jb20vKgovLyBAbm90ZQkgICAgIFYxLjYg5pu05o2i5rqQ5Zyw5Z2A5Li6U3RhdGljRmlsZQovLyBAbm90ZQkgICAgIFYxLjQg5pu05o2i5rqQ5Zyw5Z2A5Li6NzXlm6LlnLDlnYAKLy8gQG5vdGUJICAgICBWMS4yIOS/ruWkjemDqOWIhuWkmuS9meeahOmakOiXj+aXoOaViOeahOmXrumimCDkv67lpI3kuYvliY3lv5jkuobjgJDmlrDlop7oh6rlt7HnmoTpmYTliqDohJrmnKwg5aaC5p6c5LuL5oSP55qE5Y+v5Lul5Yig6Zmk5pys6ISa5pys44CR44CQ5paw5aKe6Ieq5bex55qE6ZmE5Yqg6ISa5pysIOWmguaenOS7i+aEj+eahOWPr+S7peWIoOmZpOacrOiEmuacrOOAkeOAkOaWsOWinuiHquW3seeahOmZhOWKoOiEmuacrCDlpoLmnpzku4vmhI/nmoTlj6/ku6XliKDpmaTmnKzohJrmnKzjgJEKLy8gQGdyYW50ICAgICAgICBHTV94bWxodHRwUmVxdWVzdAovLyBAY29ubmVjdCAgICAgIG9wZW4ubGVzaWNsdWIuY24KLy8gQGNvbm5lY3QgICAgICBnbS5udGFvdy5jb20KLy8gQGNvbm5lY3QgICAgICBnd2RhbmcuY29tCi8vIEBjb25uZWN0ICAgICAgYWxpY2RuLmNvbQovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBsaWNlbnNlICAgICAgR1BMLTMuMC1vbmx5Ci8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9ncmVhc3lmb3JrLm9yZy9zY3JpcHRzLzM0NjA2LWFjLSVFNyU4QiVBQyVFNSVBRSVCNi0lRTYlQjclOTglRTUlQUUlOUQlRTUlQTQlQTklRTclOEMlQUIlRTQlQkMlOTglRTYlODMlQTAlRTUlODglQjglRTYlOUYlQTUlRTglQUYlQTIlRTklQTIlODYlRTUlOEYlOTYtJUU1JUE0JUE3JUU5JUEyJTlEJUU0JUJDJTk4JUU2JTgzJUEwJUU1JTg4JUI4LTEwMCVFNSU4NSU4MyVFOCVCNCVBRCVFNyU4OSVBOSVFNyVBNSU5RSVFNSU4OCVCOC0lRTclOUMlODElRTklOTIlQjElRTglQjQlQUQlRTclODklQTktJUU5JUEyJTg2JUU1JTg4JUI4JUU4JUI0JUFEJUU0JUI5JUIwJUU2JTlCJUI0JUU0JUJDJTk4JUU2JTgzJUEwLSVFNSVCOSVCMyVFNSU5RCU4NyVFNCVCQyU5OCVFNiU4MyVBMDIwL2NvZGUvQUMtJUU3JThCJUFDJUU1JUFFJUI2LSVFNiVCNyU5OCVFNSVBRSU5RCVFNSVBNCVBOSVFNyU4QyVBQiVFNCVCQyU5OCVFNiU4MyVBMCVFNSU4OCVCOCVFNiU5RiVBNSVFOCVBRiVBMiVFOSVBMiU4NiVFNSU4RiU5NiwlRTUlQTQlQTclRTklQTIlOUQlRTQlQkMlOTglRTYlODMlQTAlRTUlODglQjgsJUUzJTgwJTkwMTAwJUU1JTg1JTgzJUU4JUI0JUFEJUU3JTg5JUE5JUU3JUE1JTlFJUU1JTg4JUI4JUUzJTgwJTkxLCVFNyU5QyU4MSVFOSU5MiVCMSVFOCVCNCVBRCVFNyU4OSVBOSwlRTklQTIlODYlRTUlODglQjglRTglQjQlQUQlRTQlQjklQjAlRTYlOUIlQjQlRTQlQkMlOTglRTYlODMlQTAsJUU1JUI5JUIzJUU1JTlEJTg3JUU0JUJDJTk4JUU2JTgzJUEwMjAlMjUudXNlci5qcwovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uICgpIHsKCWNvbnN0IGdvb2RJZCA9IGdldFVybEF0dHJpYnV0ZSgiaWQiKQoJLy8g5o+Q5Y+WdXJs5Lit55qE5Y+C5pWwCglmdW5jdGlvbiBnZXRVcmxBdHRyaWJ1dGUoYXR0cmlidXRlLCBuZWVkRGVjb2RlKSB7CgkJY29uc3Qgc2VhcmNoVmFsdWUgPSAod2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkgKyAiIikuc3BsaXQoIiYiKTsKCQlmb3IgKGxldCBpID0gMDsgaSA8IHNlYXJjaFZhbHVlLmxlbmd0aDsgaSsrKSB7CgkJCWNvbnN0IGtleV92YWx1ZSA9IHNlYXJjaFZhbHVlW2ldLnNwbGl0KCI9Iik7CgkJCWNvbnN0IHJlZyA9IG5ldyBSZWdFeHAoIl4iICsgYXR0cmlidXRlICsgIiQiKTsKCQkJaWYgKHJlZy50ZXN0KGtleV92YWx1ZVswXSkpIHsKCQkJCWNvbnN0IHNlYXJjaFdvcmRzID0ga2V5X3ZhbHVlWzFdOwoJCQkJcmV0dXJuIG5lZWREZWNvZGUgPyBkZWNvZGVVUklDb21wb25lbnQoc2VhcmNoV29yZHMpIDogc2VhcmNoV29yZHM7CgkJCX0KCQl9Cgl9CglmdW5jdGlvbiBzYWZlV2FpdEZ1bmMoc2VsZWN0b3IsIGNhbGxiYWNrRnVuYywgdGltZSwgbm90Q2xlYXIpIHsKCQl0aW1lID0gdGltZSB8fCAyMDA7CgkJbm90Q2xlYXIgPSBub3RDbGVhciB8fCBmYWxzZTsKCQljb25zdCBkb0NsZWFyID0gIW5vdENsZWFyOwoJCWNvbnN0IGlkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewoJCQlsZXQgc2VsZWN0UmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7CgkJCWlmICgodHlwZW9mIChzZWxlY3RvcikgPT0gInN0cmluZyIgJiYgc2VsZWN0UmVzLmxlbmd0aCA+IDApKSB7CgkJCQlpZiAoZG9DbGVhcikgY2xlYXJJbnRlcnZhbChpZCk7CgkJCQlpZiAoc2VsZWN0UmVzLmxlbmd0aCA9PT0gMSkgc2VsZWN0UmVzID0gc2VsZWN0UmVzWzBdOwoJCQkJY2FsbGJhY2tGdW5jKHNlbGVjdFJlcyk7CgkJCX0gZWxzZSBpZiAoKHR5cGVvZiAoc2VsZWN0b3IpID09ICJmdW5jdGlvbiIgJiYgc2VsZWN0b3IoKS5sZW5ndGggPiAwKSkgewoJCQkJaWYgKGRvQ2xlYXIpIGNsZWFySW50ZXJ2YWwoaWQpOwoJCQkJY2FsbGJhY2tGdW5jKHNlbGVjdG9yKClbMF0pOwoJCQl9CgkJfSwgdGltZSk7Cgl9CglmdW5jdGlvbiBhZGRTdHlsZShjc3MpIHsgLy/mt7vliqBDU1PnmoTku6PnoIEtLWNvcHnnmoQtLeazqOaEj+mHjOmdouW/hemhu+aYr+WPjOW8leWPtwoJCXZhciBwaSA9IGRvY3VtZW50LmNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbigKCQkJJ3htbC1zdHlsZXNoZWV0JywKCQkJJ3R5cGU9InRleHQvY3NzIiBocmVmPSJkYXRhOnRleHQvY3NzO3V0Zi04LCcgKyBlbmNvZGVVUklDb21wb25lbnQoY3NzKSArICciJwoJCSk7CgkJcmV0dXJuIGRvY3VtZW50Lmluc2VydEJlZm9yZShwaSwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTsKCX0KCWZ1bmN0aW9uIGFkZFNjcmlwdChzcmMpIHsKCQlsZXQgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwoJCW5vZGUuc3JjID0gc3JjOwoJCW5vZGUuY2hhcnNldCA9ICJVVEYtOCI7CgkJZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChub2RlKTsKCX0KCglmdW5jdGlvbiBpbml0R1dEKCkgewoJCWxldCBleHROYW1lID0gImd3ZHYxLmpzIjsKCQlsZXQgaGlkZVN0eWxlID0gIiI7CgkJaWYgKGxvY2F0aW9uLmhvc3QgPT09ICJqZC5jb20iKSB7CgkJCWV4dE5hbWUgPSAiZ3dkdjIuanMiOwoJCQloaWRlU3R5bGUgPSAiLmd3ZC1taW5pYmFyLWJnLCAjZmF2b3JfYm94e2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O30iICsKCQkJCSIjZ3dkYW5nX21haW4gPiBhLmd3ZC10b3BiYXItbG9nbywgI2d3ZGFuZ19tYWluID4gZGl2Lmd3ZC10b3BiYXItcmlnaHR7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fSI7CgkJfSBlbHNlIHsKCQkJaGlkZVN0eWxlID0gIiNnd2RhbmctbWFpbj5kaXYubG9nbywgI2d3ZGFuZy1mZWVkLWNsb3NlLCAjZ3dkYW5nLWhpc3RvcnksICNjb3Vwb25fYm94LCAjYmpkX3lpZmVucWlhbl9kZXRhaWx7ZGlzcGxheTpub25lICFpbXBvcnRhbnR9IiArCgkJCQkiI2Zhdm9yX2JveHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9I3RiLWFtb3VudCAudGItY291bnR7Zm9udC13ZWlnaHQ6Ym9sZDttYXJnaW46MCA1cHg7fSI7CgkJfQoJCS8vIGFkZFNjcmlwdCgiaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2NoZW56ZWxpbjAxL3dlY2hhdHByb3h5L3B1YmxpYy8iICsgZXh0TmFtZSk7CgkJYWRkU2NyaXB0KCJodHRwczovL2Jyb3dzZXIuZ3dkYW5nLmNvbS9nZXQuanM/Zj0vanMvZ3dkYW5nX2V4dGVuc2lvbi5qcyIpOwoJCWFkZFN0eWxlKGhpZGVTdHlsZSk7Cgl9CgoJZnVuY3Rpb24gcmVhbFRpbWVTaG93VEJUaXRsZSgpewoJCWFkZFN0eWxlKCIudHNob3AtcHNtLXNob3AtaGVhZGVyLC5hYy10b3BoaWRle3Bvc2l0aW9uOiBhYnNvbHV0ZTt0b3A6IC01MDBweDt9LmFjLXRvcHNob3d7cG9zaXRpb246cmVsYXRpdmU7dHJhbnNpdGlvbjogYWxsIDFzIGN1YmljLWJlemllcigwLjQsIDAsIDEsIDEpO3RyYW5zZm9ybTogdHJhbnNsYXRlWSg1MDBweCk7fSIpOwoJCWxldCB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7CgkJCWxldCBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnRzaG9wLXBzbS1zaG9wLWhlYWRlciIpOwoJCQlsZXQgYWRkQ2xhc3NOYW1lID0gImFjLXRvcGhpZGUiOwoJCQlpZihub2RlID09IG51bGwpIHJldHVybjsKCQkJLy8g5aaC5p6c5aSn5LqOMjAw77yM6K+05piO5qC35byP5pyq5Yqg6L29CgkJCWlmKG5vZGUub2Zmc2V0SGVpZ2h0ID4gMjAwICYmICFub2RlLmNsYXNzTGlzdC5jb250YWlucyhhZGRDbGFzc05hbWUpKXsKCQkJCW5vZGUuY2xhc3NMaXN0LmFkZChhZGRDbGFzc05hbWUpOwoJCQl9CgkJCWlmKG5vZGUub2Zmc2V0SGVpZ2h0IDw9IDIwMCl7CgkJCQlpZihub2RlLmNsYXNzTGlzdC5jb250YWlucyhhZGRDbGFzc05hbWUpKXsKCQkJCQlub2RlLmNsYXNzTGlzdC5hZGQoImFjLXRvcHNob3ciKTsKCQkJCQljbGVhckludGVydmFsKHRpbWVyKTsKCQkJCX1lbHNlewoJCQkJCWNsZWFySW50ZXJ2YWwodGltZXIpOwoJCQkJCS8vIOa4heepuumZhOWKoOagt+W8jwoJCQkJCWFkZFN0eWxlKCIudHNob3AtcHNtLXNob3AtaGVhZGVye3Bvc2l0aW9uOiByZWxhdGl2ZTt0b3A6IHVuc2V0O30iKTsKCQkJCX0KCQkJfQoJCX0sMTUwKTsKCX0KCglmdW5jdGlvbiBpbml0KCkgewoJCWZ1bmN0aW9uIGRlYWxSZXMoanNvbil7CgkJCXZhciBhbGxIaWRlID0gIiI7CgkJCXZhciB5ZWFySGlkZSA9ICIiOwoJCQl2YXIgbW9udGhIaWRlID0gIiI7CgkJCWlmIChqc29uLnN0b3JlWzBdLmFsbF9saW5lID09IG51bGwpIHsKCQkJCWFsbEhpZGUgPSAic3R5bGU9J2Rpc3BsYXk6IG5vbmU7JyI7CgkJCX0KCQkJaWYgKGpzb24uc3RvcmVbMF0ueWVhcl9saW5lID09IG51bGwpIHsKCQkJCXllYXJIaWRlID0gInN0eWxlPSdkaXNwbGF5OiBub25lOyciOwoJCQl9CgkJCWlmIChqc29uLnN0b3JlWzBdLm1vbnRoX2xpbmUgPT0gbnVsbCkgewoJCQkJbW9udGhIaWRlID0gInN0eWxlPSdkaXNwbGF5OiBub25lOyciOwoJCQl9CgkJCXZhciBkZGF0YTsKCQkJaWYgKGpzb24uc3RvcmUubGVuZ3RoID4gMSkgewoJCQkJZGRhdGEgPSBqc29uLnN0b3JlWzFdLmFsbF9saW5lOwoJCQl9CgoJCQl2YXIgZGRhdGE7CgkJCWlmIChqc29uLnN0b3JlLmxlbmd0aCA+IDEpIHsKCQkJCWRkYXRhID0ganNvbi5zdG9yZVsxXS5hbGxfbGluZTsKCQkJfQoKCQkJbGV0IHBkYXRhID0ganNvbi5zdG9yZVswXS5hbGxfbGluZTsKCQkJbGV0IHBiZWdpblRpbWUgPSBqc29uLnN0b3JlWzBdLmFsbF9saW5lX2JlZ2luX3RpbWU7CgkJCWxldCBwaWNkYXRhID0gZGRhdGE7CgoJCQl2YXIgaG1sID0gIjxkaXYgICBzdHlsZT0nbWFyZ2luLWxlZnQ6NTBweDttYXJnaW4tdG9wOjIwcHg7ZGlzcGxheTogYmxvY2s7Jz48YSBjbGFzcz0nYWN0aXZlLXBsb3QgdHlwZS1wbG90JyAiICsgYWxsSGlkZSArICIgaWQ9J3Bsb3RBbGwnPuWFqOmDqDwvYT48YSBjbGFzcz0ndHlwZS1wbG90JyAiICsgeWVhckhpZGUgKyAiIGlkPSdwbG90WWVhcic+5bm057q/PC9hPjxhIGNsYXNzPSd0eXBlLXBsb3QnICIgKyBtb250aEhpZGUgKyAiIGlkPSdwbG90TW9udGgnPuaciOe6vzwvYT4iOwoJCQlobWwgPSBobWwgKyAiPGRpdiBpZD0naGlzcHJpY2UnIHN0eWxlPSd3aWR0aDogNzIwcHg7aGVpZ2h0OjM1MHB4O21hcmdpbjogMDtwYWRkaW5nOiAwJz48L2Rpdj4iOwoKCQkJcmV0dXJuIGAKPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2VjaGFydHMvNC44LjAvZWNoYXJ0cy5taW4uanMiPjwvc2NyaXB0Pgoke2htbH0KPHNjcmlwdD4KdmFyIHBDaGFydCA9IGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGlzcHJpY2UnKSk7CnNob3dQcmljZSgpOwpmdW5jdGlvbiBzaG93UHJpY2UoKSB7CnZhciBkYXRhID1bJHtwZGF0YX1dOwp2YXIgYmVnaW5UaW1lID0ke3BiZWdpblRpbWV9Owp2YXIgcGljZGF0YSA9WyR7cGljZGF0YX1dOwp2YXIgZHQgPSBbXTsKZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CnZhciBkID0gbmV3IERhdGUoYmVnaW5UaW1lKTsKZC5zZXREYXRlKGQuZ2V0RGF0ZSgpICsgaSk7CmR0LnB1c2goZC50b0xvY2FsZURhdGVTdHJpbmcoKSk7Cn0KIAovLyDmjIflrprlm77ooajnmoTphY3nva7pobnlkozmlbDmja4KdmFyIG9wdGlvbiA9IHsKIAp0b29sdGlwOiB7CmVudGVyYWJsZTogdHJ1ZSwKdHJpZ2dlcjogJ2F4aXMnLApmb3JtYXR0ZXI6IGZ1bmN0aW9uIChwYXJhbXMpIHsKIApyZXR1cm4gcGFyYW1zWzBdLmF4aXNWYWx1ZSArICI8YnIvPiIgKyBwYXJhbXNbMF0uZGF0YTsKfSwKYXhpc1BvaW50ZXI6IHsKYW5pbWF0aW9uOiBmYWxzZQp9Cn0sCmxlZ2VuZDogewpkYXRhOiBbJ+mhtemdouS7tycsICfliLDmiYvku7cnXSwKc2VsZWN0ZWQ6IHsKJ+mhtemdouS7tyc6IHRydWUsCifliLDmiYvku7cnOiB0cnVlCiAKfQogCn0sCnhBeGlzOiB7CmRhdGE6IGR0LApzcGxpdEFyZWE6IHsgc2hvdzogZmFsc2UgfSwKYm91bmRhcnlHYXA6IGZhbHNlLApzcGxpdExpbmU6IHsKc2hvdzogdHJ1ZSwKIAp9LApheGlzTGFiZWw6IHsKIAppbnRlcnZhbDogcGFyc2VJbnQoKGRhdGEubGVuZ3RoKSAvIDEwKSwKZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsdWUpIHsKIApyZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDUpOwp9Cn0sCn0sCnlBeGlzOiB7CnNwbGl0QXJlYTogeyBzaG93OiBmYWxzZSB9LApzcGxpdExpbmU6IHsKc2hvdzogdHJ1ZSwKIAp9Cn0sCnNlcmllczogW3sKbmFtZTogJ+mhtemdouS7tycsCnR5cGU6ICdsaW5lJywKZGF0YTogZGF0YSwKc2hvd1N5bWJvbDogZmFsc2UsCmhvdmVyQW5pbWF0aW9uOiBmYWxzZSwKbWFya1BvaW50OiB7CnN5bWJvbDogJ3BpbicsCiAKZGF0YTogWwp7IHR5cGU6ICdtYXgnLCBuYW1lOiAn5pyA5aSn5YC8JyB9LAp7IHR5cGU6ICdtaW4nLCBuYW1lOiAn5pyA5bCP5YC8JyB9Cl0KfSwKbWFya0xpbmU6IHsKZGF0YTogWwp7IHR5cGU6ICdhdmVyYWdlJywgbmFtZTogJ+W5s+Wdh+WAvCcgfQpdCn0KfSwKewpuYW1lOiAn5Yiw5omL5Lu3JywKdHlwZTogJ2xpbmUnLApkYXRhOiBwaWNkYXRhLApzaG93U3ltYm9sOiBmYWxzZSwKaG92ZXJBbmltYXRpb246IGZhbHNlLAptYXJrUG9pbnQ6IHsKc3ltYm9sOiAncGluJywKIApkYXRhOiBbCnsgdHlwZTogJ21heCcsIG5hbWU6ICfmnIDlpKflgLwnIH0sCnsgdHlwZTogJ21pbicsIG5hbWU6ICfmnIDlsI/lgLwnIH0KXQp9LAptYXJrTGluZTogewpkYXRhOiBbCnsgdHlwZTogJ2F2ZXJhZ2UnLCBuYW1lOiAn5bmz5Z2H5YC8JyB9Cl0KfQp9Cl0KfTsKIAogCnBDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsKfTsKPC9zY3JpcHQ+CmAKCQl9CgkJZnVuY3Rpb24gb3BXaW5kKHB1cmwsIHBpc3dlYiwgcG5hbWUsIHBobWwpIHsKCQkJdmFyIHVybCA9IHB1cmw7CgkJCXZhciBuYW1lID0gcG5hbWU7CgkJCXZhciBpV2lkdGggPSA4MDA7CgkJCXZhciBpSGVpZ2h0ID0gNDUwOwoJCQl2YXIgaVRvcCA9ICh3aW5kb3cuc2NyZWVuLmhlaWdodCAtIDMwIC0gaUhlaWdodCkgLyAyOwoJCQl2YXIgaUxlZnQgPSAod2luZG93LnNjcmVlbi53aWR0aCAtIDEwIC0gaVdpZHRoKSAvIDI7CgkJCS8vIHZhciBPcGVuV2luZG93ID0gd2luZG93Lm9wZW4odXJsLCBuYW1lLCAnaGVpZ2h0PScgKyBpSGVpZ2h0ICsgJywsaW5uZXJIZWlnaHQ9JyArIGlIZWlnaHQgKyAnLHdpZHRoPScgKyBpV2lkdGggKyAnLGlubmVyV2lkdGg9JyArIGlXaWR0aCArICcsdG9wPScgKyBpVG9wICsgJyxsZWZ0PScgKyBpTGVmdCArICcsdG9vbGJhcj1ubyxtZW51YmFyPW5vLHNjcm9sbGJhcnM9YXV0byxyZXNpemVhYmxlPW5vLGxvY2F0aW9uPW5vLHN0YXR1cz1ubycpOwoJCQkvLyBpZiAocGlzd2ViID09IDApIHsKCQkJLy8gCU9wZW5XaW5kb3cuZG9jdW1lbnQud3JpdGUocGhtbCk7CgkJCS8vIAlPcGVuV2luZG93LmRvY3VtZW50LmNsb3NlKCk7CgkJCS8vIAlPcGVuV2luZG93LmZvY3VzKCk7CgkJCS8vIH0KCQkJdmFyIGluc1dpbmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsKCQkJLy8gaW5zV2luZC5zcmMgPSAiamF2YXNjcmlwdDooZnVuY3Rpb24oKXtkb2N1bWVudC53cml0ZSgiK2luc1dpbmQrIil9KSgpIjsKCQkJaW5zV2luZC5pbm5lckhUTUwgPSBwaG1sOwoJCQlkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGluc1dpbmQpOwoJCX0KCQkvLyBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiZ3dkYW5nLWZwIikgPT0gbnVsbAoJCWlmKHRydWUpewoJCQkvLyDpppbmrKHliqDovb3mlbDmja4KCQkJaW5pdEdXRCgpOwoJCX1lbHNlewoJCQkvLyBUT0RPIOW+heWujOaIkO+8jOS8vOS5jui/memHjOS4jeWlveWkhOeQhgoJCQlsZXQgcWRhdGEgPSAiZnA9Iitsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiZ3dkYW5nLWZwIikrIiZkZnA9Iitsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiZ3dkYW5nLWRmcCIpOwoJCQlHTV94bWxodHRwUmVxdWVzdCh7CgkJCQl1cmw6ICJodHRwczovL2Jyb3dzZXIuZ3dkYW5nLmNvbS9leHRlbnNpb24vcHJpY2VfdG93YXJkcz92ZXI9MSZmb3JtYXQ9anNvbnAmJnVybD0iICsgZW5jb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhyZWYpLAoJCQkJbWV0aG9kOiAnR0VUJywKCQkJCXRpbWVvdXQ6IDEwMDAwLAoJCQkJaGVhZGVyczogewoJCQkJCSdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCgkJCQkJJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKCQkJCQknQ2FjaGUtQ29udHJvbCc6ICdwdWJsaWMnCgkJCQl9LAoJCQkJb25sb2FkOiBmdW5jdGlvbiAocmVzKSB7CgkJCQkJY29uc3QganNvbiA9IEpTT04ucGFyc2UocmVzLnJlc3BvbnNlVGV4dCkKCQkJCQlpZiAoanNvbi5pc19iYW4gPT0gbnVsbCkgewoJCQkJCQljb25zb2xlLmxvZyhqc29uKTsKCgkJCQkJCWxldCBkYXRhID0gZGVhbFJlcyhqc29uKTsKCQkJCQkJb3BXaW5kKCcnLCAwLCAn5q+U5Lu3JywgZGF0YSk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJY29uc29sZS5sb2coanNvbi5hY3Rpb24udG8pOwoJCQkJCQlvcFdpbmQoanNvbi5hY3Rpb24udG8sICcxJywgJ+ivt+mqjOivgeWQjuWIt+aWsOmhtemdou+8gScsICcnKTsKCQkJCQl9CgkJCQl9CgkJCX0pOwoJCX0KCX0KCWluaXQoKTsKCXJlYWxUaW1lU2hvd1RCVGl0bGUoKTsKfSkoKQ==","requires":[{"meta":{"name":"AC-%E7%8B%AC%E5%AE%B6-%E6%B7%98%E5%AE%9D%E5%A4%A9%E7%8C%AB%E4%BC%98%E6%83%A0%E5%88%B8%E6%9F%A5%E8%AF%A2%E9%A2%86%E5%8F%96,%E5%A4%A7%E9%A2%9D%E4%BC%98%E6%83%A0%E5%88%B8,%E3%80%90100%E5%85%83%E8%B4%AD%E7%89%A9%E7%A5%9E%E5%88%B8%E3%80%91,%E7%9C%81%E9%92%B1%E8%B4%AD%E7%89%A9,%E9%A2%86%E5%88%B8%E8%B4%AD%E4%B9%B0%E6%9B%B4%E4%BC%98%E6%83%A0,%E5%B9%B3%E5%9D%87%E4%BC%98%E6%83%A020%25.user.js","url":"https://greasyfork.org/scripts/34606-ac-%E7%8B%AC%E5%AE%B6-%E6%B7%98%E5%AE%9D%E5%A4%A9%E7%8C%AB%E4%BC%98%E6%83%A0%E5%88%B8%E6%9F%A5%E8%AF%A2%E9%A2%86%E5%8F%96-%E5%A4%A7%E9%A2%9D%E4%BC%98%E6%83%A0%E5%88%B8-100%E5%85%83%E8%B4%AD%E7%89%A9%E7%A5%9E%E5%88%B8-%E7%9C%81%E9%92%B1%E8%B4%AD%E7%89%A9-%E9%A2%86%E5%88%B8%E8%B4%AD%E4%B9%B0%E6%9B%B4%E4%BC%98%E6%83%A0-%E5%B9%B3%E5%9D%87%E4%BC%98%E6%83%A020/code/AC-%E7%8B%AC%E5%AE%B6-%E6%B7%98%E5%AE%9D%E5%A4%A9%E7%8C%AB%E4%BC%98%E6%83%A0%E5%88%B8%E6%9F%A5%E8%AF%A2%E9%A2%86%E5%8F%96,%E5%A4%A7%E9%A2%9D%E4%BC%98%E6%83%A0%E5%88%B8,%E3%80%90100%E5%85%83%E8%B4%AD%E7%89%A9%E7%A5%9E%E5%88%B8%E3%80%91,%E7%9C%81%E9%92%B1%E8%B4%AD%E7%89%A9,%E9%A2%86%E5%88%B8%E8%B4%AD%E4%B9%B0%E6%9B%B4%E4%BC%98%E6%83%A0,%E5%B9%B3%E5%9D%87%E4%BC%98%E6%83%A020%25.user.js","ts":1637462436444,"mimetype":"text/javascript"},"source":""}]},{"name":"贴吧全能助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://tieba.baidu.com/f/fdir*","*://tieba.baidu.com/f/search*"],"orig_includes":["*://tieba.baidu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"confVer":"s[1]","definedEvent":"sclick,click,1,0,1","modules":"s{\"rmBottom\":2,\"ads_hide\":1,\"ads_thread_list\":2,\"audio_download\":2,\"block_post\":1,\"hide_loops\":1,\"icon_hide\":2,\"no_text_link\":1,\"orange\":1,\"quote\":1,\"quote_lzl\":1,\"real_url\":1,\"rmImgFav\":1,\"rmSaveFace\":1,\"rm_img_view\":2,\"save_face\":1}","repairDefinedEvent":"bfalse"},"ts":1639653694938},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/26992-%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B/code/%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"02933cba-6635-430a-acbd-6cddf0a09216","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"http://cdn.staticfile.org/jquery/2.1.1/jquery.min.js","ts":1639653696992,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.scrollTo.min.js","url":"http://cdn.staticfile.org/jquery-scrollTo/1.4.11/jquery.scrollTo.min.js","ts":1639653696911,"mimetype":"text/javascript"},"source":"LyoqCiAqIENvcHlyaWdodCAoYykgMjAwNy0yMDE0IEFyaWVsIEZsZXNsZXIgLSBhZmxlc2xlcjxhPmdtYWlsPGQ+Y29tIHwgaHR0cDovL2ZsZXNsZXIuYmxvZ3Nwb3QuY29tCiAqIExpY2Vuc2VkIHVuZGVyIE1JVAogKiBAYXV0aG9yIEFyaWVsIEZsZXNsZXIKICogQHZlcnNpb24gMS40LjExCiAqLwo7KGZ1bmN0aW9uKGEpe2lmKHR5cGVvZiBkZWZpbmU9PT0nZnVuY3Rpb24nJiZkZWZpbmUuYW1kKXtkZWZpbmUoWydqcXVlcnknXSxhKX1lbHNle2EoalF1ZXJ5KX19KGZ1bmN0aW9uKCQpe3ZhciBqPSQuc2Nyb2xsVG89ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAkKHdpbmRvdykuc2Nyb2xsVG8oYSxiLGMpfTtqLmRlZmF1bHRzPXtheGlzOid4eScsZHVyYXRpb246cGFyc2VGbG9hdCgkLmZuLmpxdWVyeSk+PTEuMz8wOjEsbGltaXQ6dHJ1ZX07ai53aW5kb3c9ZnVuY3Rpb24oYSl7cmV0dXJuICQod2luZG93KS5fc2Nyb2xsYWJsZSgpfTskLmZuLl9zY3JvbGxhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGE9dGhpcyxpc1dpbj0hYS5ub2RlTmFtZXx8JC5pbkFycmF5KGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxbJ2lmcmFtZScsJyNkb2N1bWVudCcsJ2h0bWwnLCdib2R5J10pIT0tMTtpZighaXNXaW4pcmV0dXJuIGE7dmFyIGI9KGEuY29udGVudFdpbmRvd3x8YSkuZG9jdW1lbnR8fGEub3duZXJEb2N1bWVudHx8YTtyZXR1cm4vd2Via2l0L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KXx8Yi5jb21wYXRNb2RlPT0nQmFja0NvbXBhdCc/Yi5ib2R5OmIuZG9jdW1lbnRFbGVtZW50fSl9OyQuZm4uc2Nyb2xsVG89ZnVuY3Rpb24oZixnLGgpe2lmKHR5cGVvZiBnPT0nb2JqZWN0Jyl7aD1nO2c9MH1pZih0eXBlb2YgaD09J2Z1bmN0aW9uJyloPXtvbkFmdGVyOmh9O2lmKGY9PSdtYXgnKWY9OWU5O2g9JC5leHRlbmQoe30sai5kZWZhdWx0cyxoKTtnPWd8fGguZHVyYXRpb247aC5xdWV1ZT1oLnF1ZXVlJiZoLmF4aXMubGVuZ3RoPjE7aWYoaC5xdWV1ZSlnLz0yO2gub2Zmc2V0PWJvdGgoaC5vZmZzZXQpO2gub3Zlcj1ib3RoKGgub3Zlcik7cmV0dXJuIHRoaXMuX3Njcm9sbGFibGUoKS5lYWNoKGZ1bmN0aW9uKCl7aWYoZj09bnVsbClyZXR1cm47dmFyIGQ9dGhpcywkZWxlbT0kKGQpLHRhcmc9Zix0b2ZmLGF0dHI9e30sd2luPSRlbGVtLmlzKCdodG1sLGJvZHknKTtzd2l0Y2godHlwZW9mIHRhcmcpe2Nhc2UnbnVtYmVyJzpjYXNlJ3N0cmluZyc6aWYoL14oWystXT0/KT9cZCsoXC5cZCspPyhweHwlKT8kLy50ZXN0KHRhcmcpKXt0YXJnPWJvdGgodGFyZyk7YnJlYWt9dGFyZz0kKHRhcmcsdGhpcyk7aWYoIXRhcmcubGVuZ3RoKXJldHVybjtjYXNlJ29iamVjdCc6aWYodGFyZy5pc3x8dGFyZy5zdHlsZSl0b2ZmPSh0YXJnPSQodGFyZykpLm9mZnNldCgpfXZhciBlPSQuaXNGdW5jdGlvbihoLm9mZnNldCkmJmgub2Zmc2V0KGQsdGFyZyl8fGgub2Zmc2V0OyQuZWFjaChoLmF4aXMuc3BsaXQoJycpLGZ1bmN0aW9uKGksYSl7dmFyIGI9YT09J3gnPydMZWZ0JzonVG9wJyxwb3M9Yi50b0xvd2VyQ2FzZSgpLGtleT0nc2Nyb2xsJytiLG9sZD1kW2tleV0sbWF4PWoubWF4KGQsYSk7aWYodG9mZil7YXR0cltrZXldPXRvZmZbcG9zXSsod2luPzA6b2xkLSRlbGVtLm9mZnNldCgpW3Bvc10pO2lmKGgubWFyZ2luKXthdHRyW2tleV0tPXBhcnNlSW50KHRhcmcuY3NzKCdtYXJnaW4nK2IpKXx8MDthdHRyW2tleV0tPXBhcnNlSW50KHRhcmcuY3NzKCdib3JkZXInK2IrJ1dpZHRoJykpfHwwfWF0dHJba2V5XSs9ZVtwb3NdfHwwO2lmKGgub3Zlcltwb3NdKWF0dHJba2V5XSs9dGFyZ1thPT0neCc/J3dpZHRoJzonaGVpZ2h0J10oKSpoLm92ZXJbcG9zXX1lbHNle3ZhciBjPXRhcmdbcG9zXTthdHRyW2tleV09Yy5zbGljZSYmYy5zbGljZSgtMSk9PSclJz9wYXJzZUZsb2F0KGMpLzEwMCptYXg6Y31pZihoLmxpbWl0JiYvXlxkKyQvLnRlc3QoYXR0cltrZXldKSlhdHRyW2tleV09YXR0cltrZXldPD0wPzA6TWF0aC5taW4oYXR0cltrZXldLG1heCk7aWYoIWkmJmgucXVldWUpe2lmKG9sZCE9YXR0cltrZXldKWFuaW1hdGUoaC5vbkFmdGVyRmlyc3QpO2RlbGV0ZSBhdHRyW2tleV19fSk7YW5pbWF0ZShoLm9uQWZ0ZXIpO2Z1bmN0aW9uIGFuaW1hdGUoYSl7JGVsZW0uYW5pbWF0ZShhdHRyLGcsaC5lYXNpbmcsYSYmZnVuY3Rpb24oKXthLmNhbGwodGhpcyx0YXJnLGgpfSl9fSkuZW5kKCl9O2oubWF4PWZ1bmN0aW9uKGEsYil7dmFyIGM9Yj09J3gnPydXaWR0aCc6J0hlaWdodCcsc2Nyb2xsPSdzY3JvbGwnK2M7aWYoISQoYSkuaXMoJ2h0bWwsYm9keScpKXJldHVybiBhW3Njcm9sbF0tJChhKVtjLnRvTG93ZXJDYXNlKCldKCk7dmFyIGQ9J2NsaWVudCcrYyxodG1sPWEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYm9keT1hLm93bmVyRG9jdW1lbnQuYm9keTtyZXR1cm4gTWF0aC5tYXgoaHRtbFtzY3JvbGxdLGJvZHlbc2Nyb2xsXSktTWF0aC5taW4oaHRtbFtkXSxib2R5W2RdKX07ZnVuY3Rpb24gYm90aChhKXtyZXR1cm4gJC5pc0Z1bmN0aW9uKGEpfHx0eXBlb2YgYT09J29iamVjdCc/YTp7dG9wOmEsbGVmdDphfX07cmV0dXJuIGp9KSk7Cg=="},{"meta":{"name":"mustache.min.js","url":"http://cdn.staticfile.org/mustache.js/0.8.1/mustache.min.js","ts":1639653696914,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"tieba_ui.js","url":"https://greasyfork.org/scripts/2657/code/tieba_ui.js","ts":1639653699320,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"Interval_Looper.js","url":"https://greasyfork.org/scripts/3588/code/Interval_Looper.js","ts":1639653698072,"mimetype":"text/javascript"},"source":"Ly8gSW50ZXJ2YWwgTG9vcGVyIGJ5IEppeHVuOgovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9KaXh1bk1vZS9jNzdiYjM5MzZhNjg5OTdmY2UyMgoKdmFyIEludGVydmFsTG9vcCA9IGZ1bmN0aW9uIChhcnJEYXRhLCBsb29wZXIsIGRlbGF5KSB7CglpZiAoISh0aGlzIGluc3RhbmNlb2YgSW50ZXJ2YWxMb29wKSkKCQlyZXR1cm4gbmV3IEludGVydmFsTG9vcCAoYXJyRGF0YSwgbG9vcGVyLCBkZWxheSk7CiAKCS8qKgoJICogU3RhdHVzCgkgKiBAdHlwZSBOdW1iZXIKCSAqIDA6IOW+queOr+acquW8gOWniwoJICogMTog5q2j5Zyo5b6q546vCgkgKiAyOiDlvqrnjq/nu5PmnZ8KCSAqLwoJdGhpcy5zdGF0dXMgPSAwOwoJdGhpcy5uZXh0ID0gdGhpcy5fbmV4dC5iaW5kICh0aGlzKTsKCXRoaXMuaW5kZXggPSAwOwogCgl0aGlzLnNldERlbGF5IChkZWxheSB8fCA1MCk7Cgl0aGlzLmRhdGEgPSAoYXJyRGF0YSBpbnN0YW5jZW9mIEFycmF5KSA/IGFyckRhdGEgOiBbXTsKCXRoaXMuc2V0TG9vcGVyIChsb29wZXIpOwp9OwogCkludGVydmFsTG9vcC5wcm90b3R5cGUgPSB7CglfZ2V0RGVsYXk6IGZ1bmN0aW9uICgpIHsKCQlpZiAoIXRoaXMuZGVsYXkpCgkJCXJldHVybiA1MDsKIAoJCWlmICh0aGlzLmRlbGF5LmFwcGx5KQoJCQlyZXR1cm4gdGhpcy5kZWxheSgpOwogCgkJcmV0dXJuIHRoaXMuZGVsYXk7Cgl9LAoJX25leHQ6IGZ1bmN0aW9uICgpIHsKCQkvLyDnirbmgIHmlLnkuLog6L+b6KGM5LitCgkJdGhpcy5zdGF0dXMgPSAxOwoJCWlmICh0aGlzLmluZGV4IDwgdGhpcy5kYXRhLmxlbmd0aCkgewoJCQlzZXRUaW1lb3V0ICh0aGlzLmxvb3Blci5iaW5kKHRoaXMsIHRoaXMuZGF0YVt0aGlzLmluZGV4XSksIHRoaXMuZGVsYXkpOwoJCQl0aGlzLmluZGV4ICsrOwoJCQlpZiAodGhpcy5vblByb2dyZXNzICYmIHRoaXMub25Qcm9ncmVzcy5hcHBseSkgewoJCQkJdHJ5IHsKCQkJCQl0aGlzLm9uUHJvZ3Jlc3MgKHRoaXMuaW5kZXgsIHRoaXMuZGF0YS5sZW5ndGgpOwoJCQkJfSBjYXRjaCAoZSkgewoJCQkJCWNvbnNvbGUuZXJyb3IgKCdFcnJvciB3aGlsZSBjYWxsYmFjayB0byBgb25Qcm9ncmVzc2AnKTsKCQkJCQljb25zb2xlLmVycm9yIChlKTsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7CgkJCXRoaXMuc3RhdHVzID0gMjsKCQkJaWYgKHRoaXMub25Db21wbGV0ZSAmJiB0aGlzLm9uQ29tcGxldGUuYXBwbHkpIHsKCQkJCXRyeSB7CgkJCQkJdGhpcy5vbkNvbXBsZXRlICh0aGlzLmRhdGEubGVuZ3RoKTsKCQkJCX0gY2F0Y2ggKGUpIHsKCQkJCQljb25zb2xlLmVycm9yICgnRXJyb3Igd2hpbGUgY2FsbGJhY2sgdG8gYG9uQ29tcGxldGVgJyk7CgkJCQkJY29uc29sZS5lcnJvciAoZSk7CgkJCQl9CgkJCX0KCQl9Cgl9LAoJY2xlYW51cDogZnVuY3Rpb24gKCkgewoJCWlmICh0aGlzLnN0YXR1cyA9PSAyKSB7CgkJCS8vIOW3sue7j+eUqOi/h+eahOaVsOaNruWwsea4heaOieOAggoJCQl0aGlzLmRhdGEuc3BsaWNlKDAsIHRoaXMuaW5kZXgpOwoJCQl0aGlzLmluZGV4ID0gMDsKCQkJdGhpcy5zdGF0dXMgPSAwOwoJCX0KIAoJCXJldHVybiB0aGlzOwoJfSwKCWFkZDogZnVuY3Rpb24gKCkgewoJCWlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkgewoJCQkvLyDlsIbmiYDmnInlj4LmlbDkvZzkuLrmlbDmja7mjqjlhaUgdGhpcy5kYXRhCgkJCWZvciAodmFyIGkgPSAwOyBpPGFyZ3VtZW50cy5sZW5ndGg7IGkrKykKCQkJCXRoaXMuZGF0YS5wdXNoIChhcmd1bWVudHNbaV0pOwogCgkJCS8vIOaVtOS4que7hOW3sue7j+WujOe7k++8jOa4heeQhuWQjuiHquWKqOe7p+e7rQoJCQlpZiAodGhpcy5zdGF0dXMgPT0gMikKCQkJCXRoaXMuY2xlYW51cCgpLm5leHQoKTsKCQl9CiAKCQkvLyDov57plIEKCQlyZXR1cm4gdGhpczsKCX0sCglzZXREZWxheTogZnVuY3Rpb24gKG5ld0RlbGF5KSB7CgkJaWYgKG5ld0RlbGF5KSB0aGlzLmRlbGF5ID0gcGFyc2VJbnQgKG5ld0RlbGF5KTsKCQlyZXR1cm4gdGhpczsKCX0sCglzZXRMb29wZXI6IGZ1bmN0aW9uIChmb29DYWxsYmFjaykgewoJCWlmIChmb29DYWxsYmFjayAmJiBmb29DYWxsYmFjay5hcHBseSkKCQkJdGhpcy5sb29wZXIgPSBmb29DYWxsYmFjay5iaW5kKHRoaXMsIHRoaXMubmV4dCk7CiAKCQlyZXR1cm4gdGhpczsKCX0sCglsb29wOiBmdW5jdGlvbiAoKSB7CgkJaWYgKHRoaXMuc3RhdHVzID09IDApCgkJCS8vIOWwmuacquWQr+WKqCwg5LuO5aS05byA5aeLCgkJCXRoaXMubmV4dCAoKTsKIAoJCXJldHVybiB0aGlzOwoJfQp9Ow=="},{"meta":{"name":"gm2_port_v103.js","url":"https://greasyfork.org/scripts/2599/code/gm2_port_v103.js","ts":1639653698072,"mimetype":"text/javascript"},"source":""}]},{"name":"searchEngineJump-NextStage","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1604018245715,"data":{}},"enabled":false,"position":4,"file_url":"https://greasyfork.org/scripts/16193-searchenginejump-nextstage/code/searchEngineJump-NextStage.user.js","uuid":"7a6776be-46bd-4b74-8eb8-1a2defb44857","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUJCQlzZWFyY2hFbmdpbmVKdW1wLU5leHRTdGFnZQovLyBAYXV0aG9yCQkJdGVkNDIzCi8vIEBjb250cmlidXRvcgkJTkxGICYmIHl3emhhaXFpCi8vIEBkZXNjcmlwdGlvbgkJ5pa55L6/55qE5Zyo5ZCE5Liq5byV5pOO5LmL6Ze06Lez6L2s44CC5Y+v6Ieq5a6a5LmJ5pCc57Si5YiX6KGo55qEIE5MRiDkv67mlLnniYjjgIIKLy8gQHZlcnNpb24JCQkxMC4yMDEwLjE1LjAKLy8gQGluY2x1ZGUJCQkqCi8vIEBuYW1lc3BhY2UJCWh0dHBzOi8vZ2l0aHViLmNvbS90ZWQ0MjMKLy8gQHJlcXVpcmUJCQlodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktMy4zLjEubWluLmpzCi8vIEBncmFudAkJCUdNX2dldFZhbHVlCi8vIEBncmFudAkJCUdNX3NldFZhbHVlCi8vIEBncmFudAkJCUdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgIAkJR01fcmVnaXN0ZXJNZW51Q29tbWFuZAovLyBAcnVuLWF0CQkJZG9jdW1lbnQtc3RhcnQKLy8gPT0vVXNlclNjcmlwdD09CgoKKGZ1bmN0aW9uKCkgewoJInVzZSBzdHJpY3QiOwoJdmFyIHByZWZzID0gewoJCWRpc3BsYXk6IHRydWUsCgkJb3BlbkluTmV3VGFiOiB0cnVlLCAvL+aYr+WQpuWcqOaWsOmhtemdouaJk+W8gC4KCQllbmdpbmVMaXN0RGF0YVR5cGU6ICJ0ZWQ0MjMiLCAvL+aQnOe0ouWIl+ihqOm7mOiupOexu+WeiwoJCWRlYnVnOiBmYWxzZQoJfTsKCXZhciBzdmcgPXsKCQlsaXN0OiAnPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA1MTEuNjI2IDUxMS42MjYiPjxwYXRoIGQ9Ik02My45NTMgMTY0LjQ1M0g5LjEzNWMtMi40NzQgMC00LjYxNS45LTYuNDIzIDIuNzA5Qy45MDMgMTY4Ljk3MiAwIDE3MS4xMTQgMCAxNzMuNTg5djU0LjgxN2MwIDIuNDczLjkwMyA0LjYxOSAyLjcxMiA2LjQyNCAxLjgwOSAxLjgwMyAzLjk0OSAyLjcxMiA2LjQyMyAyLjcxMmg1NC44MThjMi40NzQgMCA0LjYxNS0uOTA1IDYuNDIzLTIuNzEyIDEuODA5LTEuODA5IDIuNzEyLTMuOTUxIDIuNzEyLTYuNDI0di01NC44MTdjMC0yLjQ3NS0uOTA0LTQuNjE3LTIuNzEyLTYuNDI3LTEuODA4LTEuODA2LTMuOTQ5LTIuNzA5LTYuNDIzLTIuNzA5ek02My45NTMgMzgzLjcyMkg5LjEzNWMtMi40NzQgMC00LjYxNS44OTYtNi40MjMgMi43MDdDLjkwMyAzODguMjM4IDAgMzkwLjM3OCAwIDM5Mi44NTR2NTQuODJjMCAyLjQ3MS45MDMgNC42MDkgMi43MTIgNi40MiAxLjgwOSAxLjgxMyAzLjk0OSAyLjcxNCA2LjQyMyAyLjcxNGg1NC44MThjMi40NzQgMCA0LjYxNS0uOTAzIDYuNDIzLTIuNzE0IDEuODA5LTEuODA3IDIuNzEyLTMuOTQ5IDIuNzEyLTYuNDJ2LTU0LjgyYzAtMi40NzctLjkwNC00LjYxNi0yLjcxMi02LjQyNi0xLjgwOC0xLjgwMy0zLjk0OS0yLjcwNi02LjQyMy0yLjcwNnpNNjMuOTUzIDI3NC4wODJIOS4xMzVjLTIuNDc0IDAtNC42MTUuOTEtNi40MjMgMi43MTRTMCAyODAuNzQ5IDAgMjgzLjIydjU0LjgxNWMwIDIuNDc4LjkwMyA0LjYyIDIuNzEyIDYuNDI3IDEuODA5IDEuODA4IDMuOTQ5IDIuNzA3IDYuNDIzIDIuNzA3aDU0LjgxOGMyLjQ3NCAwIDQuNjE1LS44OTYgNi40MjMtMi43MDcgMS44MDktMS44MDcgMi43MTItMy45NDkgMi43MTItNi40MjdWMjgzLjIyYzAtMi40NzEtLjkwNC00LjYxMy0yLjcxMi02LjQyNC0xLjgwOC0xLjgwNy0zLjk0OS0yLjcxNC02LjQyMy0yLjcxNHpNNjMuOTUzIDU0LjgxN0g5LjEzNWMtMi40NzQgMC00LjYxNS45MDMtNi40MjMgMi43MTJTMCA2MS40NzkgMCA2My45NTN2NTQuODE3YzAgMi40NzUuOTAzIDQuNjE1IDIuNzEyIDYuNDI0czMuOTQ5IDIuNzEyIDYuNDIzIDIuNzEyaDU0LjgxOGMyLjQ3NCAwIDQuNjE1LS45IDYuNDIzLTIuNzEyIDEuODA5LTEuODA5IDIuNzEyLTMuOTQ5IDIuNzEyLTYuNDI0VjYzLjk1M2MwLTIuNDc1LS45MDQtNC42MTUtMi43MTItNi40MjQtMS44MDgtMS44MDQtMy45NDktMi43MTItNi40MjMtMi43MTJ6TTUwMi40OSAzODMuNzIySDExOC43NzFjLTIuNDc0IDAtNC42MTUuODk2LTYuNDIzIDIuNzA3LTEuODA5IDEuODEtMi43MTIgMy45NDktMi43MTIgNi40MjZ2NTQuODJjMCAyLjQ3MS45MDMgNC42MDkgMi43MTIgNi40MiAxLjgwOSAxLjgxMyAzLjk0NiAyLjcxNCA2LjQyMyAyLjcxNEg1MDIuNDljMi40NzggMCA0LjYxNi0uOTAzIDYuNDI3LTIuNzE0IDEuODEtMS44MTEgMi43MS0zLjk0OSAyLjcxLTYuNDJ2LTU0LjgyYzAtMi40NzctLjkwMy00LjYxNi0yLjcxLTYuNDI2LTEuODExLTEuODA0LTMuOTUtMi43MDctNi40MjctMi43MDd6TTUwMi40OSAyNzQuMDgySDExOC43NzFjLTIuNDc0IDAtNC42MTUuOTEtNi40MjMgMi43MTRzLTIuNzEyIDMuOTUzLTIuNzEyIDYuNDI0djU0LjgxNWMwIDIuNDc4LjkwMyA0LjYyIDIuNzEyIDYuNDI3IDEuODA5IDEuODA4IDMuOTQ2IDIuNzA3IDYuNDIzIDIuNzA3SDUwMi40OWMyLjQ3OCAwIDQuNjE2LS44OTYgNi40MjctMi43MDcgMS44MS0xLjgwNyAyLjcxLTMuOTQ5IDIuNzEtNi40MjdWMjgzLjIyYzAtMi40NzEtLjkwMy00LjYxMy0yLjcxLTYuNDI0LTEuODExLTEuODA0LTMuOTUtMi43MTQtNi40MjctMi43MTR6TTUwOC45MTcgNTcuNTI5Yy0xLjgxMS0xLjgwNS0zLjk0OS0yLjcxMi02LjQyNy0yLjcxMkgxMTguNzcxYy0yLjQ3NCAwLTQuNjE1LjkwMy02LjQyMyAyLjcxMnMtMi43MTIgMy45NDktMi43MTIgNi40MjR2NTQuODE3YzAgMi40NzUuOTAzIDQuNjE1IDIuNzEyIDYuNDI0czMuOTQ2IDIuNzEyIDYuNDIzIDIuNzEySDUwMi40OWMyLjQ3OCAwIDQuNjE2LS45IDYuNDI3LTIuNzEyIDEuODEtMS44MDkgMi43MS0zLjk0OSAyLjcxLTYuNDI0VjYzLjk1M2MtLjAwMS0yLjQ3NC0uOTA0LTQuNjE1LTIuNzEtNi40MjR6TTUwMi40OSAxNjQuNDUzSDExOC43NzFjLTIuNDc0IDAtNC42MTUuOS02LjQyMyAyLjcwOS0xLjgwOSAxLjgxLTIuNzEyIDMuOTUyLTIuNzEyIDYuNDI3djU0LjgxN2MwIDIuNDczLjkwMyA0LjYxNSAyLjcxMiA2LjQyNCAxLjgwOSAxLjgwMyAzLjk0NiAyLjcxMiA2LjQyMyAyLjcxMkg1MDIuNDljMi40NzggMCA0LjYxNi0uOTA1IDYuNDI3LTIuNzEyIDEuODEtMS44MDkgMi43MS0zLjk1MSAyLjcxLTYuNDI0di01NC44MTdjMC0yLjQ3NS0uOTAzLTQuNjE3LTIuNzEtNi40MjctMS44MTEtMS44MDYtMy45NS0yLjcwOS02LjQyNy0yLjcwOXoiLz48L3N2Zz4nLAoJCXNldHRpbmc6ICc8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDQzOC41MjkgNDM4LjUyOSI+PHBhdGggZD0iTTQzNi4yNSAxODEuNDM4Yy0xLjUyOS0yLjAwMi0zLjUyNC0zLjE5My01Ljk5NS0zLjU3MWwtNTIuMjQ5LTcuOTkyYy0yLjg1NC05LjEzNy02Ljc1Ni0xOC40NjEtMTEuNzA0LTI3Ljk4IDMuNDIyLTQuNzU4IDguNTU5LTExLjQ2NiAxNS40MS0yMC4xMjkgNi44NTEtOC42NjEgMTEuNzAzLTE0Ljk4NyAxNC41NjEtMTguOTg2IDEuNTIzLTIuMDk0IDIuMjc5LTQuMjgxIDIuMjc5LTYuNTY3IDAtMi42NjMtLjY2LTQuNzU1LTEuOTk4LTYuMjgtNi44NDgtOS43MDgtMjIuNTUyLTI1Ljg4NS00Ny4xMDYtNDguNTM2LTIuMjc1LTEuOTAzLTQuNjYxLTIuODU0LTcuMTMyLTIuODU0LTIuODU3IDAtNS4xNC44NTUtNi44NTQgMi41NjdsLTQwLjUzOSAzMC41NDljLTcuODA2LTMuOTk5LTE2LjM3MS03LjUyLTI1LjY5My0xMC41NjVsLTcuOTk0LTUyLjUyOWMtLjE5MS0yLjQ3NC0xLjI4Ny00LjUyMS0zLjI4NS02LjEzOUMyNTUuOTUuODA2IDI1My42MjMgMCAyNTAuOTU0IDBoLTYzLjM4Yy01LjUyIDAtOC45NDcgMi42NjMtMTAuMjc4IDcuOTkzLTIuNDc1IDkuNTEzLTUuMjM2IDI3LjIxNC04LjI4IDUzLjEtOC45NDcgMi44Ni0xNy42MDcgNi40NzYtMjUuOTgxIDEwLjg1M2wtMzkuMzk5LTMwLjU0OWMtMi40NzQtMS45MDMtNC45NDgtMi44NTQtNy40MjItMi44NTQtNC4xODcgMC0xMy4xNzkgNi44MDQtMjYuOTc5IDIwLjQxMy0xMy44IDEzLjYxMi0yMy4xNjkgMjMuODQxLTI4LjEyMiAzMC42OS0xLjcxNCAyLjQ3NC0yLjU2OCA0LjY2NC0yLjU2OCA2LjU2NyAwIDIuMjg2Ljk1IDQuNTcgMi44NTMgNi44NTEgMTIuNzUxIDE1LjQyIDIyLjkzNiAyOC41NDkgMzAuNTUgMzkuNDAzLTQuNzU5IDguNzU0LTguNDcgMTcuNTExLTExLjEzMiAyNi4yNjVsLTUzLjEwNSA3Ljk5MmMtMi4wOTMuMzgyLTMuOSAxLjYyMS01LjQyNCAzLjcxNUMuNzYgMTgyLjUzMSAwIDE4NC43MjIgMCAxODcuMDAydjYzLjM4M2MwIDIuNDc4Ljc2IDQuNzA5IDIuMjg0IDYuNzA4IDEuNTI0IDEuOTk4IDMuNTIxIDMuMTk1IDUuOTk2IDMuNTcybDUyLjI1IDcuNzFjMi42NjMgOS4zMjUgNi41NjQgMTguNzQzIDExLjcwNCAyOC4yNTctMy40MjQgNC43NjEtOC41NjMgMTEuNDY4LTE1LjQxNSAyMC4xMjktNi44NTEgOC42NjUtMTEuNzA5IDE0Ljk4OS0xNC41NjEgMTguOTg2LTEuNTI1IDIuMTAyLTIuMjg1IDQuMjg1LTIuMjg1IDYuNTcgMCAyLjQ3MS42NjYgNC42NTggMS45OTcgNi41NjEgNy40MjMgMTAuMjg0IDIzLjEyNSAyNi4yNzIgNDcuMTA5IDQ3Ljk2OSAyLjA5NSAyLjA5NCA0LjQ3NSAzLjEzOCA3LjEzNyAzLjEzOCAyLjg1NyAwIDUuMjM2LS44NTIgNy4xMzgtMi41NjNsNDAuMjU5LTMwLjU1M2M3LjgwOCAzLjk5NyAxNi4zNzEgNy41MTkgMjUuNjk3IDEwLjU2OGw3Ljk5MyA1Mi41MjljLjE5MyAyLjQ3MSAxLjI4NyA0LjUxOCAzLjI4MyA2LjE0IDEuOTk3IDEuNjIyIDQuMzMxIDIuNDIzIDYuOTk1IDIuNDIzaDYzLjM4YzUuNTMgMCA4Ljk1Mi0yLjY2MiAxMC4yODctNy45OTQgMi40NzEtOS41MTQgNS4yMjktMjcuMjEzIDguMjc0LTUzLjA5OCA4Ljk0Ni0yLjg1OCAxNy42MDctNi40NzYgMjUuOTgxLTEwLjg1NWwzOS40MDIgMzAuODRjMi42NjMgMS43MTIgNS4xNDEgMi41NjMgNy40MiAyLjU2MyA0LjE4NiAwIDEzLjEzMS02Ljc1MiAyNi44MzMtMjAuMjcgMTMuNzA5LTEzLjUxMSAyMy4xMy0yMy43OSAyOC4yNjQtMzAuODM3IDEuNzExLTEuOTAyIDIuNTY5LTQuMDkgMi41NjktNi41NjEgMC0yLjQ3OC0uOTQ3LTQuODYyLTIuODU3LTcuMTM5LTEzLjY5OC0xNi43NTQtMjMuODgzLTI5Ljg4Mi0zMC41NDYtMzkuNDAyIDMuODA2LTcuMDQzIDcuNTE5LTE1LjcwMSAxMS4xMzYtMjUuOThsNTIuODE3LTcuOTg4YzIuMjc5LS4zODMgNC4xODktMS42MjIgNS43MDgtMy43MTYgMS41MjMtMi4wOTggMi4yNzktNC4yODggMi4yNzktNi41NzF2LTYzLjM3NmMuMDA1LTIuNDc0LS43NTEtNC43MDctMi4yNzgtNi43MDd6bS0xNjUuMzA0IDg5LjUwMWMtMTQuMjcxIDE0LjI3Ny0zMS40OTcgMjEuNDE2LTUxLjY3NiAyMS40MTYtMjAuMTc3IDAtMzcuNDAxLTcuMTM5LTUxLjY3OC0yMS40MTYtMTQuMjcyLTE0LjI3MS0yMS40MTEtMzEuNDk4LTIxLjQxMS01MS42NzMgMC0yMC4xNzcgNy4xMzUtMzcuNDAxIDIxLjQxMS01MS42NzggMTQuMjc3LTE0LjI3MiAzMS41MDQtMjEuNDExIDUxLjY3OC0yMS40MTEgMjAuMTc5IDAgMzcuNDA2IDcuMTM5IDUxLjY3NiAyMS40MTEgMTQuMjc0IDE0LjI3NyAyMS40MTMgMzEuNTAxIDIxLjQxMyA1MS42NzggMCAyMC4xNzUtNy4xMzggMzcuNDAzLTIxLjQxMyA1MS42NzN6Ii8+PC9zdmc+JwoJfTsKCXZhciBlbmdpbmVMaXN0RGF0YSA9IHsKCQljdXN0b206ICIiLAoJCXRlZDQyMzogIue9kemhtVxuCUdvb2dsZVxuCQlHb29nbGUsIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9JXMmc2FmZT1vZmZcbgkJR29vZ2xlLmhrLCBodHRwczovL3d3dy5nb29nbGUuY29tLmhrL3NlYXJjaD9xPSVzJnNhZmU9b2ZmXG4JCUdvb2dsZS5jby5qcO+8jGh0dHBzOi8vd3d3Lmdvb2dsZS5jby5qcC9zZWFyY2g/cT0lcyZzYWZlPW9mZlxuCeeZvuW6piwgaHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q9JXNcbgnnp5jov7ksIGh0dHBzOi8vbWlqaXNvdS5jb20vP3E9JXNcbgkzNjAsIGh0dHBzOi8vd3d3LnNvLmNvbS9zP3E9JXNcbglCaW5nXG4JCUJpbmcoQ04pLCBodHRwczovL2NuLmJpbmcuY29tL3NlYXJjaD9xPSVzXG4JCUJpbmcoR2xvYmFsKSwgaHR0cHM6Ly9nbG9iYWwuYmluZy5jb20vc2VhcmNoP3E9JXMmc2V0bWt0PWVuLXVzJnNldGxhbmc9ZW4tdXNcbgnmkJzni5csIGh0dHBzOi8vd3d3LnNvZ291LmNvbS93ZWI/cXVlcnk9JXNcbglEdWNrRHVja0dvLCBodHRwczovL2R1Y2tkdWNrZ28uY29tLz9xPSVzXG4JWWFob29cbgkJWWFob28sIGh0dHBzOi8vc2VhcmNoLnlhaG9vLmNvbS9zZWFyY2g/cD0lc1xuCQlZYWhvbyh0dyksIGh0dHBzOi8vdHcuc2VhcmNoLnlhaG9vLmNvbS9zZWFyY2g/cD0lc1xuIAkJWWFob28uY28uanAsIGh0dHBzOi8vc2VhcmNoLnlhaG9vLmNvLmpwL3NlYXJjaD9wPSVzJmFxPS0xJng9d3J0XG4JU3RhcnRwYWdlLCBodHRwczovL3d3dy5zdGFydHBhZ2UuY29tL2RvL3NlYXJjaC8lcG9zdCNxdWVyeT0lc1xu6LWE5paZXG4JV2lraVxuCQlaV2lraSwgaHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3cvaW5kZXgucGhwP3NlYXJjaD0lcyZidXR0b249JnRpdGxlPVNwZWNpYWwlM0FTZWFyY2hcbgkJRVdpa2ksIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93L2luZGV4LnBocD9zZWFyY2g9JXMmYnV0dG9uPSZ0aXRsZT1TcGVjaWFsJTNBU2VhcmNoXG4JCUpXaWtpLCBodHRwczovL2phLndpa2lwZWRpYS5vcmcvdy9pbmRleC5waHA/c2VhcmNoPSVzJmJ1dHRvbj0mdGl0bGU9U3BlY2lhbCUzQVNlYXJjaFxuCeeZvuW6pueZvuenkSwgaHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vc2VhcmNod29yZC8/d29yZD0lc1xuCUludGVybmV0IEFyY2hpdmUsIGh0dHBzOi8vYXJjaGl2ZS5vcmcvc2VhcmNoLnBocD9xdWVyeT0lc1xuCVNjaG9sYXIsIGh0dHA6Ly9zY2hvbGFyLmdvb2dsZS5jb20vc2Nob2xhcj9obD16aC1DTiZxPSVzJmJ0bkc9JmxyPVxuCeeZvuW6puWtpuacrywgaHR0cHM6Ly94dWVzaHUuYmFpZHUuY29tL3M/d2Q9JXNcbgnnn6XkuY4sIGh0dHBzOi8vd3d3LnpoaWh1LmNvbS9zZWFyY2g/cT0lc1xuCeiQjOWomOeZvuenkSwgaHR0cDovL3poLm1vZWdpcmwub3JnL2luZGV4LnBocD9zZWFyY2g9JXNcbglHb29nbGUgQm9vaywgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT0lcyZidG5HPeaQnOe0ouWbvuS5piZ0Ym09YmtzJnRibz0xJmhsPXpoLUNOJmd3c19yZD1zc2xcbgnniLHlrabmnK8sIGh0dHBzOi8vcy5peHVlc2h1LmNvbS8/cT0lc1xuCee7tOaZriwgaHR0cDovL2xpYi5jcXZpcC5jb20vUWlrYW4vU2VhcmNoL0luZGV4P2Zyb209UWlrYW5fU2VhcmNoX0luZGV4LyVwb3N0I2tleT11JTNEJXMjaW5kZXhLZXk9JXNcbgnlvIDlj5FcbgkJc3RhY2tvdmVyZmxvdywgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9zZWFyY2g/cT0lc1xuCQlNRE4sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL3NlYXJjaD9xPSVzXG4JCWdpdGh1YiwgaHR0cHM6Ly9naXRodWIuY29tL3NlYXJjaD9xPSVzXG4JCWtydWdsZSwgaHR0cDovL29wZW5zZWFyY2gua3J1Z2xlLm9yZy9kb2N1bWVudC9zZWFyY2gvI3F1ZXJ5PSVzXG4JCW5wbSwgaHR0cHM6Ly93d3cubnBtanMub3JnL3NlYXJjaD9xPSVzXG7lnLDlm75cbgnnmb7luqYsIGh0dHA6Ly9tYXAuYmFpZHUuY29tLz9uZXdtYXA9MSZzPXMlMjZ3ZCUzRCVzXG4JR29vZ2xlLCBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvc2VhcmNoLyVzL1xuCUJpbmcsIGh0dHBzOi8vd3d3LmJpbmcuY29tL2RpdHUvP3E9JXNcbgnmkJzni5csIGh0dHBzOi8vbWFwLnNvZ291LmNvbS8jbHE9JXNcbumfs+S5kFxuCeWNg+WNgywgaHR0cHM6Ly9tdXNpYy50YWloZS5jb20vc2VhcmNoP3dvcmQ9JXNcbglRUSwgaHR0cHM6Ly95LnFxLmNvbS9wb3J0YWwvc2VhcmNoLmh0bWwjcGFnZT0xJnNlYXJjaGlkPTEmdD1zb25nJnc9JXNcbgnkuIDlkKwsIGh0dHBzOi8vc28uMXRpbmcuY29tL3Nvbmc/cT0lc1xuCeiZvuexsywgaHR0cDovL3d3dy54aWFtaS5jb20vc2VhcmNoP2tleT0lc1xuCXBpYXBybywgaHR0cHM6Ly9waWFwcm8uanAvc2VhcmNoLz92aWV3PWF1ZGlvJmtleXdvcmQ9JXNcbgnliJjlv5fov5ssIGh0dHBzOi8vbXVzaWMubGl1emhpamluLmNuLz9uYW1lPSVzJnR5cGU9cXFcbgnmrYzor41cbgkJUVHmrYzor40sIGh0dHBzOi8veS5xcS5jb20vcG9ydGFsL3NlYXJjaC5odG1sI3BhZ2U9MSZzZWFyY2hpZD0xJnQ9bHlyaWMmdz0lc1xuCQnkuIDlkKzmrYzor40sIGh0dHBzOi8vc28uMXRpbmcuY29tL2x5cmljP3E9JXNcbgkJ5q2M6K+N6L+3LCBodHRwOi8vZ2VjaW1pLmNvbS9zZWFyY2gvP2tleXdvcmQ9JXNcbuWbvueJh1xuCeeZvuW6piwgaHR0cDovL2ltYWdlLmJhaWR1LmNvbS9zZWFyY2gvaW5kZXg/dG49YmFpZHVpbWFnZSZ3b3JkPSVzXG4JR29vZ2xlLCBodHRwczovL3d3dy5nb29nbGUuY29tLmhrL3NlYXJjaD90Ym09aXNjaCZxPSVzXG4J6Iqx55OjLCBodHRwczovL2h1YWJhbi5jb20vc2VhcmNoLz9xPSVzXG4JUGljc2VhcmNoLCBodHRwOi8vY24ucGljc2VhcmNoLmNvbS9pbmRleC5jZ2k/cT0lc1xuCUZsaWNrciwgaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9zZWFyY2gvP3c9YWxsJnE9JXNcbglQaXhpdiwgaHR0cDovL3d3dy5waXhpdi5uZXQvc2VhcmNoLnBocD9zX21vZGU9c190YWcmd29yZD0lc1xuCWRBLCBodHRwczovL3d3dy5kZXZpYW50YXJ0LmNvbS9icm93c2UvYWxsLz9xPSVzXG7kuIvovb1cbglCVERpZ2csIGh0dHBzOi8vYnRkaWcuY29tL3NlYXJjaD9xPSVzXG4JaWRvcGUsIGh0dHBzOi8vaWRvcGUuc2UvdG9ycmVudC1saXN0LyVzXG4JVEssIGh0dHBzOi8vd3d3LnRvcnJlbnRraXR0eS50di9zZWFyY2gvJXNcbglsaW1ldG9ycmVudHNcbgkJY28sIGh0dHBzOi8vd3d3LmxpbWV0b3JyZW50cy5jby9zZWFyY2gvYWxsLyVzXG4JCWFzaWEsIGh0dHBzOi8vd3d3LmxpbWV0b3JyZW50cy5hc2lhL3NlYXJjaC9hbGwvJXNcbgkJcHJvLCBodHRwczovL3d3dy5saW1ldG9yLnByby9zZWFyY2gvYWxsLyVzXG4JRUQyS1xuCQl4aWFvaHgsIGh0dHBzOi8vdjEueGlhb2h4Lm9yZy9zZWFyY2g/a2V5PSVzXG4JCWNkc29zbywgaHR0cHM6Ly93d3cuY2Rzb3NvLmNjL3NlYXJjaGVzLSVzLWhvdC0xLW51bGwuaHRtbFxuCeWtl+W5lVxuCQlzdWIgSEQsIGh0dHBzOi8vc3ViaGQubGEvc2VhcmNoLyVzXG4JCeWwhOaJi+e9kSjkvKopLCBodHRwczovL2Fzc3J0Lm5ldC9zdWIvP3NlYXJjaHdvcmQ9JXNcbgkJWVllVHMsIGh0dHA6Ly93d3cucnJ5czIwMjAuY29tL3NlYXJjaC9pbmRleD9rZXl3b3JkPSVzXG4JCXppbXVrdSwgaHR0cDovL3d3dy56aW11a3UubGEvc2VhcmNoP3E9JXNcbgkJU3Vic2NlbmUsIGh0dHBzOi8vc3Vic2NlbmUuY29tL3N1YnRpdGxlcy9zZWFyY2hieXRpdGxlJXBvc3QjcXVlcnk9JXNcbgkJUjNTVUIsIGh0dHBzOi8vcjNzdWIuY29tL3NlYXJjaC5waHA/cz0lc1xu5b2x6KeGXG4JdG9ycmVudGZ1bmsyLCBodHRwczovL3d3dy50b3JyZW50ZnVuazIuY29tL2FsbC90b3JyZW50cy8lcy5odG1sP3Y9JnNtaT0mc21hPSZpPTI1MFxuCXRoZXBpcmF0ZWJheSwgaHR0cHM6Ly90aGVwaXJhdGViYXkub3JnL3NlYXJjaC8lc1xuCXpvb3FsZSwgaHR0cHM6Ly96b29xbGUuY29tL3NlYXJjaD9xPSVzXG4JcGlhbnl1YW4sIGh0dHA6Ly93d3cucGlhbnl1YW4ubGEvc2VhcmNoP3E9JXNcbglUb3JyZW50ejIsIGh0dHBzOi8vdG9ycmVudHoyLmV1L3NlYXJjaD9mPSVzXG4JMTMzN3gudG8sIGh0dHBzOi8vd3d3LjEzNzd4LnRvL3NlYXJjaC8lcy8xL1xuCVRvcmxvY2ssIGh0dHBzOi8vd3d3LnRvcmxvY2syLmNvbS9hbGwvdG9ycmVudHMvJXMuaHRtbFxuCVlvdXJCVCwgaHR0cHM6Ly95b3VyYml0dG9ycmVudDIuY29tLz9xPSVzXG4JVEQsIGh0dHBzOi8vd3d3LnRvcnJlbnRkb3dubG9hZHMubWUvc2VhcmNoLz9zZWFyY2g9JXNcbglleHRyYXRvcnJlbnQuc2ksIGh0dHBzOi8vZXh0cmF0b3JyZW50LnNpL3NlYXJjaC8/c2VhcmNoPSVzXG4JeGlhb2h4LCBodHRwczovL3d3dy54aWFvaHgub3JnL3NlYXJjaD9rZXk9JXNcbglSQVJCR1xuCQlyYXJiZ3ByeCwgaHR0cHM6Ly9yYXJiZ3ByeC5vcmcvdG9ycmVudHMucGhwP3NlYXJjaD0lc1xuCQlyYXJiZ3Byb3h5LCBodHRwczovL3JhcmJncHJveHkub3JnL3RvcnJlbnRzLnBocD9zZWFyY2g9JXNcbglraWNrYXNzKOmVnOWDjzEpLCBodHRwczovL2thdC5zeC9zZWFyY2gucGhwP3E9JXNcbglraWNrYXNzKOmVnOWDjzIpXG4JCWtpY2thc3N0b3JyZW50cywgaHR0cHM6Ly9raWNrYXNzdG9ycmVudHMudG8vdXNlYXJjaC8lc1xuCQlraWNrYXNzMS50bywgaHR0cHM6Ly9raWNrYXNzMS50by91c2VhcmNoLyVzL1xuCQlrYXQuYW0sIGh0dHBzOi8va2F0LmFtL3VzZWFyY2gvJXMvXG4JCWtpY2thc3N0b3JyZW50LmNyLCBodHRwczovL2tpY2thc3N0b3JyZW50LmNyL3VzZWFyY2gvJXMvXG5BQ0dcbglOeWFhUGFudHN1LCBodHRwczovL255YWEubmV0L3NlYXJjaD9jPV8mdXNlcklEPTAmcT0lc1xuCW55YWEuc2lcbgkJbnlhYS5zaSwgaHR0cHM6Ly9ueWFhLnNpLz9mPTAmYz0wXzAmcT0lc1xuCQlueWFhLnVrLCBodHRwczovL255YWEudWsvP2Y9MCZjPTBfMCZxPSVzXG4JZG1oeSwgaHR0cHM6Ly9zaGFyZS5kbWh5Lm9yZy90b3BpY3MvbGlzdD9rZXl3b3JkPSVzXG4JVG9reW90b3NobywgaHR0cHM6Ly93d3cudG9reW90b3Noby5pbmZvL3NlYXJjaC5waHA/dGVybXM9JXNcbglNaWthbiwgaHR0cDovL21pa2FuYW5pLm1lL0hvbWUvU2VhcmNoP3NlYXJjaHN0cj0lc1xuCe+8ik1pb0JU77yKLCBodHRwOi8vd3d3Lm1pb2J0LmNvbS9zZWFyY2gucGhwP2tleXdvcmQ9JXNcbglzaGFuYSBwcm9qZWN0LCBodHRwczovL3d3dy5zaGFuYXByb2plY3QuY29tL3NlYXJjaC8/dGl0bGU9JXNcbgnnroDljZXliqjmvKssIGh0dHBzOi8vd3d3LjM2ZG0uY29tL3NlYXJjaC5waHA/a2V5d29yZD0lc1xuCUtPVE9NSSBSU1MsIGh0dHBzOi8vbW9lNHNhbGUuaW4vP2t3PSVzXG4JQUNH54uX54uXLCBodHRwOi8vYnQuYWNnLmdnL3NlYXJjaC5waHA/a2V5d29yZD0lc1xuCUFDRy5SSVAsIGh0dHBzOi8vYWNnLnJpcC8/dGVybT0lc1xuCUFjZ25YLCBodHRwczovL3d3dy5hY2dueC5zZS9zZWFyY2gucGhwP3NvcnRfaWQ9MCZrZXl3b3JkPSVzXG4J5pyr5pel5YuV5ryrLCBodHRwczovL3NoYXJlLmFjZ254LnNlL3NlYXJjaC5waHA/c29ydF9pZD0wJmtleXdvcmQ9JXNcblN1a2ViZWlcbglOYXlhUGFudHN1LCBodHRwczovL3N1a2ViZWkubnlhYS5uZXQvc2VhcmNoP2M9XyZ1c2VySUQ9MCZxPSVzXG4JbnlhYS5zaVxuCQlueWFhLnNpLCBodHRwczovL3N1a2ViZWkubnlhYS5zaS8/Zj0wJmM9MF8wJnE9JXNcbgkJbnlhYS51aywgaHR0cHM6Ly9zdWtlYmVpLm55YWEudWsvP2Y9MCZjPTBfMCZxPSVzXG4JR2xvZGxzLCBodHRwczovL2dsb2Rscy50by9zZWFyY2hfcmVzdWx0cy5waHA/c2VhcmNoPSVzXG4JQW5pRGV4LCBodHRwczovL2FuaWRleC5pbmZvLz9xPSVzXG4JQWNnblggRXJvLCBodHRwczovL3d3dy5hbml4Lm1vZS9zZWFyY2gucGhwP3NvcnRfaWQ9MCZrZXl3b3JkPSVzXG4JQW5pUmVuYSwgaHR0cHM6Ly93d3cuYW5pcmVuYS5jb20vP3M9JXNcbglHR0Jhc2VzLCBodHRwOi8vd3d3LmdnYmFzZXMuY29tL3NlYXJjaC5zbz90aXRsZT0lc1xu572R6LStXG4J5LiA5reYLCBodHRwczovL3d3dy5ldGFvLmNvbS9zZWFyY2guaHRtP25xPSVzXG4J5Lqs5LicLCBodHRwczovL3NlYXJjaC5qZC5jb20vU2VhcmNoP2tleXdvcmQ9JXMmZW5jPXV0Zi04XG4J5reY5a6dLCBodHRwczovL3MudGFvYmFvLmNvbS9zZWFyY2g/cT0lc1xuCeS6mumprOmAiiwgaHR0cHM6Ly93d3cuYW1hem9uLmNuL3MvcmVmPW5iX3NzP2tleXdvcmRzPSVzXG5ldGNcbgnpgq7nvJblupMsIGh0dHA6Ly93d3cueW91Ymlhbmt1LmNvbS8lc1xuCUFNTywgaHR0cHM6Ly9hZGRvbnMubW96aWxsYS5vcmcvemgtQ04vZmlyZWZveC9zZWFyY2gvP3E9JXNcbgnmsYnlhbgo5a2XKSwgaHR0cDovL3d3dy56ZGljLm5ldC9zb3VzdW8vP3E9JXMmdHA9dHAxXG4J5rGJ5YW4KOivjSksIGh0dHA6Ly93d3cuemRpYy5uZXQvc291c3VvLz9xPSVzJnRwPXRwMyIsCgl9OwoKCXZhciBNQUlOX0NTUyA9ICIjc2VqLWJ1dHRvbntcbglwb3NpdGlvbjogZml4ZWQ7XG4gICAgdG9wOiAwcHg7XG4gICAgbGVmdDogMHB4O1xuICAgIHdpZHRoOiAxNHB4O1xuICAgIGhlaWdodDogMTRweDtcbiAgICBiYWNrZ3JvdW5kOiBncmV5O1xuICAgIGJvcmRlci1yYWRpdXM6IDdweCAhaW1wb3J0YW50O1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6IDkxMTExMTExMTExO1xuICAgIGN1cnNvcjogY3Jvc3NoYWlyO1xufVxuI3Nlai1jb250YWluZXJ7XG4JcG9zaXRpb246Zml4ZWQ7XG4JdG9wOjBweDtcbgl6LWluZGV4OjkxMTExMTExMTExO1xuCW1hcmdpbjowO1xuCWJhY2tncm91bmQ6IHdoaXRlO1xuCWJveC1zaGFkb3c6MHB4IDBweCAzcHggI2FhYWFhYTtcbgltYXJnaW46MCBhdXRvO1xuCWRpc3BsYXk6dGFibGU7XG4JZm9udC1mYW1pbHk6IENvbWljIFNhbnMgTVMsICdNaWNyb3NvZnQgWWFIZWknLCDlvq7ova/pm4Xpu5E7XG4JbGluZS1oZWlnaHQ6IDEuNTtcbglmb250LXNpemU6IDlweDtcbgl0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXMgZWFzZS1pbi1vdXQ7XG59XG5zZWp1bHtcbglib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xufVxuI3Nlai1jb250YWluZXIgc3Zne1xuCWhlaWdodDoxNXB4O1xuCXZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTtcbglwYWRkaW5nLXJpZ2h0OiAxcHg7XG59XG4jc2VqLWNvbnRhaW5lciBidXR0b257XG4JZm9udC1zaXplOjlweDtcbn1cblxuc2VqdWwsIHNlamxpe1xuCW1hcmdpbjogMDtcbglwYWRkaW5nOiAwO1xuCWxpc3Qtc3R5bGU6IG5vbmUgb3V0c2lkZTtcbn1cbnNlamxpe1xuCWRpc3BsYXk6IGxpc3QtaXRlbTtcbn1cbnNlamxpOmhvdmVyPnNlanVse1xuCWRpc3BsYXk6YmxvY2s7XG59XG5ib2R5PnNlanVsPnNlamxpe1xuCWZsb2F0OiBsZWZ0O1xufVxuc2VqbGkgc2VqdWx7XG4JcG9zaXRpb246IGFic29sdXRlO1xufVxuc2VqbGkgc2VqdWwgc2VqdWx7XG4JbWFyZ2luLWxlZnQ6IDEwMHB4O1xuCW1hcmdpbi10b3A6IC0zMHB4O1xufVxuc2VqbGkgc2VqdWwgLnNlai1lbmdpbmV7XG4JcGFkZGluZzogNHB4IDBweDtcbgl3aWR0aDoxMDAlO1xuCXRleHQtYWxpZ246IGxlZnQ7XG4JdGV4dC1pbmRlbnQ6IDVweDtcbn1cbiNzZWotY29udGFpbmVyPnNlamxpe1xuCWZsb2F0OiBsZWZ0O1xuCWJvcmRlci1yaWdodDogMXB4IHNvbGlkICMzMzM7XG59XG4jc2VqLWNvbnRhaW5lcj5zZWpsaTpsYXN0LWNoaWxke1xuCWJvcmRlci1yaWdodDogbm9uZTtcbn1cbiNzZWotZXhwYW5kZWQtY2F0ZWdvcnl7XG4JZGlzcGxheTogaW5saW5lLWJsb2NrO1xuCWZvbnQtd2VpZ2h0OiBib2xkO1xuCXBhZGRpbmc6IDBweCA0cHg7XG4JbGluZS1oZWlnaHQ6IDI7XG59XG4jc2VqLWV4cGFuZGVkLWNhdGVnb3J5OjphZnRlcntcbgljb250ZW50OicgOic7XG59XG4uc2VqLWVuZ2luZXtcbglsaW5lLWhlaWdodDogMjtcbglkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4JbWFyZ2luOiAwO1xuCWJvcmRlcjogbm9uZTtcbglwYWRkaW5nOiAwcHggNHB4O1xuCXRleHQtZGVjb3JhdGlvbjogbm9uZTtcbgl0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0O1xufVxuYS5zZWotZW5naW5le1xuCXdoaXRlLXNwYWNlOiBub3dyYXA7XG4JbWluLXdpZHRoOiA1NXB4O1xuCXRleHQtYWxpZ246IGNlbnRlcjtcbn1cbmJ1dHRvbi5zZWotZW5naW5le1xuCWJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XG4JZm9udC1mYW1pbHk6IENvbWljIFNhbnMgTVMsICdNaWNyb3NvZnQgWWFIZWknLCDlvq7ova/pm4Xpu5E7XG4JY29sb3I6ICMxMjA4ODY7XG4JY3Vyc29yOnBvaW50ZXI7XG59XG5hLnNlai1lbmdpbmU6dmlzaXRlZCwgYS5zZWotZW5naW5lOmFjdGl2ZXtcbgljb2xvcjogIzEyMDg4Njtcbn1cbmEuc2VqLWVuZ2luZTpsaW5rLCBhLnNlai1lbmdpbmU6dmlzaXRlZHtcbgl0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG4uc2VqLWRyb3AtbGlzdC10cmlnZ2VyLXNob3due1xuCWJhY2tncm91bmQtY29sb3I6ICNERUVERkYgIWltcG9ydGFudDtcbn1cbi5zZWotZHJvcC1saXN0LXRyaWdnZXI6OmFmdGVyIHtcbgljb250ZW50OlwnXCc7XG4JZGlzcGxheTogaW5saW5lLWJsb2NrO1xuCW1hcmdpbjogMCAwIDAgM3B4O1xuCXBhZGRpbmc6IDA7XG4Jd2lkdGg6IDA7XG4JaGVpZ2h0OiAwO1xuCWJvcmRlci10b3A6IDZweCBzb2xpZCAjQkNCQ0JDO1xuCWJvcmRlci1yaWdodDogNXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuCWJvcmRlci1sZWZ0OiA1cHggc29saWQgdHJhbnNwYXJlbnQ7XG4JYm9yZGVyLWJvdHRvbTogMHB4IHNvbGlkIHRyYW5zcGFyZW50O1xuCXRyYW5zaXRpb246IC13ZWJraXQtdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQ7XG4JdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3MgZWFzZS1pbi1vdXQ7XG4JdmVydGljYWwtYWxpZ246IHVuc2V0O1xufVxuLnNlai1kcm9wLWxpc3QtdHJpZ2dlci1zaG93bjo6YWZ0ZXIge1xuCS13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcbgl0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xufVxuLnNlai1lbmdpbmU6aG92ZXIge1xuCWJhY2tncm91bmQtY29sb3I6ICNFQUVBRUE7XG59XG4uc2VqLWVuZ2luZS1pY29uIHtcbglkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4JaGVpZ2h0OiAxNnB4O1xuCWJvcmRlcjogbm9uZTtcbglwYWRkaW5nOiAwO1xuCW1hcmdpbjogMCAzcHggMCAwO1xuCXZlcnRpY2FsLWFsaWduOiBzdWI7XG59XG4uc2VqLWRyb3AtbGlzdCB7XG4JZGlzcGxheTogbm9uZTtcbglmbG9hdDogbGVmdDtcbgltaW4td2lkdGg6IDEwMHB4O1xuCWZvbnQtc2l6ZTogMTNweDtcbgktbW96LWJveC1zaGFkb3c6IDJweCAycHggNXB4ICNjY2M7XG4JLXdlYmtpdC1ib3gtc2hhZG93OiAycHggMnB4IDVweCAjY2NjO1xuCWJveC1zaGFkb3c6IDJweCAycHggNXB4ICNjY2M7XG4JYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG59XG4uc2VqLWRyb3AtbGlzdD4gc2VqbGkge1xuCWJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMzMzO1xufVxuLnNlai1kcm9wLWxpc3Q+IHNlamxpOmxhc3QtY2hpbGQge1xuCWJvcmRlci1ib3R0b206IG5vbmU7XG59IjsKCgl2YXIgY2F0ZWdvcnlNYXAgPSB7IC8vcnVsZXMg5ZKMIGVuZ2luZUxpc3Qg55qE5a+55bqUCgkJIndlYiI6ICLnvZHpobUiLAoJCSJtYXAiOiAi5Zyw5Zu+IiwKCQkidmlkZW8iOiAi6KeG6aKRIiwKCQkibXVzaWMiOiAi6Z+z5LmQIiwKCQkiaW1hZ2UiOiAi5Zu+54mHIiwKCQkiTW92aWUiOiAi5b2x6KeGIiwKCQkia25vd2xlZGdlIjogIui1hOaWmSIsCgkJInNvY2lhbGl0eSI6ICLnpL7kuqQiLAoJCSJzaG9wcGluZyI6ICLnvZHotK0iLAoJCSJkb3dubG9hZCI6ICLkuIvovb0iLAoJfTsKCgl2YXIgZW5naW5lTGlzdEludHJvZHVjZSA9IGdldE1TdHIoZnVuY3Rpb24oKSB7CgkJLyoKCQk8ZGl2PgoJCQk8aDI+5YiG57G76KeE5YiZ77yaPC9oMj4KCQkJPGk+44CQ5ZCN56ew5pyA5aW95LiN6KaB5pu05pS577yM57G75Yir6Lef56uZ54K56KeE5YiZ5pyJ5Liq5a+55bqU5YWz57O744CRPC9pPgoJCQk8cD4x44CBIumfs+S5kC0tbXVzaWMi77yM5Luj6KGo57G75Yir5pivICLpn7PkuZAiPC9wPgoJCTwvZGl2PgoJCTxkaXY+CgkJCTxoMj7mkJzntKLlvJXmk47op4TliJnvvJo8L2gyPgoJCQk8Y29kZT7lkI3np7DvvIzlnLDlnYDvvIglcyDlhbPplK7lrZfvvIk8L2NvZGU+CgkJCTxwPjHjgIEiLy8iIOW8gOWktOS8muiiq+W/veeVpTwvcD4KCQkJPHA+MuOAgeS4remXtOWIhumalOespu+8muS4reaWh+mAl+WPt++8iO+8jO+8iSDmiJYg6Iux5paH6YCX5Y+3ICsg56m65qC877yILCDvvIk8L3A+CgkJCTxwPjPjgIHnq5nngrnlm77moIfkuZ/lj6/nnIHnlaU8L3A+CgkJCTxwPjTjgIFQT1NUIOiMg+S+iyDnu7Tmma4sIGh0dHA6Ly9saWIuY3F2aXAuY29tL1Fpa2FuL1NlYXJjaC9JbmRleD9mcm9tPVFpa2FuX1NlYXJjaF9JbmRleC8lcG9zdCNrZXk9dSUzRCVzI2luZGV4S2V5PSVzPC9wPgoJCTwvZGl2PgoJCSAqLwoJfSk7CgoJZnVuY3Rpb24gaW50cm9kdWNlVG9IdG1sKCkgewoJCXJldHVybiBlbmdpbmVMaXN0SW50cm9kdWNlLnJlcGxhY2UoLyjvvIguKj/vvIkpL2csICI8c3Bhbj4kMTwvc3Bhbj4iKQoJCQkucmVwbGFjZSgvIiguKj8pIi9nLCAiPHNwYW4+JDE8L3NwYW4+Iik7Cgl9CgkKCWZ1bmN0aW9uIGlzVGhlU2FtZUNhdGVnb3J5KGMxLCBjMikgewoJCXJldHVybiAoY2F0ZWdvcnlNYXBbYzFdIHx8IGMxKSA9PSAoY2F0ZWdvcnlNYXBbYzJdIHx8IGMyKTsKCX0KCgl2YXIgcnVsZXMgPSBbIC8v5qC55o2u6KeE5YiZ5oqK5pCc57Si5byV5pOO5YiX6KGo5o+S5YWl5Yiw5oyH5a6a572R56uZCQkKCQl7Ly8g572R6aG1LOesrOS4gOS4quWPr+S7peW9k+aooeadv+eciwoJCQluYW1lOiAiZ29vZ2xl572R6aG15pCc57SiIiwgLy/kvaDopoHliqDovb3nmoTnvZHnq5nnmoTlkI3lrZco5pa55L6/6Ieq5bex5p+l5om+KQoJCQl1cmw6IC9eaHR0cHM/OlwvXC8oZW5jcnlwdGVkXC5nb29nbGVcLmNvbXx3d3dcLmdvb2dsZVwuKD8hY29cLmpwKVteXC9dezIsOX0pXC8od2ViaHB8c2VhcmNofCN8JHxcPykoPyEuKnRibT0pLywgLy/lnKjlk6rkuKrnvZHnq5nkuIrliqDovb0s5q2j5YiZLgoJCQltdXRhdGlvblRpdGxlOiB0cnVlLCAvL211dGF0aW9uVGl0bGXnm5Hop4bmoIfpopjnmoTlj5jljJYKCQkJZW5naW5lTGlzdDogIndlYiIsIC8v5Yqg6L295ZOq5Liq57G75Z6L55qE5YiX6KGoOgoJCQkvLyBrZXl3b3JkIOS9v+eUqCBjc3PpgInkuK3kuIDkuKpmb3JtIGlucHV05YWD57SgIOaIluiAhSDor6XpobnmmK/kuIDkuKrlh73mlbDvvIzkvb/nlKjov5Tlm57lgLwKCQkJLy8g5o+S5YWl5paH5qGjLOebuOWFswoJCQkvLyB0YXJnZXQg5bCG5byV5pOO6Lez6L2s5bel5YW35qCP5o+S5YWl5Yiw5paH5qGj55qE5p+Q5Liq5YWD57SgCgkJCS8vICjor7fkvb/nlKhjc3PljLnphY0s5q+U5aaCOiAiI3N1YmZvcm1fY3RybCIgKTsKCQkJLy8gd2hlcmUg5Zub56eNOgoJCQkvLyAiYmVmb3JlQmVnaW4iKOaPkuWFpeWIsOe7meWumuWFg+e0oOeahOWJjemdoikgOwoJCQkvLyAiYWZ0ZXJCZWdpbiIo5L2c5Li657uZ5a6a5YWD57Sg55qE56ys5LiA5Liq5a2Q5YWD57SgKSA7CgkJCS8vICJiZWZvcmVFbmQiICjkvZzkuLrnu5nlrprlhYPntKDnmoTmnIDlkI7kuIDkuKrlrZDlhYPntKApIDsKCQkJLy8gImFmdGVyRW5kIijmj5LlhaXliLDnu5nlrprlhYPntKDnmoTlkI7pnaIpOy4KCQl9LCB7CgkJCW5hbWU6ICJnb29nbGUuY28uanAiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLmdvb2dsZVwuY29cLmpwXC8od2ViaHB8c2VhcmNofCN8JHxcPykoPzouKD8hJnRibT0pKSokLywKCQkJbXV0YXRpb25UaXRsZTogdHJ1ZSwKCQkJZW5naW5lTGlzdDogIndlYiIsCgkJCQoJCX0sIHsKCQkJbmFtZTogIlN0YXJ0cGFnZSIsCgkJCXVybDogL15odHRwcz86XC9cL1thLXowLTldezN9XC5zdGFydHBhZ2VcLmNvbVwvZG8vLAoJCQltdXRhdGlvblRpdGxlOiB0cnVlLAoJCQllbmdpbmVMaXN0OiAid2ViIiwKCQkJCgkJfSwgewoJCQluYW1lOiAiYmFpZHUg572R6aG15pCc57SiIiwgLy/lm6DkuLrkuI3liLfmlrDmkJzntKLvvIzmiYDku6Xnmb7luqbot7PnroDmtIHmkJzntKLkvJrmnInpl67popgKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5iYWlkdVwuY29tXC8oPzpzLip8YmFpZHUuKnxcP2JuLip8XD90bi4qfCkkLywvL2Ju44CBdG7mmK/mjqjlub/kuYvnsbvnmoTkuJzopb8KCQkJbXV0YXRpb25UaXRsZTogdHJ1ZSwKCQkJZW5naW5lTGlzdDogIndlYiIsCgkJCWVuZEZpeDogZnVuY3Rpb24oKSB7CgkJCQkJaWYgKGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImxnIikpLmRpc3BsYXkgIT0gIm5vbmUiKSByZW1vdmUoKTsKCQkJCX0gLy/pgJrov4fmo4DmtYvpppbpobXlm77niYfliKTmlq3vvIzlnKjpppbpobXnmoTor53kuI3mmL7npLoKCQl9LCB7CgkJCW5hbWU6ICLnp5jov7kiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9taWppc291XC5jb21cL1w/cT0vLAoJCQllbmdpbmVMaXN0OiAid2ViIiwKCQl9LCB7CgkJCW5hbWU6ICJiaW5nKGdsb2JhbCkiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9nbG9iYWxcLmJpbmdcLmNvbVwvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogIndlYiIsCgkJfSwgewoJCQluYW1lOiAi5b+F5bqU572R6aG15pCc57SiIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvKGNufHd3dylcLmJpbmdcLmNvbVwvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogIndlYiIsCgkJfSwgewoJCQluYW1lOiAiMzYw5pCc57SiIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5zb1wuY29tXC9zXD8vLAoJCQllbmdpbmVMaXN0OiAid2ViIiwKCQl9LCB7CgkJCW5hbWU6ICLmkJzni5fnvZHpobXmkJzntKIiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLnNvZ291XC5jb21cLyg/OndlYnxzKS8sCgkJCWVuZ2luZUxpc3Q6ICJ3ZWIiLAoJCQlrZXl3b3JkOiAiI3VwcXVlcnkiLAoJCX0sIHsKCQkJbmFtZTogIumbheiZjue9kemhteaQnOe0oiIsCgkJCXVybDogL15odHRwcz86XC9cL3NlYXJjaFwueWFob29cLmNvbVwvc2VhcmNoLywKCQkJY2hhbmdlOiAibm9FeHRlcm5hbFJlcXVlc3RzIiwKCQkJZW5naW5lTGlzdDogIue9kemhtSIsCgkJfSwgewoJCQluYW1lOiAidHcueWFob28iLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC90d1wuc2VhcmNoXC55YWhvb1wuY29tXC9zZWFyY2gvLAoJCQljaGFuZ2U6ICJub0V4dGVybmFsUmVxdWVzdHMiLAoJCQllbmdpbmVMaXN0OiAid2ViIiwKCQl9LCB7CgkJCW5hbWU6ICJ5YWhvby5jby5qcCIsCgkJCXVybDogL15odHRwcz86XC9cL3NlYXJjaFwueWFob29cLmNvXC5qcFwvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogIndlYiIsCgkJfSwgewoJCQluYW1lOiAiZHVja2R1Y2tnbyIsCgkJCXVybDogL15odHRwcz86XC9cL2R1Y2tkdWNrZ29cLmNvbVwvXD8vLAoJCQllbmdpbmVMaXN0OiAid2ViIiwKCQl9LAoJCS8vIOefpeivhgoJCXsKCQkJbmFtZTogIlNjaG9sYXIiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9zY2hvbGFyXC5nb29nbGUoPzpcLlxEezEsM30pezEsMn1cL3NjaG9sYXJcPy8sCgkJCWVuZ2luZUxpc3Q6ICLotYTmlpkiLAoJCX0sIHsKCQkJbmFtZTogIueZvuW6puWtpuacryIsCgkJCXVybDogL15odHRwcz86XC9cL3h1ZXNodVwuYmFpZHVcLmNvbVwvc1w/LywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJCQoJCX0sIHsKCQkJbmFtZTogIklBIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvYXJjaGl2ZVwub3JnXC9zZWFyY2hcLnBocC8sCgkJCWVuZ2luZUxpc3Q6ICLotYTmlpkiLAoJCQlrZXl3b3JkOiAiaW5wdXRbdHlwZT0ndGV4dCddW3ZhbHVlXSIsCgkJfSwgewoJCQluYW1lOiAi55m+5bqm55m+56eRIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvYmFpa2VcLmJhaWR1XC5jb21cLyhzZWFyY2h8aXRlbSkvLAoJCQllbmdpbmVMaXN0OiAi6LWE5paZIiwKCQl9LCB7CgkJCW5hbWU6ICLokIzlqJjnmb7np5EiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC96aFwubW9lZ2lybFwub3JnXC8uLywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJCWtleXdvcmQ6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZWFyY2hUZXh0IikpIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJpbnB1dFt0eXBlPSdzZWFyY2gnXSIpLnZhbHVlOwoJCQkJZWxzZSByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZpcnN0SGVhZGluZyIpLnRleHRDb250ZW50OwoJCQl9LAoJCX0sIHsKCQkJbmFtZTogIkdvb2dsZSBib29rIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5nb29nbGVcLmNvLnsxLDN9XC9zZWFyY2hcPy4qKCZidG5HPSVFNil8KHRibT1ia3MpLywKCQkJbXV0YXRpb25UaXRsZTogdHJ1ZSwKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJfSwgewoJCQluYW1lOiAi5LqS5Yqo55m+56eRIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvW2Etel17MiwzfVwuYmFpa2VcLmNvbVwvW2Etel0vLAoJCQllbmdpbmVMaXN0OiAi6LWE5paZIiwKCQkJa2V5d29yZDogZnVuY3Rpb24oKSB7CgkJCQl2YXIgaW5wdXQ7CgkJCQlpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYWNfaW5wdXQiKVswXSAhPSB1bmRlZmluZWQpIHsKCQkJCQlpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYWNfaW5wdXQiKVswXS52YWx1ZSAhPSAiIikKCQkJCQkJaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJhY19pbnB1dCIpWzBdLnZhbHVlOwoJCQkJCWVsc2UgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImJsdWUiKVswXS5pbm5lckhUTUwgIT0gIiIpIGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYmx1ZSIpWzBdLmlubmVySFRNTDsKCQkJCQllbHNlIGlucHV0ID0gZG9jdW1lbnQuZXZhbHVhdGUoIi8vaDEiLCBkb2N1bWVudCwgbnVsbCwgOSwgbnVsbCkuc2luZ2xlTm9kZVZhbHVlLmlubmVySFRNTDsKCQkJCX0gZWxzZSBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiYmx1ZSIpWzBdLmlubmVySFRNTCAhPSAiIikgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJibHVlIilbMF0uaW5uZXJIVE1MOwoJCQkJZWxzZSBpbnB1dCA9IGRvY3VtZW50LmV2YWx1YXRlKCIvL2gxIiwgZG9jdW1lbnQsIG51bGwsIDksIG51bGwpLnNpbmdsZU5vZGVWYWx1ZS5pbm5lckhUTUw7CgkJCQlyZXR1cm4gaW5wdXQ7CgkJCX0sCgkJfSwgewoJCQluYW1lOiAid2lraSIsCgkJCXVybDogL15odHRwcz86XC9cLy4uXC53aWtpcGVkaWFcLm9yZ1wvd1wvaW5kZXhcLnBocCg/IS4qXD9zZWFyY2g9KS8sCgkJCWVuZ2luZUxpc3Q6ICLotYTmlpkiLAoJCX0sIHsKCQkJbmFtZTogIndpa2lbWkhdIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvemhcLndpa2lwZWRpYVwub3JnXC8oPzp6aHx3aWtpXC98d1wvaW5kZXgucGhwXD9zZWFyY2g9KS8sCgkJCWVuZ2luZUxpc3Q6ICLotYTmlpkiLAoJCQlrZXl3b3JkOiBmdW5jdGlvbigpIHsKCQkJCWlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2VhcmNoVGV4dCIpKXJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjc2VhcmNoVGV4dD5pbnB1dCIpLnZhbHVlOwoJCQkJZWxzZSByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZpcnN0SGVhZGluZyIpLmNoaWxkTm9kZXNbMF0udGV4dENvbnRlbnQ7CgkJCX0sCgkJCQoJCX0sIHsKCQkJbmFtZTogIndpa2lbRU5dIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvZW5cLndpa2lwZWRpYVwub3JnXC8od2lraVwvfHdcL2luZGV4XC5waHBcP3NlYXJjaD0pLywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJCWtleXdvcmQ6IGZ1bmN0aW9uKCkgewoJCQkJaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZWFyY2hUZXh0IikpCgkJCQkJcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNzZWFyY2hUZXh0PmlucHV0IikudmFsdWU7CgkJCQllbHNlIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZmlyc3RIZWFkaW5nIikuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudDsKCQkJfSwKCQkJCgkJfSwgewoJCQluYW1lOiAid2lraVtKUF0iLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9qYVwud2lraXBlZGlhXC5vcmdcLyh3aWtpXC98d1wvaW5kZXhcLnBocFw/c2VhcmNoPSkvLAoJCQllbmdpbmVMaXN0OiAi6LWE5paZIiwKCQkJa2V5d29yZDogZnVuY3Rpb24oKSB7CgkJCQlpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNlYXJjaFRleHQiKSlyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3NlYXJjaFRleHQ+aW5wdXQiKS52YWx1ZTsKCQkJCWVsc2UgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJmaXJzdEhlYWRpbmciKS5jaGlsZE5vZGVzWzBdLnRleHRDb250ZW50OwoJCQl9LAoJCX0sIHsKCQkJbmFtZTogIueZvuW6puefpemBkyhzZWFyY2gpIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvemhpZGFvXC5iYWlkdVwuY29tXC9zZWFyY2gvLAoJCQllbmdpbmVMaXN0OiAi6LWE5paZIiwKCQl9LCB7CgkJCW5hbWU6ICLnmb7luqbnn6XpgZMoc2VhcmNoKSIsCgkJCXVybDogL15odHRwcz86XC9cL3poaWRhb1wuYmFpZHVcLmNvbVwvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJfSwgewoJCQluYW1lOiAi57u05pmuIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvbGliXC5jcXZpcFwuY29tXC9RaWthbi8sCgkJCWVuZ2luZUxpc3Q6ICLotYTmlpkiLAoJCX0sIHsKCQkJbmFtZTogIueIseWtpuacryIsCgkJCXVybDogL15odHRwcz86XC9cL3NcLml4dWVzaHVcLmNvbVwvXD9xLywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJfSwgewoJCQluYW1lOiAi55+l5LmOIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC56aGlodVwuY29tXC9zZWFyY2hcPy8sCgkJCWNoYW5nZTogIm5vRXh0ZXJuYWxSZXF1ZXN0cyIsCgkJCWVuZ2luZUxpc3Q6ICLotYTmlpkiLAoJCX0sIHsKCQkJbmFtZTogInN0YWNrb3ZlcmZsb3ciLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9zdGFja292ZXJmbG93XC5jb21cL3NlYXJjaFw/LywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJfSwgewoJCQluYW1lOiAi55m+5bqm5paH5bqTIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd2Vua3VcLmJhaWR1XC5jb21cL3NlYXJjaFw/LywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJfSwgewoJCQluYW1lOiAi6LGG5LiBIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5kb2NpblwuY29tXC9zZWFyY2hcLmRvLywKCQkJZW5naW5lTGlzdDogIui1hOaWmSIsCgkJCQoJCX0sCgkJLy8g5Zyw5Zu+CgkJewoJCQluYW1lOiAi55m+5bqm5Zyw5Zu+IiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvbWFwXC5iYWlkdVwuY29tXC9cP25ld21hcC8sCgkJCWVuZ2luZUxpc3Q6ICJtYXAiLAoJCX0sIHsKCQkJbmFtZTogImdvb2dsZeWcsOWbviIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wuZ29vZ2xlXC5jby57MSw0fVwvbWFwcy8sCgkJCWVuZ2luZUxpc3Q6ICJtYXAiLAoJCQltdXRhdGlvblRpdGxlOiB0cnVlLAoJCX0sIHsKCQkJbmFtZTogIkJpbmflnLDlm74iLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9bXi5dKlwuYmluZ1wuY29tXC9kaXR1XC8vLAoJCQllbmdpbmVMaXN0OiAibWFwIiwKCQl9LCB7CgkJCW5hbWU6ICLmkJzni5flnLDlm74iLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9tYXBcLnNvZ291XC5jb21cLyMvLAoJCQllbmdpbmVMaXN0OiAibWFwIiwKCQl9LAoJCS8vIOmfs+S5kAoJCXsKCQkJbmFtZTogIuWNg+WNg+mfs+S5kCIsCgkJCXVybDogL15odHRwcz86XC9cL211c2ljXC50YWloZVwuY29tXC9zZWFyY2gvLAoJCQllbmdpbmVMaXN0OiAibXVzaWMiLAoJCQlrZXl3b3JkOiIuY29udGFpbmVyIGlucHV0W3ZhbHVla2V5XSIKCQl9LCB7CgkJCW5hbWU6ICJRUemfs+S5kCIsCgkJCXVybDogL15odHRwcz86XC9cL3lcLnFxXC5jb21cL3BvcnRhbFwvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogIm11c2ljIiwKCQkJa2V5d29yZDogIi5zZWFyY2hfaW5wdXRfX2lucHV0IiwKCQl9LCB7CgkJCW5hbWU6ICLpn7Pmgqblj7AiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9zb1wueWlueXVldGFpXC5jb21cL212XD8vLAoJCQllbmdpbmVMaXN0OiAibXVzaWMiLAoJCX0sIHsKCQkJbmFtZTogIuWImOW/l+i/myIsCgkJCXVybDogL15odHRwcz86XC9cL211c2ljXC5saXV6aGlqaW5cLmNuXC9cP25hbWUvLAoJCQllbmdpbmVMaXN0OiAibXVzaWMiLAoJCX0sIHsKCQkJbmFtZTogIuS4gOWQrOmfs+S5kCIsCgkJCXVybDogL15odHRwcz86XC9cL3NvXC4xdGluZ1wuY29tXC8oPyFseXJpYykvLAoJCQllbmdpbmVMaXN0OiAibXVzaWMiLAoJCQlldGM6IGZ1bmN0aW9uKCkgeyAvL+WkhOeQhuS4gOWQrOagueaNrnJlZmZlcuaLkue7neiuv+mXrueahOmXrumimAoJCQkJaWYgKGRvY3VtZW50LnJlZmVycmVyLmluZGV4T2YoImh0dHBzOi8vc28uMXRpbmcuY29tIikgPT0gLTEpIHsKCQkJCQlsb2NhdGlvbi5yZWxvYWQoKTsKCQkJCX0KCQkJfQoJCX0sIHsKCQkJbmFtZTogIuS4gOWQrOatjOivjSIsCgkJCXVybDogL15odHRwcz86XC9cL3NvXC4xdGluZ1wuY29tXC9seXJpYy8sCgkJCWVuZ2luZUxpc3Q6ICJtdXNpYyIsCgkJCWV0YzogZnVuY3Rpb24oKSB7IC8v5aSE55CG5LiA5ZCs5qC55o2ucmVmZmVy5ouS57ud6K6/6Zeu55qE6Zeu6aKYCgkJCQlpZiAoZG9jdW1lbnQucmVmZXJyZXIuaW5kZXhPZigiaHR0cHM6Ly9zby4xdGluZy5jb20iKSA9PSAtMSkgewoJCQkJCWxvY2F0aW9uLnJlbG9hZCgpOwoJCQkJfQoJCQl9CgkJfSwgewoJCQluYW1lOiAi5q2M6K+N6L+3IiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvZ2VjaW1pXC5jb21cL3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJtdXNpYyIsCgkJCWtleXdvcmQ6IGZ1bmN0aW9uKCkgewoJCQkJdmFyIGtleSA9IGxvY2F0aW9uLmhyZWYuc3BsaXQoImtleXdvcmQ9IilbMV07CgkJCQlyZXR1cm4ga2V5OwoJCQl9LAoJCX0sIHsKCQkJbmFtZTogInhpYW1pIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC54aWFtaVwuY29tXC9zZWFyY2gvLAoJCQllbmdpbmVMaXN0OiAibXVzaWMiLAoJCQlrZXl3b3JkOiBmdW5jdGlvbigpIHsKCQkJCXZhciBrZXkgPSBsb2NhdGlvbi5ocmVmLnNwbGl0KCJrZXk9IilbMV07CgkJCQlyZXR1cm4ga2V5OwoJCQl9LAoJCX0sCgkJLy8g5Zu+54mHCgkJewoJCQluYW1lOiAi6LC35q2M5Zu+54mHIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvXHd7MiwxMH1cLmdvb2dsZSg/OlwuXER7MSwzfSl7MSwyfVwvc2VhcmNoXD8oLip0YnM9c2JpKXwoLip0Ym09aXNjaCkvLAoJCQllbmdpbmVMaXN0OiAiaW1hZ2UiLAoJCX0sIHsKCQkJbmFtZTogIueZvuW6puWbvueJhyIsCgkJCXVybDogL15odHRwcz86XC9cL2ltYWdlXC5iYWlkdVwuYyhvbXxuKVwvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogImltYWdlIiwKCQkJc3R5bGU6ICJtYXJnaW4tbGVmdDozNXB4IgoJCX0sIHsKCQkJbmFtZTogIjM2MOWbvueJhyIsCgkJCXVybDogL15odHRwcz86XC9cL1xpbWFnZVwuc29cLmNvbVwvaVw/LywKCQkJZW5naW5lTGlzdDogImltYWdlIiwKCQl9LCB7CgkJCW5hbWU6ICJiaW5n5Zu+54mHIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvLipcLmJpbmdcLmNvbVwvaW1hZ2VzXC9zZWFyY2gvLAoJCQllbmdpbmVMaXN0OiAiaW1hZ2UiLAoJCQkJCX0sIHsKCQkJbmFtZTogIuaQnOeLl+WbvueJhyIsCgkJCXVybDogL15odHRwcz86XC9cL3BpY1wuc29nb3VcLmNvbVwvcGljLywKCQkJZW5naW5lTGlzdDogImltYWdlIiwKCQl9LCB7CgkJCW5hbWU6ICLoirHnk6MiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9odWFiYW5cLmNvbVwvc2VhcmNoXC9cPy8sCgkJCWVuZ2luZUxpc3Q6ICJpbWFnZSIsCgkJfSwgewoJCQluYW1lOiAiZmxpY2tyIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5mbGlja3JcLmNvbVwvc2VhcmNoLywKCQkJY2hhbmdlOiAibm9FeHRlcm5hbFJlcXVlc3RzIiwKCQkJZW5naW5lTGlzdDogImltYWdlIiwKCQkJa2V5d29yZDogZnVuY3Rpb24oKSB7CgkJCQl2YXIgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJpbnB1dFt0eXBlPSd0ZXh0J11bdmFsdWVdIik7CgkJCQlpZiAoaW5wdXQpIHJldHVybiBpbnB1dC52YWx1ZTsKCQkJCWVsc2UgewoJCQkJCXZhciBtID0gbG9jYXRpb24uc2VhcmNoLm1hdGNoKC9xPShbXiZdKykvaSk7CgkJCQkJaWYgKG0pIHJldHVybiB0cnVlOwoJCQkJfQoJCQl9LAoJCX0sIHsKCQkJbmFtZTogInBpY3NlYXJjaCIsCgkJCXVybDogL15odHRwOlwvXC8oLi58Li4uKVwucGljc2VhcmNoXC5jb21cL2luZGV4XC5jZ2kvLAoJCQllbmdpbmVMaXN0OiAiaW1hZ2UiLAoJCX0sIHsKCQkJbmFtZTogInBpeGl2IiwKCQkJdXJsOiAvXmh0dHA6XC9cL3d3d1wucGl4aXZcLm5ldFwvc2VhcmNoXC5waHAvLAoJCQllbmdpbmVMaXN0OiAiaW1hZ2UiLAoJCQlrZXl3b3JkOiAiaW5wdXRbbmFtZT13b3JkXSIsCgkJfSwgewoJCQluYW1lOiAiZGV2aWFudGFydCIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wuZGV2aWFudGFydFwuY29tXC9icm93c2VcL2FsbFwvLywKCQkJZW5naW5lTGlzdDogImltYWdlIiwKCQkJa2V5d29yZDogIiNzZWFyY2hJbnB1dCIsCgkJCWV0YzogZnVuY3Rpb24oKSB7IC8v6L+Z5Liq5piv5Li65LqG6LCD5pW057yW56CBCgkJCQlpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZigiJTI2JTIzIikgPT0gLTEgJiYgLyVbQS1GYS1mOC05XVtBLUZhLWYwLTldLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSkgewoJCQkJCXZhciB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgicT0iKTsKCQkJCQl3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybFswXSArICJxPSIgKyB0b0VzY2FwZUNoYXJhY3RlcihkZWNvZGVVUklDb21wb25lbnQodXJsWzFdKSk7CgkJCQl9CgkJCX0KCQl9LAoJCS8vIOS4i+i9vQoJCXsKCQkJbmFtZTogInhpYW9oeCIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wueGlhb2h4XC5vcmdcL3NlYXJjaFw/LywKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwKCQkJa2V5d29yZDoiaW5wdXQuc2VhcmNoIgoJCX0sIHsKCQkJbmFtZTogInhpYW9oeCIsCgkJCXVybDogL15odHRwcz86XC9cL3YxXC54aWFvaHhcLm9yZ1wvc2VhcmNoXD8vLAoJCQllbmdpbmVMaXN0OiAiZG93bmxvYWQiLAoJCX0sIHsKCQkJbmFtZTogImNkc29zbyIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wuY2Rzb3NvXC5jY1wvc2VhcmNoZXMvLAoJCQllbmdpbmVMaXN0OiAiZG93bmxvYWQiLAoJCX0sIHsKCQkJbmFtZTogImVkMjAwMCIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wuZWQyMDAwXC5jb21cL0ZpbGVMaXN0XC5hc3AvLAoJCQllbmdpbmVMaXN0OiAiZG93bmxvYWQiLAoJCX0sIHsKCQkJbmFtZTogIkJUU09XIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvYnRpb1wucHdcL3NlYXJjaFwvLywKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwKCQl9LCB7CgkJCW5hbWU6ICJsaW1ldG9ycmVudHMiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLihsaW1ldG9ycmVudHNcLihpbmZvfGFzaWF8Y28pfGxpbWV0b3JcLnBybylcL3NlYXJjaFwvLywKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwKCQl9LCB7CgkJCW5hbWU6ICJpZG9wZSIsCgkJCXVybDogL15odHRwcz86XC9cL2lkb3BlXC5zZVwvdG9ycmVudC1saXN0XC8vLAoJCQllbmdpbmVMaXN0OiAiZG93bmxvYWQiLAoJCX0sIHsJCQkKCQkJbmFtZTogInRvcnJlbnRraXR0eSIsCQoJCQl1cmw6IC9eaHR0cHM/OlwvXC8od3d3XC4pP3RvcnJlbnRraXR0eVwuKG5ldHxvcmd8dHYpXC9zZWFyY2hcLy8sCQoJCQllbmdpbmVMaXN0OiAiZG93bmxvYWQiLAkKCQkJa2V5d29yZDogZnVuY3Rpb24oKSB7CQoJCQkJcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoMiIpWzBdLmlubmVySFRNTC5zbGljZSgxOCwgLTEpOwkKCQkJfSwJCgkJfSwgCgkJLy/lvbHop4YKCQl7CgkJCW5hbWU6ICJ0aGVwaXJhdGViYXkiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC90aGVwaXJhdGViYXlcLm9yZ1wvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogIk1vdmllIiwKCQl9LCB7CgkJCW5hbWU6ICIxMzM3eCIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wuMTM3N3hcLnRvXC8oc29ydC0pP3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJNb3ZpZSIsCgkJfSwgewoJCQluYW1lOiAiYnRkaWciLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC8od3d3XC4pP2J0ZGlnXC5jb21cL3NlYXJjaFw/LywKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwKCQl9LCB7CgkJCW5hbWU6ICJraWNrYXNzKOabv+S7oykiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC8oa2lja2FzczFcLnRvfGtpY2thc3N0b3JyZW50XC5jcnxrYXRcLmFtfGtpY2thc3N0b3JyZW50c1wudG8pXC91c2VhcmNoXC8vLAoJCQllbmdpbmVMaXN0OiAiTW92aWUiLAoJCQlrZXl3b3JkOiBmdW5jdGlvbigpIHsKCQkJCXZhciBrZXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjY29udGVudFNlYXJjaCIpLnZhbHVlOwoJCQkJaWYgKGtleSkgcmV0dXJuIGtleTsKCQkJCWVsc2Uga2V5ID0gZG9jdW1lbnQudGl0bGUuc3BsaXQoJyInKVsxXTsKCQkJCXJldHVybiBrZXk7CgkJCX0sCgkJfSwgewoJCQluYW1lOiAia2lja2FzcyjplZzlg48xKSIsCgkJCXVybDogL15odHRwcz86XC9cL2thdFwuc3hcL3U/c2VhcmNoLywKCQkJZW5naW5lTGlzdDogIk1vdmllIiwKCQl9LCB7CgkJCW5hbWU6ICJSQVJCRyIsCgkJCXVybDogL15odHRwcz86XC9cLyhyYXJiZ3Byb3h5XC5vcmd8cmFyYmdcLmlzfHJhcmJncHJ4XC5vcmcpXC90b3JyZW50c1wucGhwXD9zZWFyY2gvLAoJCQllbmdpbmVMaXN0OiAiTW92aWUiLAoJCX0sIHsKCQkJbmFtZTogInlvdXJiaXR0b3JyZW50IiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wveW91cmJpdHRvcnJlbnQyP1wuY29tXC9cP3EvLAoJCQllbmdpbmVMaXN0OiAiTW92aWUiLAoJCX0sIHsKCQkJbmFtZTogInBpYW55dWFuIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5waWFueXVhblwubGFcL3NlYXJjaFw/cS8sCgkJCWVuZ2luZUxpc3Q6ICJNb3ZpZSIsCgkJfSwgewoJCQluYW1lOiAidG9ycmVudGZ1bmsyIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC50b3JyZW50ZnVuazJcLmNvbVwvW2Etel0vLAoJCQllbmdpbmVMaXN0OiAiZG93bmxvYWQiLAoJCX0sIHsKCQkJbmFtZTogImlkb3BlIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvem9vcWxlXC5jb21cL3NlYXJjaFw/LywKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwKCQl9LCB7CgkJCW5hbWU6ICJ0b3Jsb2NrIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC50b3Jsb2NrMlwuY29tXC9bYS16QS1aXS8sCgkJCWVuZ2luZUxpc3Q6ICJNb3ZpZSIsCgkJCWtleXdvcmQ6IGZ1bmN0aW9uKCkgewoJCQkJdmFyIGtleSA9IGRvY3VtZW50LnRpdGxlLnNwbGl0KCdUb3JyZW50cycpWzBdLnJlcGxhY2UoJy0nLCcgJyk7CgkJCQlyZXR1cm4ga2V5OwoJCQl9LAoJCX0sIHsKCQkJbmFtZTogInRvcnJlbnQgZG93bmxvYWRzIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC50b3JyZW50ZG93bmxvYWRzXC5tZVwvc2VhcmNoXC9cP3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJNb3ZpZSIsCgkJCWtleXdvcmQ6ICJpbnB1dFtuYW1lPSdzZWFyY2gnXSIsCgkJfSwgewoJCQluYW1lOiAiZXh0cmF0b3JyZW50LnNpIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvZXh0cmF0b3JyZW50XC5zaVwvc2VhcmNoXC9cP3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJNb3ZpZSIsCgkJfSwgewkKCQkJbmFtZTogIlRvcnJlbnR6MiIsCQoJCQl1cmw6IC9eaHR0cHM/OlwvXC90b3JyZW50ejJcLmV1XC9zZWFyY2gvLAkKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwJCgkJfSwKCQkvL0FDRwoJCXsKCQkJbmFtZTogImRtaHkiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9zaGFyZVwuZG1oeVwub3JnXC90b3BpY3NcL2xpc3QvLAoJCQllbmdpbmVMaXN0OiAiQUNHIiwKCQkJa2V5d29yZDogZnVuY3Rpb24oKSB7CgkJCQl2YXIga2V5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2tleXdvcmQiKS52YWx1ZTsKCQkJCWlmIChrZXkpIHJldHVybiBrZXk7CgkJCQllbHNlIGtleSA9IGRvY3VtZW50LnRpdGxlLnNwbGl0KC/jgIx844CNLylbMV07CgkJCQlyZXR1cm4ga2V5OwoJCQl9LAoJCX0sIHsKCQkJbmFtZTogIlRva3lvdG9zaG8iLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLnRva3lvdG9zaG9cLmluZm9cL3NlYXJjaFwucGhwLywKCQkJZW5naW5lTGlzdDogIkFDRyIsCgkJfSwgewoJCQluYW1lOiAi77yKTWlvQlTvvIoiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLm1pb2J0XC5jb21cL3NlYXJjaFwucGhwLywKCQkJZW5naW5lTGlzdDogIkFDRyIsCgkJCWtleXdvcmQ6ICIjdG9wc2VhcmNoIiwKCQl9LCB7CgkJCW5hbWU6ICLniLHmgYvliqjmvKsiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLmtpc3NzdWJcLm9yZ1wvc2VhcmNoXC5waHAvLAoJCQllbmdpbmVMaXN0OiAiQUNHIiwKCQkJa2V5d29yZDogIiN0b3BzZWFyY2giLAoJCX0sIHsKCQkJbmFtZTogIk1pa2FuIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvbWlrYW5hbmlcLm1lXC9Ib21lXC9TZWFyY2hcP3NlYXJjaHN0ci8sCgkJCWVuZ2luZUxpc3Q6ICJBQ0ciLAoJCX0sIHsKCQkJbmFtZTogImFjZ3NvdSIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wuYWNnc291XC5jb21cL3NlYXJjaFwucGhwLywKCQkJZW5naW5lTGlzdDogIkFDRyIsCgkJCWtleXdvcmQ6ICIjdG9wc2VhcmNoIiwKCQl9LCB7CgkJCW5hbWU6ICIzNmRtIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC4zNmRtXC5jb21cL3NlYXJjaFwucGhwLywKCQkJZW5naW5lTGlzdDogIkFDRyIsCgkJCWtleXdvcmQ6ICIjdG9wc2VhcmNoIiwKCQl9LCB7CgkJCW5hbWU6ICJLT1RPTUkgUlNTIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvbW9lNHNhbGVcLmluXC9cP2t3LywKCQkJZW5naW5lTGlzdDogIkFDRyIsCgkJfSwgewoJCQluYW1lOiAiQUNH54uX54uXIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvYnRcLmFjZ1wuZ2dcL3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJBQ0ciLAoJCQlrZXl3b3JkOiAiI3RvcHNlYXJjaCIsCgkJfSwgewoJCQluYW1lOiAiQUNHLlJJUCIsCgkJCXVybDogL15odHRwcz86XC9cL2FjZ1wucmlwXC9cP3Rlcm0vLAoJCQllbmdpbmVMaXN0OiAiQUNHIiwKCQl9LCB7CgkJCW5hbWU6ICJueWFhLnNpIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvbnlhYVwuKHNpfHVrKVwvXD8vLAoJCQllbmdpbmVMaXN0OiAiQUNHIiwKCQl9LCB7CgkJCW5hbWU6ICJOeWFhcGFudHN1IiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvKG55YWFcLnx3d3dcLnwpPyhwYW50c3VcLmNhdHxueWFhXC5wdClcL3NlYXJjaFw/LywKCQkJZW5naW5lTGlzdDogIkFDRyIsCgkJfSwgewoJCQluYW1lOiAic2hhbmEgcHJvamVjdCIsCgkJCXVybDogL15odHRwcz86XC9cL3d3d1wuc2hhbmFwcm9qZWN0XC5jb21cL3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJBQ0ciLAoJCX0sIHsKCQkJbmFtZTogIkFjZ25YIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5hY2dueFwuc2VcL3NlYXJjaFwucGhwXD8vLAoJCQllbmdpbmVMaXN0OiAiQUNHIiwKCQkJa2V5d29yZDogIiN0b3BzZWFyY2giLAoJCX0sIHsKCQkJbmFtZTogIuacq+aXpeWKqOa8qyIsCgkJCXVybDogL15odHRwcz86XC9cL3NoYXJlXC5hY2dueFwuc2VcL3NlYXJjaFwucGhwXD8vLAoJCQllbmdpbmVMaXN0OiAiQUNHIiwKCQkJa2V5d29yZDogIiN0b3BzZWFyY2giLAoJCX0sIHsKCQkJbmFtZTogIkFuaVJlbmEiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLmFuaXJlbmFcLmNvbVwvXD9zLywKCQkJZW5naW5lTGlzdDogIkFDRyIsCgkJfSwKCQkvL1N1a2ViZWkKCQl7CgkJCW5hbWU6ICJHR0Jhc2VzIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5nZ2Jhc2VzXC5jb21cL3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJTdWtlYmVpIiwKCQl9LCB7CgkJCW5hbWU6ICJzdWtlYmVpLm55YWEuc2kiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9zdWtlYmVpXC5ueWFhXC4oc2l8dWspXC9cPy8sCgkJCWVuZ2luZUxpc3Q6ICJTdWtlYmVpIiwKCQl9LHsKCQkJbmFtZTogIk5heWFwYW50c3Uoc3VrZWJlaSkiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9zdWtlYmVpXC4ocGFudHN1XC5jYXR8bnlhYVwucHQpXC9zZWFyY2hcPy8sCgkJCWVuZ2luZUxpc3Q6ICJTdWtlYmVpIiwKCQl9LCB7CgkJCW5hbWU6ICJhbml4IiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvd3d3XC5hbml4XC5tb2VcL3NlYXJjaFwucGhwXD8vLAoJCQllbmdpbmVMaXN0OiAiU3VrZWJlaSIsCgkJCWtleXdvcmQ6ICIjdG9wc2VhcmNoIiwKCQl9LCB7CgkJCW5hbWU6ICJBbmlEZXgiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9hbmlkZXhcLmluZm9cL1w/cS8sCgkJCWVuZ2luZUxpc3Q6ICJTdWtlYmVpIiwKCQl9LAoJCS8v5a2X5bmVCgkJewoJCQluYW1lOiAic3Vib20iLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLnN1Ym9tXC5uZXRcL3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJkb3dubG9hZCIsCgkJfSwgewoJCQluYW1lOiAic3ViaGQiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC9zdWJoZFwubGFcL3NlYXJjaC8sCgkJCWVuZ2luZUxpc3Q6ICJkb3dubG9hZCIsCgkJCWtleXdvcmQ6ICIjc24iLAoJCX0sIHsKCQkJbmFtZTogIuWwhOaJi+e9kSjkvKopIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvYXNzcnRcLm5ldFwvc3ViXC9cP3MvLAoJCQllbmdpbmVMaXN0OiAiZG93bmxvYWQiLAoJCX0sIHsKCQkJbmFtZTogIlN1YnNjZW5lIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvc3Vic2NlbmVcLmNvbVwvc3VidGl0bGVzXC9zZWFyY2hieXRpdGxlLywKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwKCQl9LCB7CgkJCW5hbWU6ICJSM1NVQiIsCgkJCXVybDogL15odHRwcz86XC9cL3Izc3ViXC5jb21cL3NlYXJjaFwucGhwLywKCQkJZW5naW5lTGlzdDogImRvd25sb2FkIiwKCQl9LAoJCS8vIOi0reeJqQoJCXsKCQkJbmFtZTogIuS4gOa3mCIsCgkJCXVybDogL15odHRwcz86XC9cL3d3dz9cLmV0YW9cLmNvbVwvc2VhcmNoLywKCQkJZW5naW5lTGlzdDogInNob3BwaW5nIiwKCQkJCgkJfSwgewoJCQluYW1lOiAi5Lqs5LicIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvc2VhcmNoXC5qZFwuY29tXC8oU3xzKWVhcmNoXD8vaSwKCQkJZW5naW5lTGlzdDogInNob3BwaW5nIiwKCQkJCgkJfSwgewoJCQluYW1lOiAi5reY5a6d5pCc57SiIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvKHN8aGFvc291XC5haSlcLnRhb2Jhb1wuY29tXC9zZWFyY2gvLAoJCQllbmdpbmVMaXN0OiAic2hvcHBpbmciLAoJCX0sIHsKCQkJbmFtZTogIuaYk+i/hSIsCgkJCXVybDogL15odHRwcz86XC9cL3NlYXJjaGV4XC55aXh1blwuY29tXC9odG1sXD8vLAoJCQllbmdpbmVMaXN0OiAic2hvcHBpbmciLAoJCX0sIHsKCQkJbmFtZTogIuiLj+WugSIsCgkJCXVybDogL15odHRwcz86XC9cL3NlYXJjaFwuc3VuaW5nXC5jb21cLy8sCgkJCWVuZ2luZUxpc3Q6ICJzaG9wcGluZyIsCgkJfSwgewoJCQluYW1lOiAi5aSp54yrIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvbGlzdFwudG1hbGxcLmNvbVwvXC8/c2VhcmNoLywKCQkJZW5naW5lTGlzdDogInNob3BwaW5nIiwKCQl9LCB7CgkJCW5hbWU6ICLkuprpqazpgIoiLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLmFtYXpvblwuY25cL3NcL3JlZi8sCgkJCWVuZ2luZUxpc3Q6ICJzaG9wcGluZyIsCgkJfSwgewoJCQluYW1lOiAi5b2T5b2TIiwKCQkJdXJsOiAvXmh0dHBzPzpcL1wvc2VhcmNoXC5kYW5nZGFuZ1wuY29tXC9cP2tleS8sCgkJCWVuZ2luZUxpc3Q6ICJzaG9wcGluZyIKCQl9LCB7CgkJCW5hbWU6ICJuZXdlZ2ciLAoJCQl1cmw6IC9eaHR0cHM/OlwvXC93d3dcLm5ld2VnZ1wuY29tXC50d1wvc2VhcmNoXD8vLAoJCQllbmdpbmVMaXN0OiAic2hvcHBpbmciLAoJCQlrZXl3b3JkOiAiI3NlYXJjaHdvcmQiLAoJCX0sCgldOwoKCWZ1bmN0aW9uIGxvYWRQcmVmcygpIHsKCQlwcmVmcy5kaXNwbGF5ID0gR01fZ2V0VmFsdWUoImRpc3BsYXkiLCBwcmVmcy5kaXNwbGF5KTsKCQlwcmVmcy5vcGVuSW5OZXdUYWIgPSBHTV9nZXRWYWx1ZSgib3BlbkluTmV3VGFiIiwgcHJlZnMub3BlbkluTmV3VGFiKTsKCQlwcmVmcy5kZWJ1ZyA9IEdNX2dldFZhbHVlKCJkZWJ1ZyIsIHByZWZzLmRlYnVnKTsKCQlwcmVmcy5lbmdpbmVMaXN0RGF0YVR5cGUgPSBHTV9nZXRWYWx1ZSgiZW5naW5lTGlzdERhdGFUeXBlIiwgcHJlZnMuZW5naW5lTGlzdERhdGFUeXBlKTsKCQllbmdpbmVMaXN0RGF0YS5jdXN0b20gPSBHTV9nZXRWYWx1ZSgiZW5naW5lTGlzdCIpIHx8ICIiOwoJCXJlbG9hZERlYnVnKCk7Cgl9CgoJZnVuY3Rpb24gb3BlblByZWZzKCkgewoJCQl2YXIgZCA9IGRvY3VtZW50OwoJCQl2YXIgb24gPSBmdW5jdGlvbihub2RlLCBlLCBmKSB7CgkJCQlub2RlLmFkZEV2ZW50TGlzdGVuZXIoZSwgZiwgZmFsc2UpOwoJCQl9OwoKCQkJdmFyICQgPSBmdW5jdGlvbihzKSB7CgkJCQlyZXR1cm4gZC5nZXRFbGVtZW50QnlJZCgic2VqLXByZWZzLSIgKyBzKTsKCQkJfTsKCQkJaWYgKCQoInNldHVwIikpIHJldHVybjsKCgkJCXZhciBzdHlsZU5vZGUgPSBHTV9hZGRTdHlsZSgiXAoJCSNzZWotcHJlZnMtc2V0dXAgeyBwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjIxNDc0ODM2NDc7dG9wOjM4cHg7cmlnaHQ6NjBweDtwYWRkaW5nOjIwcHggMzBweCAxMHB4O2JhY2tncm91bmQ6I2VlZTt3aWR0aDo1MDBweDtib3JkZXI6MXB4IHNvbGlkIGJsYWNrOyB9XAoJCSNzZWotcHJlZnMtc2V0dXAgKiB7IGNvbG9yOmJsYWNrO3RleHQtYWxpZ246bGVmdDtsaW5lLWhlaWdodDpub3JtYWw7Zm9udC1zaXplOjEycHg7IH1cCgkJI3Nlai1wcmVmcy1zZXR1cCBpIHsgJ01pY3Jvc29mdCBZYUhlaSBVSScsJ+W+rui9r+mbhem7kScsQXJpYWw7IH1cCgkJI3Nlai1wcmVmcy1zZXR1cCBhIHsgY29sb3I6YmxhY2s7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTsgfVwKCQkjc2VqLXByZWZzLXNldHVwIGRpdiB7IHRleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToxNHB4OyB9XAoJCSNzZWotcHJlZnMtdGl0bGUgeyBmb250LXdlaWdodDpib2xkOyB9XAoJCSNzZWotcHJlZnMtc2V0dXAgdWwgeyBtYXJnaW46MTVweCAwIDAgMDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lO2JhY2tncm91bmQ6I2VlZTtib3JkZXI6MDsgfVwKCQkjc2VqLXByZWZzLXNldHVwIGlucHV0LCAjc2VqLXByZWZzLXNldHVwIHNlbGVjdCB7IGJvcmRlcjoxcHggc29saWQgZ3JheTtwYWRkaW5nOjJweDtiYWNrZ3JvdW5kOndoaXRlOyBoZWlnaHQ6IGF1dG87IH1cCgkJI3Nlai1wcmVmcy1zZXR1cCBsaSB7IG1hcmdpbjowO3BhZGRpbmc6NnB4IDA7dmVydGljYWwtYWxpZ246bWlkZGxlO2JhY2tncm91bmQ6I2VlZTtib3JkZXI6MCB9XAoJCSNzZWotcHJlZnMtc2V0dXAgdGV4dGFyZWEgeyB3aWR0aDo5OCU7IGhlaWdodDo2MHB4OyBtYXJnaW46M3B4IDA7IGZvbnQtZmFtaWx5OiAnTWljcm9zb2Z0IFlhSGVpIFVJJywn5b6u6L2v6ZuF6buRJyxBcmlhbDsgfVwKCQkjc2VqLXByZWZzLXNldHVwIGJ1dHRvbiB7IHBhZGRpbmc6IDFweCA2cHg7IGZvbnQtc2l6ZTogMTJweDsgbWFyZ2luLXJpZ2h0OiAzcHg7IH1cCgkJI3Nlai1wcmVmcy1zZXR1cCAjdG9wLWJ1dHRvbnN7dGV4dC1hbGlnbjogbGVmdDt9XAoJCSNzZWotcHJlZnMtc2V0dXAgaW1nIHsgZGlzcGxheTogaW5pdGlhbDsgfVwKCQkjc2VqLXByZWZzLW1pbml0aXAgeyBwb3NpdGlvbjogYWJzb2x1dGU7IGJhY2tncm91bmQ6ICNmZjk7IGJvcmRlcjogMXB4IHNvbGlkICNGOTY7IHBhZGRpbmc6IDEwcHg7IGxlZnQ6IC00MDBweDsgdG9wOiAyMDBweDsgcmlnaHQ6IDU3MHB4OyB9XAoJCSNzZWotcHJlZnMtbWluaXRpcCBwIHsgbWFyZ2luOiA1cHggNXB4OyB9XAoJCSNzZWotcHJlZnMtbWluaXRpcCBzcGFuIHsgY29sb3I6IGdyZWVuOyB9XAoJCSNzZWotcHJlZnMtZGVidWcgeyBtYXJnaW4tbGVmdDogMThweDsgfVwKCQkiKTsKCgkJCXZhciBkaXYgPSBkLmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoJCQlkaXYuaWQgPSAic2VqLXByZWZzLXNldHVwIjsKCQkJZC5ib2R5LmFwcGVuZENoaWxkKGRpdik7CgkJCWRpdi5pbm5lckhUTUwgPSAiXAoJCTxkaXYgaWQ9J3RvcC1idXR0b25zJz5cCgkJCTxidXR0b24gaWQ9J3Nlai1wcmVmcy1vaycgdGl0bGU9J+eri+WNs+eUn+aViCc+4oiaIOehruWumjwvYnV0dG9uPlwKCQkJPGJ1dHRvbiBpZD0nc2VqLXByZWZzLWNhbmNlbCcgdGl0bGU9J+WPlua2iOacrOasoeiuvuWumu+8jOaJgOaciemAiemhuei/mOWOnyc+WCDlj5bmtog8L2J1dHRvbj5cCgkJPC9kaXY+XAoJCTxkaXYgaWQ9J3Nlai1wcmVmcy10aXRsZSc+U2VhcmNoRW5naW5lSnVtcENFIOiuvue9rjwvZGl2PlwKCQk8dWw+XAoJCQk8bGk+XAoJCQkJPGlucHV0IHR5cGU9J2NoZWNrYm94JyBpZD0nc2VqLXByZWZzLW9wZW5Jbk5ld1RhYicgLz4g5Zyo5paw6aG16Z2i5omT5byAXAoJCQkJPGlucHV0IHR5cGU9J2NoZWNrYm94JyBpZD0nc2VqLXByZWZzLWRlYnVnJyAvPiDosIPor5XmqKHlvI9cCgkJCTwvbGk+XAoJCQk8bGk+XAoJCQkJ5pCc57Si5YiX6KGo54mI5pys77yaXAoJCQkJPHNlbGVjdCBpZD0nc2VqLXByZWZzLWVuZ2luZUxpc3REYXRhVHlwZScgPlwKCQkJCQk8b3B0aW9uIHZhbHVlPSdjdXN0b20nPueUqOaIt+eJiOacrDwvb3B0aW9uPlwKCQkJCQk8b3B0aW9uIHZhbHVlPSd0ZWQ0MjMnPnRlZDQyM+eJiOacrDwvb3B0aW9uPlwKCQkJCTwvc2VsZWN0PlwKCQkJCTxhIHN0eWxlPSdtYXJnaW4tbGVmdDogMjBweDsnIHRhcmdldD0nX2JsYW5rJyBocmVmPSdodHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3NjcmlwdHMvMTYxOTMvZmVlZGJhY2snIHRpdGxlPSfpgJrov4flj43ppojnu5nkvZzogIXliqDlhaXkvaDnmoTniYjmnKwnPuWKoOWFpeS9oOeahOeJiOacrO+8nzwvYT5cCgkJCTwvbGk+XAoJCQk8bGk+6Ieq5a6a5LmJ5pCc57Si5YiX6KGoOlwKCQkJCTxzZWotaSBpZD0nc2VqLXByZWZzLWVuZ2luZUxpc3QtdGlwJz4oPyk8L3Nlai1pPlwKCQkJCTxkaXY+XAoJCQkJCTx0ZXh0YXJlYSBpZD0nc2VqLXByZWZzLWVuZ2luZUxpc3QnIHN0eWxlPSdoZWlnaHQ6IDM1MHB4Oyc+PC90ZXh0YXJlYT5cCgkJCQk8L2Rpdj5cCgkJCTwvbGk+XAoJCTwvdWw+XAoJCTxkaXYgaWQ9J3Nlai1wcmVmcy1taW5pdGlwJyBzdHlsZT0nZGlzcGxheTogbm9uZTsnPiIgKwoJCQkJaW50cm9kdWNlVG9IdG1sKCkgKyAiXAoJCTwvZGl2PlwKCQkiOwoJCQlkaXYgPSBudWxsOwoKCQkJdmFyIGVuZ2luZUxpc3RUeXBlX3NlbCA9ICQoImVuZ2luZUxpc3REYXRhVHlwZSIpLAoJCQkJZW5naW5lTGlzdF90eHQgPSAkKCJlbmdpbmVMaXN0Iik7CgoJCQl2YXIgY2xvc2UgPSBmdW5jdGlvbigpIHsKCQkJCWlmIChzdHlsZU5vZGUpIHsKCQkJCQlzdHlsZU5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZU5vZGUpOwoJCQkJfQoJCQkJdmFyIGRpdiA9ICQoInNldHVwIik7CgkJCQlkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpOwoJCQl9OwoKCQkJb24oJCgib2siKSwgImNsaWNrIiwgZnVuY3Rpb24oKSB7CgkJCQlHTV9zZXRWYWx1ZSgib3BlbkluTmV3VGFiIiwgcHJlZnMub3BlbkluTmV3VGFiID0gISEkKCJvcGVuSW5OZXdUYWIiKS5jaGVja2VkKTsKCQkJCUdNX3NldFZhbHVlKCJkZWJ1ZyIsIHByZWZzLmRlYnVnID0gISEkKCJkZWJ1ZyIpLmNoZWNrZWQpOwoJCQkJR01fc2V0VmFsdWUoImVuZ2luZUxpc3REYXRhVHlwZSIsIHByZWZzLmVuZ2luZUxpc3REYXRhVHlwZSA9IGVuZ2luZUxpc3RUeXBlX3NlbC52YWx1ZSk7CgoJCQkJaWYgKGVuZ2luZUxpc3RUeXBlX3NlbC52YWx1ZSA9PSAiY3VzdG9tIikgewoJCQkJCUdNX3NldFZhbHVlKCJlbmdpbmVMaXN0IiwgZW5naW5lTGlzdERhdGEuY3VzdG9tID0gZW5naW5lTGlzdF90eHQudmFsdWUpOwoJCQkJfQoKCQkJCS8vIOWIt+aWsOW3peWFt+adoQoJCQkJcmVtb3ZlKCk7CgkJCQlyZWxvYWREZWJ1ZygpOwoJCQkJZGVidWcoInJ1biIpOwoJCQkJcnVuKCk7CgkJCQljbG9zZSgpOwoJCQl9KTsKCgkJCW9uKCQoImNhbmNlbCIpLCAiY2xpY2siLCBjbG9zZSk7CgoJCQkkKCJlbmdpbmVMaXN0LXRpcCIpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHsKCQkJCXZhciBtaW5pdGlwID0gJCgibWluaXRpcCIpOwoJCQkJbWluaXRpcC5zdHlsZS5kaXNwbGF5ID0gKG1pbml0aXAuc3R5bGUuZGlzcGxheSA9PSAiYmxvY2siKSA/ICJub25lIiA6ICJibG9jayI7CgkJCX07CgoJCQllbmdpbmVMaXN0VHlwZV9zZWwub25jaGFuZ2UgPSBmdW5jdGlvbigpIHsKCQkJCWVuZ2luZUxpc3RfdHh0LnZhbHVlID0gZW5naW5lTGlzdERhdGFbZW5naW5lTGlzdFR5cGVfc2VsLnZhbHVlXS50cmltKCk7CgkJCX07CgoJCQkkKCJvcGVuSW5OZXdUYWIiKS5jaGVja2VkID0gcHJlZnMub3BlbkluTmV3VGFiOwoJCQkkKCJkZWJ1ZyIpLmNoZWNrZWQgPSBwcmVmcy5kZWJ1ZzsKCQkJZW5naW5lTGlzdFR5cGVfc2VsLnZhbHVlID0gcHJlZnMuZW5naW5lTGlzdERhdGFUeXBlOwoKCQkJZW5naW5lTGlzdF90eHQudmFsdWUgPSBlbmdpbmVMaXN0RGF0YVtwcmVmcy5lbmdpbmVMaXN0RGF0YVR5cGVdLnRyaW0oKTsKCQl9CgkJLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS3lj6/orr7nva7pobnnu5PmnZ8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCXZhciBkZWJ1ZzsKCglmdW5jdGlvbiByZWxvYWREZWJ1ZygpIHsKCQlkZWJ1ZyA9IHByZWZzLmRlYnVnID8gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSA6IGZ1bmN0aW9uKCkge307Ly9jb25zb2xlLmRlYnVn5ZyoY2hyb21l6YeM5aSx5Y675L2c55SoCgl9CgoKCWZ1bmN0aW9uIGdldFBvc3RGb3JtSFRNTChuYW1lLCB1cmwsIGFyZ3MsIG5ld1RhYikgeyAvL+iOt+WPliBtZXRob2Qg5Li6IFBPU1Qg55qE6KGo5Y2V55qEIEhUTUwKCQl2YXIgZm9ybSA9ICI8Zm9ybSBtZXRob2Q9J3Bvc3QnIiArCgkJCSIgYWN0aW9uPSciICsgdXJsICsgIicgaWQgPSdzZWpfIiArIG5hbWUgKyAiJyIgKwoJCQkobmV3VGFiID8gIiB0YXJnZXQ9J19ibGFuayciIDogIiIpICsKCQkJIj4iOwoJCWZvciAodmFyIGFyZyBpbiBhcmdzKSB7CgkJCXZhciBpbnB1dCA9ICI8aW5wdXQgdHlwZT0naGlkZGVuJyIgKwoJCQkJIiBuYW1lPSciICsgYXJnICsgIiciICsKCQkJCSIgdmFsdWU9JyIgKyBhcmdzW2FyZ10gKyAiJyIgKwoJCQkJIiAvPiI7CgkJCWZvcm0gKz0gaW5wdXQ7CgkJfQoJCWZvcm0gKz0gIjwvZm9ybT4iOwoJCXJldHVybiBmb3JtOwoJfQoKCWZ1bmN0aW9uIHdyYXBUb0hpZGUoaHRtbCkgeyAvL+WMheijhSBIVE1MIOWFg+e0oOS7o+eggeS7pemakOiXj+ivpeWFg+e0oAoJCXJldHVybiAiPHNwYW4gc3R5bGU9J2Rpc3BsYXk6bm9uZTsnPiIgKyBodG1sICsgIjwvc3Bhbj4iOwoJfQoKCWZ1bmN0aW9uIHRvUkUob2JqKSB7CgkJaWYgKG9iaiBpbnN0YW5jZW9mIFJlZ0V4cCkgewoJCQlyZXR1cm4gb2JqOwoJCX0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHsKCQkJcmV0dXJuIG5ldyBSZWdFeHAob2JqWzBdLCBvYmpbMV0pOwoJCX0gZWxzZSB7CgkJCXJldHVybiBuZXcgUmVnRXhwKG9iaik7CgkJfQoJfQoKCWZ1bmN0aW9uIGdldE1TdHIoZnVuYykgewoJCXZhciBsaW5lcyA9IGZ1bmMudG9TdHJpbmcoKTsKCQlsaW5lcyA9IGxpbmVzLnN1YnN0cmluZyhsaW5lcy5pbmRleE9mKCIvKiIpICsgMywgbGluZXMubGFzdEluZGV4T2YoIiovIikpOwoJCXJldHVybiBsaW5lczsKCX0KCglmdW5jdGlvbiB0b0VzY2FwZUNoYXJhY3RlcihzdHIpIHsgLy9kQeS9v+eUqElTTy04ODU5LTHnvJbnoIHvvIznvZHpobXlj6rog73kvb/nlKjovazkuYnlrZfnrKYoVVRGMTYp5p2l5pi+56S65YW25LuW5a2X56ymIOi/memHjOaYr+Wvuei9rOS5ieWtl+espihVVEYxNinov5vooYznvJbnoIEKCQl2YXIgbGVuZ3RoID0gc3RyLmxlbmd0aDsKCQl2YXIgcmV0ID0gW107CgkJdmFyIGNoYXJhY3RlcjsKCQl2YXIgY2hhckNvZGU7CgkJdmFyIGdDb2RlOwoJCXZhciBuZVJlZyA9IC9bXGRBLXpdLzsKCQlmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CgkJCWNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7CgkJCWlmIChjaGFyQ29kZSA8PSAxMjgpIHsKCQkJCWNoYXJhY3RlciA9IHN0ci5jaGFyQXQoaSk7CgkJCQlpZiAobmVSZWcudGVzdChjaGFyYWN0ZXIpKSB7IC8qYXNjaWnnmoTmlbDlrZflrZfmr43kuI3nvJbnoIEqLwoJCQkJCXJldC5wdXNoKGNoYXJhY3Rlcik7CgkJCQl9IGVsc2UgcmV0LnB1c2goIiUiICsgY2hhckNvZGUudG9TdHJpbmcoMTYpKTsKCQkJfSBlbHNlIHsKCQkJCWdDb2RlID0gY2hhckNvZGUudG9TdHJpbmcoKTsKCQkJCWlmIChnQ29kZSkgewoJCQkJCXdoaWxlIChnQ29kZS5sZW5ndGggPCA0KSB7CgkJCQkJCWdDb2RlID0gIjAiICsgZ0NvZGU7CgkJCQkJfQoJCQkJCXJldC5wdXNoKCIlMjYlMjMiICsgZ0NvZGUgKyAiJTNCIik7CgkJCQl9IGVsc2UgewoJCQkJCS8q5a2X5bqT6YeM6Z2i5rKh5pyJLiovCgkJCQl9CgkJCX0KCQl9CgkJcmV0dXJuIHJldC5qb2luKCIiKTsKCX0KCglmdW5jdGlvbiBnZXRGYXZpY29uVXJsKHVybCwgdHlwZSkgewoJCXZhciB1cmkgPSBwYXJzZVVyaSh1cmwpOwoJCXN3aXRjaCAodHlwZSkgewoJCQljYXNlIDA6CgkJCQlyZXR1cm4gImh0dHA6Ly9nLnNvei5pbS8iICsgdXJpLmhvc3Q7CgkJCWRlZmF1bHQ6CgkJCQlyZXR1cm4gdXJpLnByb3RvY29sICsgIjovLyIgKyB1cmkuaG9zdCArICIvZmF2aWNvbi5pY28iOwoJCX0KCX0KCgkvLyBwYXJzZVVyaSAxLjIuMgoJLy8gKGMpIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPgoJLy8gTUlUIExpY2Vuc2UKCXZhciBwYXJzZVVyaSA9IGZ1bmN0aW9uKHN0cikgewoJCXZhciBvID0gcGFyc2VVcmkub3B0aW9ucywKCQkJbSA9IG8ucGFyc2VyW28uc3RyaWN0TW9kZSA/ICJzdHJpY3QiIDogImxvb3NlIl0uZXhlYyhzdHIpLAoJCQl1cmkgPSB7fSwKCQkJaSA9IDE0OwoKCQl3aGlsZSAoaS0tKSB1cmlbby5rZXlbaV1dID0gbVtpXSB8fCAiIjsKCgkJdXJpW28uZHMubmFtZV0gPSB7fTsKCQl1cmlbby5kcy5uYW1lXVswXSA9IHt9OwoJCXVyaVtvLmRzLm5hbWVdWzBdWyJrZXkiXSA9ICh1cmkucHJvdG9jb2wgPyB1cmkucHJvdG9jb2wgOiAiaHR0cCIpICsgIjovLyIgKyB1cmkuaG9zdCArICh1cmkucG9ydCA/ICI6IiArIHVyaS5wb3J0IDogIiIpICsgIi8iOwoJCXVyaVtvLmRzLm5hbWVdWzBdWyJ2YWwiXSA9ICIvIjsKCQlpID0gMDsKCQl2YXIgdGVtcHN1YiA9ICIvIiwKCQkJc3VicyA9IHVyaVtvLmtleVsxMF1dLnN1YnN0cigxKS5zcGxpdCgiLyIpOwoJCWZvciAodmFyIGogPSAxOyBqIDwgKHN1YnMubGVuZ3RoICsgMSk7IGorKywgaSsrKSB7CgkJCXRlbXBzdWIgKz0gdGVtcHN1YiA9PT0gIi8iID8gc3Vic1tpXSA6ICIvIiArIHN1YnNbaV07CgkJCWlmIChzdWJzW2ldKSB7CgkJCQl1cmlbby5kcy5uYW1lXVtqXSA9IHt9OwoJCQkJdXJpW28uZHMubmFtZV1bal1bImtleSJdID0gc3Vic1tpXTsKCQkJCXVyaVtvLmRzLm5hbWVdW2pdWyJ2YWwiXSA9IHRlbXBzdWI7CgkJCX0KCQl9CgoJCXVyaVtvLnEubmFtZV0gPSB7fTsKCQl1cmlbby5rZXlbMTJdXS5yZXBsYWNlKG8ucS5wYXJzZXIsIGZ1bmN0aW9uKCQwLCAkMSwgJDIpIHsKCQkJaWYgKCQxKSB1cmlbby5xLm5hbWVdWyQxXSA9ICQyOwoJCX0pOwoJCXVyaVtvLmFxLm5hbWVdID0ge307CgkJdXJpW28ua2V5WzEzXV0ucmVwbGFjZShvLmFxLnBhcnNlciwgZnVuY3Rpb24oJDAsICQxLCAkMikgewoJCQlpZiAoJDEpIHVyaVtvLmFxLm5hbWVdWyQxXSA9ICQyOwoJCX0pOwoKCQlyZXR1cm4gdXJpOwoJfTsKCXBhcnNlVXJpLm9wdGlvbnMgPSB7CgkJc3RyaWN0TW9kZTogZmFsc2UsCgkJa2V5OiBbInNvdXJjZSIsICJwcm90b2NvbCIsICJhdXRob3JpdHkiLCAidXNlckluZm8iLCAidXNlciIsICJwYXNzd29yZCIsICJob3N0IiwgInBvcnQiLCAicmVsYXRpdmUiLCAicGF0aCIsICJkaXJlY3RvcnkiLCAiZmlsZSIsICJxdWVyeSIsICJhbmNob3IiXSwKCQlxOiB7CgkJCW5hbWU6ICJxdWVyeUtleSIsCgkJCXBhcnNlcjogLyg/Ol58JikoW14mPV0qKT0/KFteJl0qKS9nCgkJfSwKCQlhcTogewoJCQluYW1lOiAiYW5jaG9ycXVlcnlLZXkiLAoJCQlwYXJzZXI6IC8oPzpefCYpKFteJj1dKik9PyhbXiZdKikvZwoJCX0sCgkJZHM6IHsKCQkJbmFtZTogImRpcmVjdG9yeVN1YiIKCQl9LAoJCXBhcnNlcjogewoJCQlzdHJpY3Q6IC9eKD86KFteOlwvPyNdKyk6KT8oPzpcL1wvKCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oW146XC8/I10qKSg/OjooXGQqKSk/KSk/KCgoKD86W14/I1wvXSpcLykqKShbXj8jXSopKSg/Olw/KFteI10qKSk/KD86IyguKikpPykvLAoJCQlsb29zZTogL14oPzooPyFbXjpAXSs6W146QFwvXSpAKShbXjpcLz8jLl0rKTopPyg/OlwvXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KFteOlwvPyNdKikoPzo6KFxkKikpPykoKChcLyg/OltePyNdKD8hW14/I1wvXSpcLltePyNcLy5dKyg/Ols/I118JCkpKSpcLz8pPyhbXj8jXC9dKikpKD86XD8oW14jXSopKT8oPzojKC4qKSk/KS8KCQl9Cgl9OwoKCWZ1bmN0aW9uIGFkZEdsb2JhbFN0eWxlKCkgewoJCS8vIOa3u+WKoOWFqOWxgOagt+W8j+WSjOiHquWumuS5ieagt+W8jwoJCXZhciBzdHlsZTsKCQlpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZWotc3R5bGUiKSkgewoJCQlzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CgkJCXN0eWxlLmlkID0gInNlai1zdHlsZSI7CgkJCXN0eWxlLnR5cGUgPSAidGV4dC9jc3MiOwoJCQlzdHlsZS50ZXh0Q29udGVudCA9IE1BSU5fQ1NTICsgIlxuIiArIChtYXRjaGVkUnVsZS5zdHlsaXNoIHx8ICIiKTsKCQkJZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CgkJCWlmIChwcmVmcy5kaXNwbGF5ID09PSBmYWxzZSl7CgkJCQlzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CgkJCQlzdHlsZS5pZCA9ICJzZWotZGlzcGxheS1zdHlsZSI7CgkJCQlzdHlsZS50eXBlID0gInRleHQvY3NzIjsKCQkJCXN0eWxlLnRleHRDb250ZW50ID0gIiNzZWotY29udGFpbmVye3BvaW50ZXItZXZlbnRzOm5vbmU7b3BhY2l0eTogMC4xO30iOwoJCQkJZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7CgkJCX0KCQl9CgoJfQoKCWZ1bmN0aW9uIGFkZENvbnRhaW5lcihpVGFyZ2V0LCBpSW5wdXQpIHsKCQlmdW5jdGlvbiBwYXJzZURhdGFTdHIoc3RyKSB7IC8v6L2s5o2i5paH5pys5pWw5o2uCgkJCXZhciBMaXN0ID0gc3RyLnNwbGl0KC9cbig/PVteXHNdKS8pOwoJCQlMaXN0LmZvckVhY2goZnVuY3Rpb24oZWFjaExpc3QpIHsKCQkJCXZhciBsaW5lID0gZWFjaExpc3Quc3BsaXQoL1tcblxyXSsvKTsKCQkJCXZhciBjYXRlZ29yeSA9IGxpbmVbMF07CgkJCQljYXRlZ29yeSA9IGNhdGVnb3J5LnNwbGl0KCItLSIpOwoJCQkJaWYgKGlzVGhlU2FtZUNhdGVnb3J5KGNhdGVnb3J5WzBdLCBtYXRjaGVkUnVsZS5lbmdpbmVMaXN0KSkgewoJCQkJCWNvbnRhaW5lci5pbm5lckhUTUwgKz0gIjxzZWpsaT48c2Vqc3BhbiBpZD0nc2VqLWV4cGFuZGVkLWNhdGVnb3J5Jz4iICsgc3ZnLmxpc3QgKyBjYXRlZ29yeVswXSArICI8L3NlanNwYW4+PC9zZWpsaT4iOwoJCQkJCXBhcnNlTGluZShjb250YWluZXIsIGxpbmUsIHRydWUpOwoJCQkJfSBlbHNlIHsKCQkJCQl2YXIgY29udFNlamxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2VqbGkiKTsKCQkJCQljb250U2VqbGkuaW5uZXJIVE1MID0gIjxzZWpzcGFuIGNsYXNzPSdzZWotZW5naW5lIHNlai1kcm9wLWxpc3QtdHJpZ2dlcic+Iisgc3ZnLmxpc3QgKyBjYXRlZ29yeVswXSArICI8L3NlanNwYW4+IjsKCQkJCQl2YXIgc2VqdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWp1bCIpOwoJCQkJCXNlanVsLmNsYXNzTmFtZSA9ICJzZWotZHJvcC1saXN0IjsKCQkJCQlwYXJzZUxpbmUoc2VqdWwsIGxpbmUsIGZhbHNlKTsKCQkJCQljb250U2VqbGkuYXBwZW5kQ2hpbGQoc2VqdWwpOwoJCQkJCWNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250U2VqbGkpOwoJCQkJfQoJCQl9KTsKCgoJCQkvL3N0ciA9IHN0ci5yZXBsYWNlKC9bXG5ccl0rW1xzXC9dKi1ccyooXFMrKTovZywgIl9QT1NUXyAkMToiKTsgLy/mj5DliY3lpITnkIbkuIvnibnmrornmoQgcG9zdCDmlrnlvI8KCgkJCWZ1bmN0aW9uIHBhcnNlQXJncyhzdHIpIHsKCQkJCXZhciBhcnIgPSBzdHIuc3BsaXQoIiMiKTsKCQkJCXZhciBhcmdzID0ge307CgkJCQlhcnIuZm9yRWFjaChmdW5jdGlvbihzKSB7CgkJCQkJdmFyIGFyZ0FyciA9IHMuc3BsaXQoIj0iKTsKCQkJCQlhcmdzW2FyZ0FyclswXV0gPSBhcmdBcnJbMV07CgkJCQl9KTsKCQkJCXJldHVybiBhcmdzOwoJCQl9OwoKCQkJZnVuY3Rpb24gcGFyc2VMaW5lKGNvbnRhaW5lciwgbGluZSwgaXNDdXJyZW50KSB7CgkJCQlsaW5lLnNwbGljZSgwLCAxKTsKCQkJCXZhciBzZWp1bCwgZGVmYXVsdEVuZ2luZSwgY29udFNlamxpOwoJCQkJdmFyIGZsYWcsIGZsYWcyOwoJCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgaSsrKSB7CgkJCQkJaWYgKCFsaW5lW2ldKSBjb250aW51ZTsKCgkJCQkJaWYgKGxpbmVbaV0uaW5kZXhPZigiLy8iKSA9PSAwKSB7CgkJCQkJCWNvbnRpbnVlOwoJCQkJCX0KCQkJCQl2YXIgYXJyID0gbGluZVtpXS5yZXBsYWNlKC/vvIwvZywgIiwgIikuc3BsaXQoLyxccy8pOwoJCQkJCWlmIChpc0N1cnJlbnQgJiYgbWF0Y2hlZFJ1bGUuZW5naW5lTGlzdCAmJiB0b1JFKG1hdGNoZWRSdWxlLnVybCkudGVzdChhcnJbMV0pKSB7IC8v5Y675o6J6Lez6L2s5Yiw5b2T5YmN5byV5pOOCgkJCQkJCWlmIChmbGFnID09IGkgLSAxKSBmbGFnKys7CgkJCQkJCWlmIChmbGFnMiA9PSBpIC0gMSkgewoJCQkJCQkJaWYgKGkgPT0gbGluZS5sZW5ndGggLSAxKSB7CgkJCQkJCQkJY29udFNlamxpLmFwcGVuZENoaWxkKHNlanVsKTsKCQkJCQkJCQljb250YWluZXIuYXBwZW5kQ2hpbGQoY29udFNlamxpKTsKCQkJCQkJCX0KCQkJCQkJCWZsYWcyKys7CgkJCQkJCX0KCQkJCQkJY29udGludWU7CgkJCQkJfQoJCQkJCXZhciBlbmdpbmUgPSB7fTsKCQkJCQlpZiAobGluZVtpXS5pbmRleE9mKCIlcG9zdCIpICE9IC0xKSB7CgkJCQkJCWVuZ2luZS5tZXRob2QgPSAiUE9TVCI7CgkJCQkJCXZhciB0d28gPSBsaW5lW2ldLnNwbGl0KCIlcG9zdCMiKTsKCQkJCQkJbGluZVtpXSA9IHR3b1swXTsKCQkJCQkJZW5naW5lLmFyZ3MgPSBwYXJzZUFyZ3ModHdvWzFdKTsKCQkJCQl9CgkJCQkJaWYgKGFyci5sZW5ndGggPT09IDEpIHsgLy/liIbnsbsKCQkJCQkJZmxhZyA9IGk7CgkJCQkJCWlmIChmbGFnMiA9PSBpIC0gMSAmJiBzZWp1bCAhPSAiIikgewoJCQkJCQkJY29udFNlamxpLmFwcGVuZENoaWxkKHNlanVsKTsKCQkJCQkJCWNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250U2VqbGkpOwoJCQkJCQl9CgkJCQkJCWRlZmF1bHRFbmdpbmUgPSBhcnJbMF0udHJpbSgpOwoJCQkJCQlzZWp1bCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlanVsIik7CgkJCQkJCXNlanVsLmNsYXNzTmFtZSA9ICJzZWotZHJvcC1saXN0IjsKCQkJCQkJY29udGludWU7CgkJCQkJfQoJCQkJCWlmICgvXHNccy8udGVzdChhcnJbMF0pKSB7IC8v5byV5pOO5YiG57G75Y+q5pSv5oyBMue6p++8jOaJgOS7peS4pOS4qnRhYuWwseaYr+S6jOe6p+WIhuexu+eahOW8leaTjgoJCQkJCQl2YXIgc2VqbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWpsaSIpOwoJCQkJCQlzZWpsaS5pbm5lckhUTUwgPSBnZXRhUGF0dGVybihhcnIsZW5naW5lKTsKCQkJCQkJc2VqdWwuYXBwZW5kQ2hpbGQoc2VqbGkpOwoJCQkJCQlpZiAoaSA9PSBmbGFnICsgMSkgeyAvL+eUseS6juS6jOe6p+WIhuexu+Wkp+WkmuaYr+W8leaTjue7huWIhu+8jOaJgOS7peW8leaTjuWQjeWtl+S4iuS5n+mcgOimgeiDveeCueWHu+aJjeihjAoJCQkJCQkJYXJyWzBdID0gZGVmYXVsdEVuZ2luZTsKCQkJCQkJCWNvbnRTZWpsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlamxpIik7CgkJCQkJCQljb250U2VqbGkuaW5uZXJIVE1MID0gZ2V0YVBhdHRlcm4oYXJyLGVuZ2luZSkucmVwbGFjZSgic2VqLWVuZ2luZSIsICJzZWotZW5naW5lIHNlai1kcm9wLWxpc3QtdHJpZ2dlciIpOwoJCQkJCQl9CgkJCQkJCWZsYWcyID0gaTsgLy9mbGFnMuS7o+ihqOS6jOe6p+WIhuexu+eahOW8leaTjuagh+iusO+8jOe7k+adn+WQjumcgOimgeWGmeWFpeWIl+ihqAoJCQkJCQlpZiAoaSA9PSBsaW5lLmxlbmd0aCAtIDEpIHsgLy/lpoLmnpzlt7LkuoznuqfliIbnsbvnmoTlvJXmk47nu5PlsL7vvIzlhpnlhaXliJfooagKCQkJCQkJCWNvbnRTZWpsaS5hcHBlbmRDaGlsZChzZWp1bCk7CgkJCQkJCQljb250YWluZXIuYXBwZW5kQ2hpbGQoY29udFNlamxpKTsKCQkJCQkJfQoJCQkJCQljb250aW51ZTsKCQkJCQl9CgkJCQkJaWYgKC9cc1teXHNdLy50ZXN0KGFyclswXSkpIHsKCQkJCQkJaWYgKGZsYWcyID09IGkgLSAxICYmIHNlanVsICE9ICIiKSB7IC8v55yL5piv5ZCm5LqM57qn5YiG57G75byV5pOO57uT5p2fCgkJCQkJCQljb250U2VqbGkuYXBwZW5kQ2hpbGQoc2VqdWwpOwoJCQkJCQkJY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRTZWpsaSk7CgkJCQkJCX0KCQkJCQkJc2VqdWwgPSAiIjsKCQkJCQkJc2VqbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWpsaSIpOwoJCQkJCQlzZWpsaS5pbm5lckhUTUwgPSBnZXRhUGF0dGVybihhcnIsZW5naW5lKTsKCQkJCQkJY29udGFpbmVyLmFwcGVuZENoaWxkKHNlamxpKTsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJfQoKCQlmdW5jdGlvbiBnZXRhUGF0dGVybihhcnIsZW5naW5lKSB7CgkJCQllbmdpbmUubmFtZSA9IGFyclswXS50cmltKCk7CgkJCQllbmdpbmUudXJsID0gYXJyWzFdOwoJCQkJaWYoZW5naW5lLm1ldGhvZCA9PSAiUE9TVCIpIGVuZ2luZS51cmwgPSBlbmdpbmUudXJsLnNwbGl0KCIlcG9zdCIpWzBdOwoJCQkJZW5naW5lLmhvc3QgPSBwYXJzZVVyaShlbmdpbmUudXJsKS5ob3N0OwoJCQkJaWYgKGFyclsyXSkgZW5naW5lLmZhdmljb24gPSBhcnJbMl07CgkJCQl2YXIgYSA9IGFQYXR0ZXJuLnJlcGxhY2UoIiR1cmwkIiwgZW5naW5lLnVybCkKCQkJCQkucmVwbGFjZSgiJG5hbWUkIiwgZW5naW5lLm5hbWUpCgkJCQkJLnJlcGxhY2UoIiR0aXRsZSQiLCBlbmdpbmUubmFtZSk7CgkJCQlpZiAoZW5naW5lLmZhdmljb24pIHsKCQkJCQlpZiAoL15mYS8udGVzdChlbmdpbmUuZmF2aWNvbikpIGEgPSBhLnJlcGxhY2UoIjxpbWcgc3JjPSckZmF2aWNvbiQnIGNsYXNzPSdzZWotZW5naW5lLWljb24nIC8+IiwgIjxzZWotaSBjbGFzcz0nZmEgIiArIGVuZ2luZS5mYXZpY29uICsgIic+PC9zZWotaT4iKTsKCQkJCQlhID0gYS5yZXBsYWNlKCIkZmF2aWNvbiQiLCBlbmdpbmUuZmF2aWNvbik7CgkJCQl9IGVsc2UgewoJCQkJCWEgPSBhLnJlcGxhY2UoInNyYz0nJGZhdmljb24kJyIsICIiKTsKCQkJCX0KCgkJCQlpZiAoZW5naW5lLm1ldGhvZCAmJiBlbmdpbmUubWV0aG9kLnRvVXBwZXJDYXNlKCkgPT0gIlBPU1QiKSB7CgkJCQkJdmFyIGYgPSB3cmFwVG9IaWRlKGdldFBvc3RGb3JtSFRNTChlbmdpbmUubmFtZSwgZW5naW5lLnVybCwgZW5naW5lLmFyZ3MsIHByZWZzLm9wZW5Jbk5ld1RhYikpOwoJCQkJCWEgPSBhLnJlcGxhY2UoIiRmb3JtJCIsIGYpOwoJCQkJCWEgPSBhLnJlcGxhY2UoImEgaHJlZj0nJyIsImJ1dHRvbiB0eXBlPSdzdWJtaXQnIHZhbHVlPSdTdWJtaXQnIiArICJmb3JtPSdzZWpfIisgZW5naW5lLm5hbWUgKyAiJyIgKTsKCQkJCX0gZWxzZSB7CgkJCQkJYSA9IGEucmVwbGFjZSgiJGZvcm0kIiwgIiIpOwoJCQkJfQoJCQkJcmV0dXJuIGE7CgkJCX0KCQkJLy8g5Yib5bu6ZG9tCgkJdmFyIGFQYXR0ZXJuID0gIjxhIGhyZWY9JycgY2xhc3M9J3Nlai1lbmdpbmUnIiArIChwcmVmcy5vcGVuSW5OZXdUYWIgPyAiIHRhcmdldD0nX2JsYW5rJyAiIDogIiAiKSArCgkJCSJ1cmw9JyR1cmwkJyBfdGl0bGU9JyR0aXRsZSQnPiIgKwoJCQkiPGltZyBzcmM9JyRmYXZpY29uJCcgY2xhc3M9J3Nlai1lbmdpbmUtaWNvbicgLz4kZm9ybSQ8c3Bhbj4kbmFtZSQ8L3NwYW4+PC9hPiI7CgoJCXZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWp1bCIpOwoJCWNvbnRhaW5lci5pZCA9ICJzZWotY29udGFpbmVyIjsKCgkJY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoIm1vdXNlZG93biIsIG1vdXNlZG93bmhhbmRsZXIsIHRydWUpOwoJCWlmIChtYXRjaGVkUnVsZS5zdHlsZSkgewoJCQljb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IG1hdGNoZWRSdWxlLnN0eWxlOwoJCX0KCQkvLyDmoLnmja7mkJzntKLliJfooajnmoTnsbvlnovlvpfliLDmlbDmja4KCQl2YXIgZW5naW5lTGlzdERhdGFTdHIgPSBlbmdpbmVMaXN0RGF0YVtwcmVmcy5lbmdpbmVMaXN0RGF0YVR5cGVdIHx8IGVuZ2luZUxpc3REYXRhLm5vcm1hbDsKCQlwYXJzZURhdGFTdHIoZW5naW5lTGlzdERhdGFTdHIpOwoJCXZhciBpbnNlcnRXaGVyZSA9IG1hdGNoZWRSdWxlLmluc2VydEludG9Eb2MgPyBtYXRjaGVkUnVsZS5pbnNlcnRJbnRvRG9jLndoZXJlIDogImJlZm9yZUJlZ2luIjsgLy/orr7nva7mj5LlhaXnmoTkvY3nva4KCQkKCQl2YXIgc2VqQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNlai1idXR0b24iKTsKCgkJaWYgKCFzZWpCdXR0b24pIHt9IGVsc2UgaWYgKHNlakJ1dHRvbikgewoJCQlzZWpCdXR0b24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWpCdXR0b24pOwoJCX0KCgkJdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlamRpdiIpOwoJCWJ1dHRvbi5pZCA9ICJzZWotYnV0dG9uIjsKCQlidXR0b24ub25tb3VzZW92ZXIgPSBmdW5jdGlvbigpIHsKCQkJCWlmICgkKCIjc2VqLWNvbnRhaW5lciIpLmNzcygicG9pbnRlci1ldmVudHMiKSA9PT0gIm5vbmUiKSB7CgkJCQkJJCgiI3Nlai1jb250YWluZXIiKS5jc3MoInBvaW50ZXItZXZlbnRzIiwgImFsbCIpLmNzcygib3BhY2l0eSIsICIxIik7CgkJCQkJR01fc2V0VmFsdWUoImRpc3BsYXkiLCB0cnVlKTsKCQkJCX0gZWxzZSB7CgkJCQkJJCgiI3Nlai1jb250YWluZXIiKS5jc3MoInBvaW50ZXItZXZlbnRzIiwgIm5vbmUiKS5jc3MoIm9wYWNpdHkiLCAiMC4xIik7CgkJCQkJR01fc2V0VmFsdWUoImRpc3BsYXkiLCBmYWxzZSk7CgkJCQl9CgkJCX0KCQlkb2N1bWVudC5oZWFkLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGJ1dHRvbixkb2N1bWVudC5oZWFkKTsKCQkvL+iuvue9ruaMiemSrgoJCXZhciBjb25maWdCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWotbGkiKTsKCQljb25maWdCdG4uaW5uZXJIVE1MID0gIjxzZWpzcGFuIGNsYXNzPSdzZWotZW5naW5lJz4iICsgc3ZnLnNldHRpbmcgKyAiPC9zZWpzcGFuPiI7CgkJY29uZmlnQnRuLm9uY2xpY2sgPSBvcGVuUHJlZnM7CgkJY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbmZpZ0J0bik7CgoJCXN3aXRjaCAoaW5zZXJ0V2hlcmUudG9Mb3dlckNhc2UoKSkgeyAvL+aPkuWFpeWIsOaWh+aho+S4rQoJCQljYXNlICJiZWZvcmViZWdpbiI6CgkJCQlpVGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgaVRhcmdldCk7CgkJCQlicmVhazsKCQkJY2FzZSAiYWZ0ZXJiZWdpbiI6CgkJCQlpZiAoaVRhcmdldC5maXJzdENoaWxkKSB7CgkJCQkJaVRhcmdldC5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBpVGFyZ2V0LmZpcnN0Q2hpbGQpOwoJCQkJfSBlbHNlIHsKCQkJCQlpVGFyZ2V0LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7CgkJCQl9CgkJCQlicmVhazsKCQkJY2FzZSAiYmVmb3JlZW5kIjoKCQkJCWlUYXJnZXQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKCQkJCWJyZWFrOwoJCQljYXNlICJhZnRlcmVuZCI6CgkJCQlpZiAoaVRhcmdldC5uZXh0U2libGluZykgewoJCQkJCWlUYXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBpVGFyZ2V0Lm5leHRTaWJsaW5nKTsKCQkJCX0gZWxzZSB7CgkJCQkJaVRhcmdldC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7CgkJCQl9CgkJCQlicmVhazsKCQl9CgoJCWlmICh0eXBlb2YgbWF0Y2hlZFJ1bGUuZW5kRml4ID09ICJmdW5jdGlvbiIpIHsKCQkJdHJ5IHsKCQkJCW1hdGNoZWRSdWxlLmVuZEZpeCgpOwoJCQl9IGNhdGNoIChleCkgewoJCQkJY29uc29sZS5lcnJvcigiZW5kRml4IOmUmeivryIsIGV4KTsKCQkJfQoJCX0KCgkJZnVuY3Rpb24gbW91c2Vkb3duaGFuZGxlcihlKSB7CgkJCXZhciB0YXJnZXQgPSBlLnRhcmdldDsKCQkJaWYgKCF0YXJnZXQuaHJlZikgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7CgkJCWlmICghdGFyZ2V0IHx8IHRhcmdldC5jbGFzc05hbWUuaW5kZXhPZigic2VqLWVuZ2luZSIpID09IC0xKSByZXR1cm47CgkJCWlmICghdGFyZ2V0IHx8ICF0aGlzLmNvbnRhaW5zKHRhcmdldCkpIHJldHVybjsKCQkJdmFyIHZhbHVlOwoJCQlpZiAodHlwZW9mIGlJbnB1dCA9PSAiZnVuY3Rpb24iKSB2YWx1ZSA9IGlJbnB1dCgpOwoJCQllbHNlIHsKCQkJCWlmIChpSW5wdXQubm9kZU5hbWUgPT0gIklOUFVUIiB8fCBpSW5wdXQubG9jYWxOYW1lID09ICJ0ZXh0YXJlYSIpIHZhbHVlID0gaUlucHV0LnZhbHVlOwoJCQkJZWxzZSB2YWx1ZSA9IGlJbnB1dC50ZXh0Q29udGVudDsKCQkJfQoJCQlpZiAoZG9jdW1lbnQuY2hhcmFjdGVyU2V0ICE9ICJVVEYtOCIpIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTsKCQkJLy8g5qC55o2u5ZCO5Luj5YWD57Sg5Lit5piv5ZCm5a2Y5ZyoIGZvcm0g5YWD57Sg77yM5Yik5pat5o+Q5Lqk5pa55byP5bm26L+b6KGM5aSE55CGCgkJCS8vIOWmguaenOayoeaciSBmb3JtIOWFg+e0oO+8jOWwhuS8muS9v+eUqCBHRVQg5pa55rOV5o+Q5Lqk77yb5aaC5p6c5pyJ77yM5bCG5Lya5L2/55SoIFBPU1Qg5pa55rOV5o+Q5LqkCgkJCXZhciBmb3JtcyA9IHRhcmdldC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiZm9ybSIpOwoJCQlpZiAoZm9ybXMubGVuZ3RoID09IDApIHsgLy/mj5DkuqTmlrnlvI/kuLogR0VUCgkJCXZhbHVlID0gdmFsdWUucmVwbGFjZSgiJiIsIiUyNiIpOy8vJuebtOaOpeaPkOS6pOWIsOWcsOWdgOagj+S4reaXoOazleaQnOe0ou+8jOWPr+iDvei/mOacieWFtuS7lueJueauiuespuWPt+S5n+mcgOimgeexu+S8vOWkhOeQhuOAguWPquWcqGdldAoJCQl2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIiMiLCIlMjMiKTsKCQkJCXRhcmdldC5ocmVmID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgidXJsIikucmVwbGFjZSgvJXMvZywgdmFsdWUpOyAvL+abv+aNoiLlhajpg6gi5YWz6ZSu6K+NCgkJCX0gZWxzZSB7IC8v5o+Q5Lqk5pa55byP5Li6IFBPU1QKCQkJCXZhciBpbnB1dHMgPSB0YXJnZXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImlucHV0Iik7CgkJCQlmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykgaW5wdXRzW2ldLnZhbHVlID0gaW5wdXRzW2ldLnZhbHVlLnJlcGxhY2UoLyVzL2csIHZhbHVlKTsgLy8vLyDmm7/mjaIi5YWo6YOoIuWFs+mUruivjQoJCQl9CgkJfQoJfQoKCWZ1bmN0aW9uIHJ1bigpIHsKCQkvLyDnmb7luqbmkJzntKLmj5LlhaXliLDpobbpg6jmkJzntKLmnaHkuIvpnaLlsLHkvJrpgKDmiJDpobXpnaLpg6jliIblhYPntKDnmoTmtojlpLHvvIzmiYDku6XpnIDopoHmr4/kuKrpg6jliIbpg73liKTmlq3kuIvmmK/lkKblrZjlnKgKCQkvLyDliKTmlq3mj5LlhaXkvY3nva7lkozovpPlhaXmoYbmmK/lkKblrZjlnKgKCQl2YXIgaVRhcmdldCA9IG1hdGNoZWRSdWxlLmluc2VydEludG9Eb2MgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1hdGNoZWRSdWxlLmluc2VydEludG9Eb2MudGFyZ2V0KSA6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImhlYWQiKTsKCQl2YXIgaUlucHV0OwoJCWlmIChtYXRjaGVkUnVsZS5rZXl3b3JkKSB7CgkJCWlmICh0eXBlb2YgbWF0Y2hlZFJ1bGUua2V5d29yZCA9PSAiZnVuY3Rpb24iKSB7CgkJCQlpSW5wdXQgPSBtYXRjaGVkUnVsZS5rZXl3b3JkOwoJCQkJaWYgKCFpSW5wdXQoKSkgewoJCQkJCXJldHVybjsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWF0Y2hlZFJ1bGUua2V5d29yZCk7CgkJCX0KCQl9IGVsc2UgewoJCQlpSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJpbnB1dFt0eXBlPSdzZWFyY2gnXSxpbnB1dFt0eXBlPSd0ZXh0J11bYXV0b2NvbXBsZXRlPSdvZmYnXSxpbnB1dFthdXRvY29tcGxldGU9J29mZiddOm5vdChbdHlwZV0pIikgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiaW5wdXRbdHlwZT0ndGV4dCddW25hbWVdW3ZhbHVlXSxpbnB1dFtuYW1lXVt2YWx1ZV06bm90KFt0eXBlXSkiKTsKCQl9CgkJZGVidWcoIuaPkuWFpeeahOS9jee9ruS4uiAlbyIsIGlUYXJnZXQpOwoJCWRlYnVnKCLljLnphY3nmoTovpPlhaXmoYbkuLogJW8iLCBpSW5wdXQpOwoKCQlpZiAoIWlUYXJnZXQgfHwgIWlJbnB1dCkgewoJCQlkZWJ1Zygi5LiN5a2Y5Zyo5o+S5YWl55qE5L2N572u5oiW5Yy56YWN55qE6L6T5YWl5qGGIiwgaVRhcmdldCwgaUlucHV0KTsKCQkJcmV0dXJuOwoJCX0KCgkJYWRkR2xvYmFsU3R5bGUoKTsKCgkJLy8g5Yik5pat5piv5ZCm5a2Y5ZyoCgkJdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZWotY29udGFpbmVyIik7CgoJCWlmICghY29udGFpbmVyKSB7fSBlbHNlIGlmIChjb250YWluZXIpIHsKCQkJY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTsKCQl9CgkJYWRkQ29udGFpbmVyKGlUYXJnZXQsIGlJbnB1dCk7CgkJY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNlai1jb250YWluZXIiKTsKCQlpZihjb250YWluZXIpY29udGFpbmVyLnN0eWxlLmxlZnQgPSAiY2FsYyg1MCUgLSAiICsgZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpLndpZHRoICsgIiAvIDIpIjsKCX0KCglmdW5jdGlvbiByZW1vdmUoKSB7CgkJdmFyIGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiI3Nlai1jb250YWluZXIiKTsKCQlpZiAoIWVsZW1zKSByZXR1cm47CgoJCVtdLmZvckVhY2guY2FsbChlbGVtcywgZnVuY3Rpb24oZWxlbSkgewoJCQllbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbSk7CgkJfSk7CgkJCgkJZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIjc2VqLWJ1dHRvbiIpOwoJCVtdLmZvckVhY2guY2FsbChlbGVtcywgZnVuY3Rpb24oZWxlbSkgewoJCQllbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbSk7CgkJfSk7Cgl9CgoJLy8gaWZyYW1lIOemgeatouWKoOi9vQoJaWYgKHdpbmRvdy5zZWxmICE9IHdpbmRvdy50b3ApIHJldHVybjsKCQoJbG9hZFByZWZzKCk7CgkKCXZhciBtYXRjaGVkUnVsZTsKCglydWxlcy5zb21lKGZ1bmN0aW9uKHJ1bGUpIHsKCQlpZiAodG9SRShydWxlLnVybCkudGVzdChsb2NhdGlvbi5ocmVmKSkgewoJCQltYXRjaGVkUnVsZSA9IHJ1bGU7CgkJCWlmICh0eXBlb2YgcnVsZS5ldGMgPT0gImZ1bmN0aW9uIikgewoJCQkJdHJ5IHsKCQkJCQlydWxlLmV0YygpOwoJCQkJfSBjYXRjaCAoZXgpIHsKCQkJCQljb25zb2xlLmVycm9yKCLmiafooYwgZXRjIOmUmeivryIsIGV4KTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gdHJ1ZTsKCQl9Cgl9KTsKCgl2YXIgZmxhZyA9IDA7CglkZWJ1Zygi5Yy56YWN55qE6KeE5YiZ5Li6IiwgbWF0Y2hlZFJ1bGUpOwoJZGVidWcoIuiEmuacrOaJp+ihjOS6jjoiK2RvY3VtZW50LnJlYWR5U3RhdGUpOwoJZGVidWcoIm9ucmVhZHlzdGF0ZWNoYW5nZSBmdW5jdGlvbjoiK2RvY3VtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSk7CglpZiAoIW1hdGNoZWRSdWxlKSByZXR1cm47CglHTV9yZWdpc3Rlck1lbnVDb21tYW5kKCLorr7nva4iLG9wZW5QcmVmcyk7Cglkb2N1bWVudC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHsKCQlmbGFnID0gMTsKCQlpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PSAiaW50ZXJhY3RpdmUiKSB7CgkJCWRlYnVnKCJvbnJlYWR5c3RhdGVjaGFuZ2U6ICIgKyBkb2N1bWVudC5yZWFkeVN0YXRlKTsKCQkJcnVuKCk7CgkJfSBlbHNlIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09ICJjb21wbGV0ZSIpIHsKCQkJZGVidWcoIm9ucmVhZHlzdGF0ZWNoYW5nZTogIiArIGRvY3VtZW50LnJlYWR5U3RhdGUpOwoJCQlydW4oKTsKCQkJLyppZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiQ2hyb21lIikgIT0gLTEpIHsKCQkJCXNldFRpbWVvdXQocnVuKCksIDEwMDApOwoJCQl9Ki8KCQl9Cgl9OwoJd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkgey8v55So5LqORHVja0R1Y2tHbyzlvbHlk43liLDkuoZvbnJlYWR5c3RhdGVjaGFuZ2UKCQlkZWJ1Zygib25sb2FkIik7CgkJaWYgKGZsYWcgPT0gMClydW4oKTsKCQlmbGFnID0gMTsKCX07CglpZiAobWF0Y2hlZFJ1bGUubXV0YXRpb25UaXRsZSkgewoJCWRlYnVnKCLmt7vliqDmoIfpopjoioLngrnnm5Hop4blmag6IHRpdGxlIik7CgkJdmFyIHdhdGNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigidGl0bGUiKTsKCQl2YXIgb2JzZXJ2ZXIgPSBuZXcgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7CgkJCWRlYnVnKCLmoIfpopjlj5HnlJ/kuoblj5jljJYiLCBkb2N1bWVudC50aXRsZSk7CgkJCXJ1bigpOwoJCX0pOwoJCW9ic2VydmVyLm9ic2VydmUod2F0Y2gsIHsKCQkJY2hpbGRMaXN0OiB0cnVlLAoJCQlzdWJ0cmVlOiB0cnVlLAoJCQljaGFyYWN0ZXJEYXRhOiB0cnVlCgkJfSk7Cgl9Cn0pKCk7Cg==","requires":[{"meta":{"name":"jquery-3.3.1.min.js","url":"https://code.jquery.com/jquery-3.3.1.min.js","ts":1604018246409,"mimetype":"text/javascript"},"source":""}]},{"name":"淘宝、天猫、聚划算、京东、苏宁、唯品会、华为、耐克、魅族、联想、华硕、小米有品抢购助手v2","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["gwdang.com","ubja.vip","alicdn.com","api.m.taobao.com","jd.com","quan.suning.com","sapi.k780.com","tp.hd.mi.com","buy.vmall.com","sale.vmall.com","pinduoduo.com"],"orig_excludes":[],"orig_includes":["*/item.taobao.com/*","*://chaoshi.tmall.com/*","*://chaoshi.detail.tmall.com/*","*://detail.tmall.com/*","*://detail.tmall.hk/*","*://buy.tmall.com/order/*","*://buy.taobao.com/*","*://cart.tmall.com/*","*://cart.taobao.com/*","*://s.click.taobao.com*","*://buy.tmall.com/order/confirmOrderWap.htm*","*://buy.taobao.com/auction/order/confirm_order.htm*","*://buy.tmall.com/auction/order/confirm_order.htm*","*://buy.liangxinyao.com/order/confirm_order.htm*","*://detail.liangxinyao.com/*","https://cart.jd.com/*","*/item.jd.com/*","*//item.jd.hk/*","*//i-item.jd.com/*","*//npcitem.jd.hk/*","https://trade.jd.com/shopping/order/*","https://trade.jd.hk/shopping/order/*","https://plogin.m.jd.com*","https://m.jd.com/*","https://wqdeal.jd.com*","https://wqs.jd.com*","https://wq.jd.com/*","https://marathon.jd.com*","https://union-click.jd.com*","https://item.yiyaojd.com/*","*/product.suning.com/*","https://shopping.suning.com/cart.do*","https://shopping.suning.com/order.do*","https://shopping.hksuning.com*","https://product.hksuning.com*","https://detail.meizu.com/item*","https://ordercenter.meizu.com/order/*","https://*.lenovo.com.cn/product/*","https://buy.lenovo.com.cn/checkout/*","https://www.asus.com.cn/store/product*","https://www.asus.com.cn/store/checkout/*","https://detail.vip.com/*","https://www.vipglobal.hk/*","https://cart.vip.com/*","https://checkout.vip.com/*","https://www.nike.com/*","https://www.nike.com/cn/t/*","https://www.nike.com/cn/zh-Hans/cart*","https://www.nike.com/cn/checkout*","https://www.vmall.com/product/*","https://www.vmall.com/order/nowConfirmcart*","https://www.vmall.com/cart2*","https://m.vmall.com/order/confirm*","https://buy.vmall.com/submit_order.html*","https://www.fliggy.com/*","https://www.xiaomiyoupin.com/detail*","https://trade.xiaomiyoupin.com/tr/checkout*","*you.163.com/item/detail*","*www.adidas.com.cn/item*","*/item.gome.com.cn/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"Acyce":"s500","AutoSubOdr":"n0","cycNbr":"s0","goBtn":"n0","goodsId":"s0","goodsNum":"s1","jlmd":"n1","mqmd":"n0","qzxd":"n0","ref":"n0"},"ts":1636593424925},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/393577-%E6%B7%98%E5%AE%9D-%E5%A4%A9%E7%8C%AB-%E8%81%9A%E5%88%92%E7%AE%97-%E4%BA%AC%E4%B8%9C-%E8%8B%8F%E5%AE%81-%E5%94%AF%E5%93%81%E4%BC%9A-%E8%80%90%E5%85%8B-%E9%AD%85%E6%97%8F-%E8%81%94%E6%83%B3-%E5%8D%8E%E7%A1%95%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8Bv2/code/%E6%B7%98%E5%AE%9D%E3%80%81%E5%A4%A9%E7%8C%AB%E3%80%81%E8%81%9A%E5%88%92%E7%AE%97%E3%80%81%E4%BA%AC%E4%B8%9C%E3%80%81%E8%8B%8F%E5%AE%81%E3%80%81%E5%94%AF%E5%93%81%E4%BC%9A%E3%80%81%E8%80%90%E5%85%8B%E3%80%81%E9%AD%85%E6%97%8F%E3%80%81%E8%81%94%E6%83%B3%E3%80%81%E5%8D%8E%E7%A1%95%E6%8A%A2%E8%B4%AD%E5%8A%A9%E6%89%8Bv2.user.js","uuid":"78ec173f-8be1-42de-b33f-afdd22c37572","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"http://libs.baidu.com/jquery/2.0.0/jquery.min.js","ts":1640489418519,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.min.js","url":"https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js","ts":1640489418902,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"jquery.min.js","url":"https://cdn.staticfile.org/jquery/1.12.4/jquery.min.js","ts":1640489418411,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"qrcode.min.js","url":"https://cdn.bootcdn.net/ajax/libs/qrcodejs/1.0.0/qrcode.min.js","ts":1640489418400,"mimetype":"text/javascript"},"source":""}]},{"name":"🔥🔥🔥文本选中复制🔥🔥🔥","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_prototypes":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["res1.doc88.com"],"orig_excludes":[],"orig_includes":["*://wenku.baidu.com/view/*","*://wenku.baidu.com/link*","*://www.51test.net/show/*","*://www.xuexi.la/*","*://www.xuexila.com/*","*://www.cspengbo.com/*","*://*.doc88.com/*","*://segmentfault.com/*","*://wk.baidu.com/view/*","*://leetcode-cn.com/problems/*","*://www.zhihu.com/*","*://z.30edu.com.cn/*","*://docs.qq.com/doc/*","*://boke112.com/post/*","*://www.yuque.com/*","*://www.commandlinux.com/*","*://*.diyifanwen.com/*","*://*.mbalib.com/*","*://*.cnitpm.com/*","*://bbs.mihoyo.com/ys/obc/*","*://*.ruiwen.com/*","*://www.uemeds.cn/*","*://www.oh100.com/*","*://www.aiyuke.com/news/*","*://www.fwsir.com/*","*://www.wenxm.cn/*","*://www.unjs.com/*","*://www.ahsrst.cn/*","*://*.yjbys.com/*","*://*.qidian.com/*","*://*.zongheng.com/*","*://*.17k.com/*","*://*.ciweimao.com/*","*://book.qq.com/*","*://*.360doc.com/content/*","*://*.850500.com/news/*","*://utaten.com/lyric/*","*://*.jianbiaoku.com/*","*://*.kt250.com/*","*://www.kejudati.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1605003072467,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/405130-%E6%96%87%E6%9C%AC%E9%80%89%E4%B8%AD%E5%A4%8D%E5%88%B6/code/%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5%E6%96%87%E6%9C%AC%E9%80%89%E4%B8%AD%E5%A4%8D%E5%88%B6%F0%9F%94%A5%F0%9F%94%A5%F0%9F%94%A5.user.js","uuid":"41236fb5-9c7f-4cec-9d43-f332fcb64bd6","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.bootcss.com/jquery/2.1.2/jquery.min.js","ts":1640312784397,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"clipboard.min.js","url":"https://cdn.jsdelivr.net/npm/clipboard@2/dist/clipboard.min.js","ts":1640312784222,"mimetype":"text/javascript"},"source":""}]},{"name":"极简知乎","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.zhihu.com/question/*","*://www.zhihu.com/search*","*://www.zhihu.com/hot","*://www.zhihu.com/follow","*://www.zhihu.com/","*://zhuanlan.zhihu.com/*","*://www.zhihu.com/signin*"],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1605003081970,"data":{}},"enabled":false,"position":7,"file_url":"https://greasyfork.org/scripts/37823-%E6%9E%81%E7%AE%80%E7%9F%A5%E4%B9%8E/code/%E6%9E%81%E7%AE%80%E7%9F%A5%E4%B9%8E.user.js","uuid":"17272cf7-8e86-49c5-bc2d-af55cd069346","source":""}]}