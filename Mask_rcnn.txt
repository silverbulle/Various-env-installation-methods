
roi pooling的过程可以详解如下：
第一步：先把roi中的坐标映射到feature map上，映射规则是：把各个坐标除以“输入图片与feature map大小的比值”，就得到feature map上的box坐标。
第二步：使用pooling得到输出，由于输入图片大小不一，在pooling的过程中需要计算pooling后的结果对应到feature map上所占的范围，然后在那个范围上取max或者取average。
roi pooling的过程也可以用如下三步来理解：
第一步：根据输入的image，将roi映射到feature map的对应位置
第二步：将映射后的区域划分为相同大小的sections（sections的数量与输出维度相同）
第三步：对每个section进行max pooling操作
这样就可以从不同大小的方框得到固定大小的相应的feature maps，输出feature map的大小不取决于roi和卷积feature map的大小。


30系显卡可能由于GPU算力太高导致nvcc fatal：Unsupported gpu architecture 'compute_86'
如果当前CUDA算力高于当前Pytorch版本支持的CUDA算力就会报出这个错误，可以在终端输入
export TORCH_CUDA_ARCH_LIST="7.5"
降低这个算力，就不会再报这个错误了。（但后续可能会造成CUDA Error：no kernal image is available for execution on decvice，似乎是编译的算力与显卡算力不匹配）


安装maskrcnn-banchmark时遇到的“AT_CHECK“ is undefined错误：
解决办法：
在maskrcnn_benchmark/csrc/cuda/deform_conv_cuda.cu和maskrcnn_benchmark/csrc/cuda/deform_pool_cuda.cu文件的开头加上
-------------------------------------------
#ifndef AT_CHECK
#define AT_CHECK TORCH_CHECK 
#endif
-------------------------------------------




